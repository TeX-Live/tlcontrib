%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Puzzle_BG_Start.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1
%AI9_PrintingDataBegin
%%For: Alice aus dem Wunderland
%%CreationDate: 10/22/2006
%%BoundingBox: 0 0 612 577
%%HiResBoundingBox: 0 0 612 576.0040
%%CropBox: 0 0 612 576.0040
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x204 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
    currentpacking
    true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
    bind def
} bind def
/nd{
    null def
}bdf
/xdf
{
    exch def
}bdf
/ldf 
{
    load def
}bdf
/ddf
{
    put
}bdf    
/xddf
{
    3 -1 roll put
}bdf    
/xpt
{
    exch put
}bdf
/ndf
{ 
    exch dup where{
        pop pop pop
    }{
        xdf
    }ifelse
}def
/cdndf
{
    exch dup currentdict exch known{
        pop pop
    }{
        exch def
    }ifelse
}def
/ps_level
    /languagelevel where{
        pop systemdict /languagelevel get exec
    }{
        1
    }ifelse
def
/level2 
    ps_level 2 ge
def
/level3 
    ps_level 3 ge
def
/ps_version
    {version cvr} stopped {
        -1
    }if
def
/set_gvm
{
    currentglobal exch setglobal
}bdf
/reset_gvm
{
    setglobal
}bdf
/makereadonlyarray
{
    /packedarray where{
        pop packedarray
    }{
        array astore readonly
    }ifelse
}bdf
/map_reserved_ink_name
{
    dup type /stringtype eq{
        dup /Red eq{
            pop (_Red_)
        }{
            dup /Green eq{
                pop (_Green_)
            }{
                dup /Blue eq{
                    pop (_Blue_)
                }{
                    dup () cvn eq{
                        pop (Process)
                    }if
                }ifelse
            }ifelse
        }ifelse
    }if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
    AGMUTIL_GSTATE begin
    /AGMUTIL_GSTATE_clr_spc currentcolorspace def
    /AGMUTIL_GSTATE_clr_indx 0 def
    /AGMUTIL_GSTATE_clr_comps 12 array def
    mark currentcolor counttomark
        {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
        /AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
    /AGMUTIL_GSTATE_fnt rootfont def
    /AGMUTIL_GSTATE_lw currentlinewidth def
    /AGMUTIL_GSTATE_lc currentlinecap def
    /AGMUTIL_GSTATE_lj currentlinejoin def
    /AGMUTIL_GSTATE_ml currentmiterlimit def
    currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
    /AGMUTIL_GSTATE_sa currentstrokeadjust def
    /AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
    /AGMUTIL_GSTATE_op currentoverprint def
    /AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
    /AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
    currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
        cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
    /AGMUTIL_GSTATE_ht currenthalftone def
    /AGMUTIL_GSTATE_flt currentflat def
    end
}def
/set_gstate
{
    AGMUTIL_GSTATE begin
    AGMUTIL_GSTATE_clr_spc setcolorspace
    AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
    /AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
    AGMUTIL_GSTATE_fnt setfont
    AGMUTIL_GSTATE_lw setlinewidth
    AGMUTIL_GSTATE_lc setlinecap
    AGMUTIL_GSTATE_lj setlinejoin
    AGMUTIL_GSTATE_ml setmiterlimit
    AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
    AGMUTIL_GSTATE_sa setstrokeadjust
    AGMUTIL_GSTATE_clr_rnd setcolorrendering
    AGMUTIL_GSTATE_op setoverprint
    AGMUTIL_GSTATE_bg cvx setblackgeneration
    AGMUTIL_GSTATE_ucr cvx setundercolorremoval
    AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
        AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
    AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
        {
        currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
            {
              mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
            } if
        }{
        AGMUTIL_GSTATE_ht sethalftone
        } ifelse
    AGMUTIL_GSTATE_flt setflat
    end
}def
/get_gstate_and_matrix
{
    AGMUTIL_GSTATE begin
    /AGMUTIL_GSTATE_ctm matrix currentmatrix def
    end
    get_gstate
}def
/set_gstate_and_matrix
{
    set_gstate
    AGMUTIL_GSTATE begin
    AGMUTIL_GSTATE_ctm setmatrix
    end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
    level3
        {sethalftone currenthalftone}
        {
            dup /HalftoneType get 3 eq
            {
                sethalftone currenthalftone
            }
            {
                begin
                Width Height mul {
                    Thresholds read {pop} if
                } repeat
                end
                currenthalftone
            } ifelse
        }ifelse
} def 
/rdcmntline
{
    currentfile AGMUTIL_str256 readline pop
    (%) anchorsearch {pop} if
} bdf
/filter_cmyk
{   
    dup type /filetype ne{
        exch () /SubFileDecode filter
    }
    {
        exch pop
    }
    ifelse
    [
    exch
    {
        AGMUTIL_src256 readstring pop
        dup length /AGMUTIL_srcLen exch def
        /AGMUTIL_ndx 0 def
        AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
            1 index exch get
            AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
            /AGMUTIL_ndx AGMUTIL_ndx 1 add def
        }for
        pop
        AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
    }
    bind
    /exec cvx
    ] cvx
} bdf
/filter_indexed_devn
{
    cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{   
    4 dict begin
    /srcStr xdf
    /dstStr xdf
    dup type /filetype ne{
        0 () /SubFileDecode filter
    }if
    [
    exch
        [
            /devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
            currentdict /srcStr get /readstring cvx /pop cvx
            /dup cvx /length cvx 0 /gt cvx [
                Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
                names_index Names length currentdict /srcStr get length 1 sub {
                    1 /index cvx /exch cvx /get cvx
                    currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
                    Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
                } for
                currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
            ] cvx /if cvx
            /end cvx
        ] cvx
        bind
        /exec cvx
    ] cvx
    end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
    AGMUTIL_imagefile 0 setfileposition
    10 dict begin
    /imageDict xdf
    /imbufLen Width BitsPerComponent mul 7 add 8 idiv def
    /imbufIdx 0 def
    /origDataSource imageDict /DataSource get def
    /origMultipleDataSources imageDict /MultipleDataSources get def
    /origDecode imageDict /Decode get def
    /dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
    imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
    {
        /imbufCnt imageDict /DataSource get length def
        /imbufs imbufCnt array def
        0 1 imbufCnt 1 sub {
            /imbufIdx xdf
            imbufs imbufIdx imbufLen string put
            imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
        } for
        DeviceN_PS2 {
            imageDict begin
            /DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
            /MultipleDataSources false def
            /Decode [0 1] def
            end
        } if
    }{
        /imbuf imbufLen string def
        Indexed_DeviceN level3 not and DeviceN_NoneName or {
            /srcDataStrs [ imageDict begin
                currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
                {
                    Width Decode length 2 div mul cvi string
                } repeat
                end ] def       
            imageDict begin
            /DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
            /Decode [0 1] def
            end
        }{
            imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
            imageDict /Decode [0 1] put
        } ifelse
    } ifelse
    imageDict exch
    load exec
    imageDict /DataSource origDataSource put
    imageDict /MultipleDataSources origMultipleDataSources put
    imageDict /Decode origDecode put    
    end
} bdf
/write_image_file
{
    begin
    { (AGMUTIL_imagefile) (w+) file } stopped{
        false
    }{
        Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
        2 dict begin
        /imbufLen Width BitsPerComponent mul 7 add 8 idiv def
        MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
            /imbuf imbufLen string def
        }if
        1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
            pop
            MultipleDataSources {
                0 1 DataSource length 1 sub {
                    DataSource type dup
                    /arraytype eq {
                        pop DataSource exch get exec
                    }{
                        /filetype eq {
                            DataSource exch get imbuf readstring pop
                        }{
                            DataSource exch get
                        } ifelse
                    } ifelse
                    AGMUTIL_imagefile exch writestring
                } for
            }{
                DataSource type dup
                /arraytype eq {
                    pop DataSource exec
                }{
                    /filetype eq {
                        DataSource imbuf readstring pop
                    }{
                        DataSource
                    } ifelse
                } ifelse
                AGMUTIL_imagefile exch writestring
            } ifelse
        }for
        end
        true
    }ifelse
    end
} bdf
/close_image_file
{
    AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
    /pstr statusdict /product get def
    pstr (HP LaserJet 2200) eq  
    pstr (HP LaserJet 4000 Series) eq or
    pstr (HP LaserJet 4050 Series ) eq or
    pstr (HP LaserJet 8000 Series) eq or
    pstr (HP LaserJet 8100 Series) eq or
    pstr (HP LaserJet 8150 Series) eq or
    pstr (HP LaserJet 5000 Series) eq or
    pstr (HP LaserJet 5100 Series) eq or
    pstr (HP Color LaserJet 4500) eq or
    pstr (HP Color LaserJet 4600) eq or
    pstr (HP LaserJet 5Si) eq or
    pstr (HP LaserJet 1200 Series) eq or
    pstr (HP LaserJet 1300 Series) eq or
    pstr (HP LaserJet 4100 Series) eq or 
    {
        userdict /AGMP_current_show /show load put
        userdict /show {
          currentcolorspace 0 get
          /Pattern eq
          {false charpath f}
          {AGMP_current_show} ifelse
        } put
    }if
    currentdict /pstr undef
} if
/consumeimagedata
{
    begin
    currentdict /MultipleDataSources known not
        {/MultipleDataSources false def} if
    MultipleDataSources
        {
        DataSource 0 get type
        dup /filetype eq
            {
            1 dict begin
            /flushbuffer Width cvi string def
            1 1 Height cvi
                {
                pop
                0 1 DataSource length 1 sub
                    {
                    DataSource exch get
                    flushbuffer readstring pop pop
                    }for
                }for
            end
            }if
        dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
            {
            Width Height mul cvi
                {
                0 1 DataSource length 1 sub
                    {dup DataSource exch get exec length exch 0 ne {pop}if}for
                dup 0 eq
                    {pop exit}if
                sub dup 0 le
                    {exit}if
                }loop
            pop
            }if     
        }
        {
        /DataSource load type 
        dup /filetype eq
            {
            1 dict begin
            /flushbuffer Width Decode length 2 idiv mul cvi string def
            1 1 Height { pop DataSource flushbuffer readstring pop pop} for
            end
            }if
        dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
            {
                Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
                    {
                    DataSource length dup 0 eq
                        {pop exit}if
                    sub dup 0 le
                        {exit}if
                    }loop
                pop
            }if
        }ifelse
    end
}bdf
/addprocs
{
      2{/exec load}repeat
      3 1 roll
      [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
    currenthalftone dup length dict copy begin
     currentdict 2 index known{
        1 index load dup length dict copy begin
        currentdict/TransferFunction known{
            /TransferFunction load
        }{
            currenttransfer
        }ifelse
         addprocs /TransferFunction xdf 
         currentdict end def
        currentdict end sethalftone
    }{ 
        currentdict/TransferFunction known{
            /TransferFunction load 
        }{
            currenttransfer
        }ifelse
        addprocs /TransferFunction xdf
        currentdict end sethalftone     
        pop
    }ifelse
}def
/clonearray
{
    dup xcheck exch
    dup length array exch
    Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
    {
    Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
    dup type /dicttype eq
        {
            Adobe_AGM_Core/AGMCORE_tmp get
            exch
            clonedict
            Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
        } if
    dup type /arraytype eq
        {
            Adobe_AGM_Core/AGMCORE_tmp get exch
            clonearray
            Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
        } if
    exch dup
    Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
    }forall
    exch {cvx} if
}bdf
/clonedict
{
    dup length dict
    begin
        {
        dup type /dicttype eq
            {
                clonedict
            } if
        dup type /arraytype eq
            {
                clonearray
            } if
        def
        }forall
    currentdict
    end
}bdf
/DeviceN_PS2
{
    /currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
    /indexed_colorspace_dict AGMCORE_gget dup null ne {
        dup /CSDBase known {
            /CSDBase get /CSD get_res /Names known 
        }{
            pop false
        }ifelse
    }{
        pop false
    } ifelse
} bdf
/DeviceN_NoneName
{   
    /Names where {
        pop
        false Names
        {
            (None) eq or
        } forall
    }{
        false
    }ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
    /AGMCORE_in_rip_sep where
    {
        pop dup type dup /arraytype eq exch /packedarraytype eq or
        {
            dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
            {
                /currentcolorspace exch AGMCORE_gput
                false
            }
            {
                true
            }ifelse
        }
        {
            true
        } ifelse
    }
    {
        true
    } ifelse
} bdf
/base_colorspace_type
{
    dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
    /pdfmark_5 {cleartomark} bind def
}{
    /pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
    2 dict begin
    /makerString exch def string /tmpString exch def
    {
        currentfile tmpString readline pop
        makerString anchorsearch
        {
        pop pop cleartomark exit
        }{
            3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
        } ifelse
    }loop
    end
} bdf
/doc_setup{
    Adobe_AGM_Utils begin
}bdf
/doc_trailer{
    currentdict Adobe_AGM_Utils eq{
        end
    }if
}bdf
systemdict /setpacking known
{
    setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
    currentpacking
    true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
    /Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
    where{
        /Adobe_AGM_Core_Id known
    }{
        false
    }ifelse
}ndf
/flushinput
{
    save
    2 dict begin
    /CompareBuffer 3 -1 roll def
    /readbuffer 256 string def
    mark
    {
    currentfile readbuffer {readline} stopped
        {cleartomark mark}
        {
        not
            {pop exit}
        if
        CompareBuffer eq
            {exit}
        if
        }ifelse
    }loop
    cleartomark
    end
    restore
}bdf
/getspotfunction
{
    AGMCORE_screen exch pop exch pop
    dup type /dicttype eq{
        dup /HalftoneType get 1 eq{
            /SpotFunction get
        }{
            dup /HalftoneType get 2 eq{
                /GraySpotFunction get
            }{ 
                pop
                {
                    abs exch abs 2 copy add 1 gt{
                        1 sub dup mul exch 1 sub dup mul add 1 sub
                    }{
                        dup mul exch dup mul add 1 exch sub
                    }ifelse
                }bind
            }ifelse
        }ifelse
    }if
} def
/clp_npth
{
    clip newpath
} def
/eoclp_npth
{
    eoclip newpath
} def
/npth_clp
{
    newpath clip
} def
/graphic_setup
{
    /AGMCORE_graphicsave save def
    concat
    0 setgray
    0 setlinecap
    0 setlinejoin
    1 setlinewidth
    [] 0 setdash
    10 setmiterlimit
    newpath
    false setoverprint
    false setstrokeadjust
    //Adobe_AGM_Core/spot_alias get exec
    /Adobe_AGM_Image where {
        pop
        Adobe_AGM_Image/spot_alias 2 copy known{
            get exec
        }{
            pop pop
        }ifelse
    } if
    100 dict begin
    /dictstackcount countdictstack def
    /showpage {} def
    mark
} def
/graphic_cleanup
{
    cleartomark
    dictstackcount 1 countdictstack 1 sub {end}for
    end
    AGMCORE_graphicsave restore
} def
/compose_error_msg
{
    grestoreall initgraphics    
    /Helvetica findfont 10 scalefont setfont
    /AGMCORE_deltaY 100 def
    /AGMCORE_deltaX 310 def
    clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
    0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
    0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
    0 AGMCORE_&setgray
    gsave 1 AGMCORE_&setgray fill grestore 
    1 setlinewidth gsave stroke grestore
    currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
    /AGMCORE_deltaY 12 def
    /AGMCORE_tmp 0 def
    AGMCORE_err_strings exch get
        {
        dup 32 eq
            {
            pop
            AGMCORE_str256 0 AGMCORE_tmp getinterval
            stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
                {
                currentpoint AGMCORE_deltaY sub exch pop
                clippath pathbbox pop pop pop 44 add exch moveto
                } if
            AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
            0 1 AGMCORE_str256 length 1 sub
                {
                AGMCORE_str256 exch 0 put
                }for
            /AGMCORE_tmp 0 def
            }
            {
                AGMCORE_str256 exch AGMCORE_tmp xpt
                /AGMCORE_tmp AGMCORE_tmp 1 add def
            } ifelse
        } forall
} bdf
/doc_setup{
    Adobe_AGM_Core begin
    /AGMCORE_ps_version xdf
    /AGMCORE_ps_level xdf
    errordict /AGM_handleerror known not{
        errordict /AGM_handleerror errordict /handleerror get put
        errordict /handleerror {
            Adobe_AGM_Core begin
            $error /newerror get AGMCORE_cur_err null ne and{
                $error /newerror false put
                AGMCORE_cur_err compose_error_msg
            }if
            $error /newerror true put
            end
            errordict /AGM_handleerror get exec
            } bind put
        }if
    /AGMCORE_environ_ok 
        ps_level AGMCORE_ps_level ge
        ps_version AGMCORE_ps_version ge and 
        AGMCORE_ps_level -1 eq or
    def
    AGMCORE_environ_ok not
        {/AGMCORE_cur_err /AGMCORE_bad_environ def} if
    /AGMCORE_&setgray systemdict/setgray get def
    level2{
        /AGMCORE_&setcolor systemdict/setcolor get def
        /AGMCORE_&setcolorspace systemdict/setcolorspace get def
    }if
    /AGMCORE_currentbg currentblackgeneration def
    /AGMCORE_currentucr currentundercolorremoval def
    /AGMCORE_distilling
        /product where{
            pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
        }{
            false
        }ifelse
    def
    /AGMCORE_GSTATE AGMCORE_key_known not{
        /AGMCORE_GSTATE 21 dict def
        /AGMCORE_tmpmatrix matrix def
        /AGMCORE_gstack 32 array def
        /AGMCORE_gstackptr 0 def
        /AGMCORE_gstacksaveptr 0 def
        /AGMCORE_gstackframekeys 10 def
        /AGMCORE_&gsave /gsave ldf
        /AGMCORE_&grestore /grestore ldf
        /AGMCORE_&grestoreall /grestoreall ldf
        /AGMCORE_&save /save ldf
        /AGMCORE_&setoverprint /setoverprint ldf
        /AGMCORE_gdictcopy {
            begin
            { def } forall
            end
        }def
        /AGMCORE_gput {
            AGMCORE_gstack AGMCORE_gstackptr get
            3 1 roll
            put
        }def
        /AGMCORE_gget {
            AGMCORE_gstack AGMCORE_gstackptr get
            exch
            get
        }def
        /gsave {
            AGMCORE_&gsave
            AGMCORE_gstack AGMCORE_gstackptr get
            AGMCORE_gstackptr 1 add
            dup 32 ge {limitcheck} if
            /AGMCORE_gstackptr exch store
            AGMCORE_gstack AGMCORE_gstackptr get
            AGMCORE_gdictcopy
        }def
        /grestore {
            AGMCORE_&grestore
            AGMCORE_gstackptr 1 sub
            dup AGMCORE_gstacksaveptr lt {1 add} if
            dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
                {/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
            /AGMCORE_gstackptr exch store
        }def
        /grestoreall {
            AGMCORE_&grestoreall
            /AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
        }def
        /save {
            AGMCORE_&save
            AGMCORE_gstack AGMCORE_gstackptr get
            AGMCORE_gstackptr 1 add
            dup 32 ge {limitcheck} if
            /AGMCORE_gstackptr exch store
            /AGMCORE_gstacksaveptr AGMCORE_gstackptr store
            AGMCORE_gstack AGMCORE_gstackptr get
            AGMCORE_gdictcopy
        }def
        /setoverprint{
            dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
        }def    
        0 1 AGMCORE_gstack length 1 sub {
                AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
        } for
    }if
    level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
    {
        /AGMCORE_&sysshfill systemdict/shfill get def
        /AGMCORE_&sysmakepattern systemdict/makepattern get def
        /AGMCORE_&usrmakepattern /makepattern load def
    }if
    /currentcmykcolor [0 0 0 0] AGMCORE_gput
    /currentstrokeadjust false AGMCORE_gput
    /currentcolorspace [/DeviceGray] AGMCORE_gput
    /sep_tint 0 AGMCORE_gput
    /devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
    /sep_colorspace_dict null AGMCORE_gput
    /devicen_colorspace_dict null AGMCORE_gput
    /indexed_colorspace_dict null AGMCORE_gput
    /currentcolor_intent () AGMCORE_gput
    /customcolor_tint 1 AGMCORE_gput
    <<
    /MaxPatternItem currentsystemparams /MaxPatternCache get
    >>
    setuserparams
    end
}def
/page_setup
{
    /setcmykcolor where{
        pop
        Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
    }if
    Adobe_AGM_Core begin
    /setcmykcolor
    {
        4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
        1 sub 4 1 roll
        3 {
            3 index add neg dup 0 lt {
                pop 0
            } if
            3 1 roll
        } repeat
        setrgbcolor pop
    }ndf
    /currentcmykcolor
    {
        /currentcmykcolor AGMCORE_gget aload pop
    }ndf
    /setoverprint
    {
        pop
    }ndf
    /currentoverprint
    {
        false
    }ndf
    /AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
    /AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
    /AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
    /AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
    /AGMCORE_plate_ndx 
        AGMCORE_cyan_plate{ 
            0
        }{
            AGMCORE_magenta_plate{
                1
            }{
                AGMCORE_yellow_plate{
                    2
                }{
                    AGMCORE_black_plate{
                        3
                    }{
                        4
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
        def
    /AGMCORE_have_reported_unsupported_color_space false def
    /AGMCORE_report_unsupported_color_space
    {
        AGMCORE_have_reported_unsupported_color_space false eq
        {
            (Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
            Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
        } if
    }def
    /AGMCORE_composite_job
        AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
    /AGMCORE_in_rip_sep
        /AGMCORE_in_rip_sep where{
            pop AGMCORE_in_rip_sep
        }{
            AGMCORE_distilling 
            {
                false
            }{
                userdict/Adobe_AGM_OnHost_Seps known{
                    false
                }{
                    level2{
                        currentpagedevice/Separations 2 copy known{
                            get
                        }{
                            pop pop false
                        }ifelse
                    }{
                        false
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
    def
    /AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
    /AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
    /AGM_preserve_spots 
        /AGM_preserve_spots where{
            pop AGM_preserve_spots
        }{
            AGMCORE_distilling AGMCORE_producing_seps or
        }ifelse
    def
    /AGM_is_distiller_preserving_spotimages
    {
        currentdistillerparams/PreserveOverprintSettings known
        {
            currentdistillerparams/PreserveOverprintSettings get
                {
                    currentdistillerparams/ColorConversionStrategy known
                    {
                        currentdistillerparams/ColorConversionStrategy get
                        /sRGB ne
                    }{
                        true
                    }ifelse
                }{
                    false
                }ifelse
        }{
            false
        }ifelse
    }def
    /convert_spot_to_process where {pop}{
        /convert_spot_to_process
        {
            //Adobe_AGM_Core begin
            dup map_alias {
                /Name get exch pop
            } if
            dup dup (None) eq exch (All) eq or
                {
                pop false
                }{
                AGMCORE_host_sep
                { 
                    gsave
                    1 0 0 0 setcmykcolor currentgray 1 exch sub
                    0 1 0 0 setcmykcolor currentgray 1 exch sub
                    0 0 1 0 setcmykcolor currentgray 1 exch sub
                    0 0 0 1 setcmykcolor currentgray 1 exch sub
                    add add add 0 eq
                    {
                        pop false
                    }{
                        false setoverprint
                        current_spot_alias false set_spot_alias
                        1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
                        set_spot_alias
                        currentgray 1 ne
                    }ifelse
                    grestore
                }{
                    AGMCORE_distilling
                    {
                        pop AGM_is_distiller_preserving_spotimages not
                    }{
                        //Adobe_AGM_Core/AGMCORE_name xddf
                        false
                        //Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
                        not AGMCORE_currentpagedevice/OverrideSeparations known and
                        {
                            AGMCORE_currentpagedevice/OverrideSeparations get
                            {
                                /HqnSpots /ProcSet resourcestatus
                                {
                                    pop pop pop true
                                }if
                            }if
                        }if                 
                        {
                            AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
                        }{
                            gsave
                            [/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
                            false
                            AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
                            {
                                get
                                { AGMCORE_name eq or}forall
                                not
                            }{
                                pop pop pop true
                            }ifelse
                            grestore
                        }ifelse
                    }ifelse
                }ifelse
            }ifelse
            end
        }def
    }ifelse
    /convert_to_process where {pop}{
        /convert_to_process
        {
            dup length 0 eq
                {
                pop false
                }{
                AGMCORE_host_sep
                { 
                dup true exch
                    {
                    dup (Cyan) eq exch
                    dup (Magenta) eq 3 -1 roll or exch
                    dup (Yellow) eq 3 -1 roll or exch
                    dup (Black) eq 3 -1 roll or
                        {pop}
                        {convert_spot_to_process and}ifelse
                    }
                forall
                    {
                    true exch
                        {
                        dup (Cyan) eq exch
                        dup (Magenta) eq 3 -1 roll or exch
                        dup (Yellow) eq 3 -1 roll or exch
                        (Black) eq or and
                        }forall
                        not
                    }{pop false}ifelse
                }{
                false exch
                    {
                    dup (Cyan) eq exch
                    dup (Magenta) eq 3 -1 roll or exch
                    dup (Yellow) eq 3 -1 roll or exch
                    dup (Black) eq 3 -1 roll or
                    {pop}
                    {convert_spot_to_process or}ifelse
                    }
                forall
                }ifelse
            }ifelse
        }def
    }ifelse 
    /AGMCORE_avoid_L2_sep_space  
        version cvr 2012 lt 
        level2 and 
        AGMCORE_producing_seps not and
    def
    /AGMCORE_is_cmyk_sep
        AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
    def
    /AGM_avoid_0_cmyk where{
        pop AGM_avoid_0_cmyk
    }{
        AGM_preserve_spots 
        userdict/Adobe_AGM_OnHost_Seps known 
        userdict/Adobe_AGM_InRip_Seps known or
        not and
    }ifelse
    {
        /setcmykcolor[
            {
                4 copy add add add 0 eq currentoverprint and{
                    pop 0.0005
                }if
            }/exec cvx
            /AGMCORE_&setcmykcolor load dup type/operatortype ne{
                /exec cvx
            }if
        ]cvx def
    }if
    /AGMCORE_IsSeparationAProcessColor
        {
        dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
        }def
    AGMCORE_host_sep{
        /setcolortransfer
        { 
            AGMCORE_cyan_plate{
                pop pop pop
            }{
                AGMCORE_magenta_plate{
                    4 3 roll pop pop pop
                }{
                    AGMCORE_yellow_plate{
                        4 2 roll pop pop pop
                    }{
                        4 1 roll pop pop pop
                    }ifelse
                }ifelse
            }ifelse
            settransfer  
        }   
        def
        /AGMCORE_get_ink_data
            AGMCORE_cyan_plate{
                {pop pop pop}
            }{
                AGMCORE_magenta_plate{
                    {4 3 roll pop pop pop}
                }{
                    AGMCORE_yellow_plate{
                        {4 2 roll pop pop pop}
                    }{
                        {4 1 roll pop pop pop}
                    }ifelse
                }ifelse
            }ifelse
        def
        /AGMCORE_RemoveProcessColorNames
            {
            1 dict begin
            /filtername
                {
                dup /Cyan eq 1 index (Cyan) eq or
                    {pop (_cyan_)}if
                dup /Magenta eq 1 index (Magenta) eq or
                    {pop (_magenta_)}if
                dup /Yellow eq 1 index (Yellow) eq or
                    {pop (_yellow_)}if
                dup /Black eq 1 index (Black) eq or
                    {pop (_black_)}if
                }def
            dup type /arraytype eq
                {[exch {filtername}forall]}
                {filtername}ifelse
            end
            }def
        level3 {
            /AGMCORE_IsCurrentColor
                {
                dup AGMCORE_IsSeparationAProcessColor
                    {
                    AGMCORE_plate_ndx 0 eq
                        {dup (Cyan) eq exch /Cyan eq or}if
                    AGMCORE_plate_ndx 1 eq
                        {dup (Magenta) eq exch /Magenta eq or}if
                    AGMCORE_plate_ndx 2 eq
                        {dup (Yellow) eq exch /Yellow eq or}if
                    AGMCORE_plate_ndx 3 eq
                        {dup (Black) eq exch /Black eq or}if
                    AGMCORE_plate_ndx 4 eq
                        {pop false}if
                    }{
                    gsave
                    false setoverprint
                    current_spot_alias false set_spot_alias
                    1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
                    set_spot_alias
                    currentgray 1 ne
                    grestore
                    }ifelse
                }def
            /AGMCORE_filter_functiondatasource
                {   
                5 dict begin
                /data_in xdf
                data_in type /stringtype eq
                    {
                    /ncomp xdf
                    /comp xdf
                    /string_out data_in length ncomp idiv string def
                    0 ncomp data_in length 1 sub
                        {
                        string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
                        }for
                    string_out
                    }{
                    string /string_in xdf
                    /string_out 1 string def
                    /component xdf
                    [
                    data_in string_in /readstring cvx
                        [component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
                        [/pop cvx ()]cvx /ifelse cvx
                    ]cvx /ReusableStreamDecode filter
                }ifelse
                end
                }def
            /AGMCORE_separateShadingFunction
                {
                2 dict begin
                /paint? xdf
                /channel xdf
                dup type /dicttype eq
                    {
                    begin
                    FunctionType 0 eq
                        {
                        /DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
                        currentdict /Decode known
                            {/Decode Decode channel 2 mul 2 getinterval def}if
                        paint? not
                            {/Decode [1 1]def}if
                        }if
                    FunctionType 2 eq
                        {
                        paint?
                            {
                            /C0 [C0 channel get 1 exch sub] def
                            /C1 [C1 channel get 1 exch sub] def
                            }{
                            /C0 [1] def
                            /C1 [1] def
                            }ifelse         
                        }if
                    FunctionType 3 eq
                        {
                        /Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def          
                        }if
                    currentdict /Range known
                        {/Range [0 1] def}if
                    currentdict
                    end}{
                    channel get 0 paint? AGMCORE_separateShadingFunction
                    }ifelse
                end
                }def
            /AGMCORE_separateShading
                {
                3 -1 roll begin
                currentdict /Function known
                    {
                    currentdict /Background known
                        {[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
                    Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
                    /ColorSpace [/DeviceGray] def
                    }{
                    ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
                        {
                        /ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
                        }{
                        ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
                        }ifelse
                    ColorSpace 0 get /Separation eq
                        {
                            {
                                [1 /exch cvx /sub cvx]cvx
                            }{
                                [/pop cvx 1]cvx
                            }ifelse
                            ColorSpace 3 3 -1 roll put
                            pop
                        }{
                            {
                                [exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
                            }{
                                pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
                            }ifelse
                            ColorSpace 3 3 -1 roll bind put
                        }ifelse
                    ColorSpace 2 /DeviceGray put                                                                        
                    }ifelse
                end
                }def
            /AGMCORE_separateShadingDict
                {
                dup /ColorSpace get
                dup type /arraytype ne
                    {[exch]}if
                dup 0 get /DeviceCMYK eq
                    {
                    exch begin 
                    currentdict
                    AGMCORE_cyan_plate
                        {0 true}if
                    AGMCORE_magenta_plate
                        {1 true}if
                    AGMCORE_yellow_plate
                        {2 true}if
                    AGMCORE_black_plate
                        {3 true}if
                    AGMCORE_plate_ndx 4 eq
                        {0 false}if     
                    dup not currentoverprint and
                        {/AGMCORE_ignoreshade true def}if
                    AGMCORE_separateShading
                    currentdict
                    end exch
                    }if
                dup 0 get /Separation eq
                    {
                    exch begin
                    ColorSpace 1 get dup /None ne exch /All ne and
                        {
                        ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
                            {
                            ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
                                {
                                /ColorSpace
                                    [
                                    /Separation
                                    ColorSpace 1 get
                                    /DeviceGray
                                        [
                                        ColorSpace 3 get /exec cvx
                                        4 AGMCORE_plate_ndx sub -1 /roll cvx
                                        4 1 /roll cvx
                                        3 [/pop cvx]cvx /repeat cvx
                                        1 /exch cvx /sub cvx
                                        ]cvx                                    
                                    ]def
                                }{
                                AGMCORE_report_unsupported_color_space
                                AGMCORE_black_plate not
                                    {
                                    currentdict 0 false AGMCORE_separateShading
                                    }if
                                }ifelse
                            }{
                            currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
                            0 exch 
                            dup not currentoverprint and
                                {/AGMCORE_ignoreshade true def}if
                            AGMCORE_separateShading
                            }ifelse 
                        }if         
                    currentdict
                    end exch
                    }if
                dup 0 get /DeviceN eq
                    {
                    exch begin
                    ColorSpace 1 get convert_to_process
                        {
                        ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
                            {
                            /ColorSpace
                                [
                                /DeviceN
                                ColorSpace 1 get
                                /DeviceGray
                                    [
                                    ColorSpace 3 get /exec cvx
                                    4 AGMCORE_plate_ndx sub -1 /roll cvx
                                    4 1 /roll cvx
                                    3 [/pop cvx]cvx /repeat cvx
                                    1 /exch cvx /sub cvx
                                    ]cvx                                    
                                ]def
                            }{
                            AGMCORE_report_unsupported_color_space
                            AGMCORE_black_plate not
                                {
                                currentdict 0 false AGMCORE_separateShading
                                /ColorSpace [/DeviceGray] def
                                }if
                            }ifelse
                        }{
                        currentdict
                        false -1 ColorSpace 1 get
                            {
                            AGMCORE_IsCurrentColor
                                {
                                1 add
                                exch pop true exch exit
                                }if
                            1 add
                            }forall
                        exch 
                        dup not currentoverprint and
                            {/AGMCORE_ignoreshade true def}if
                        AGMCORE_separateShading
                        }ifelse
                    currentdict
                    end exch
                    }if
                dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
                    {
                    exch begin
                    ColorSpace dup type /arraytype eq
                        {0 get}if
                    /DeviceGray ne
                        {
                        AGMCORE_report_unsupported_color_space
                        AGMCORE_black_plate not
                            {
                            ColorSpace 0 get /CIEBasedA eq
                                {
                                /ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
                                }if
                            ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
                                {
                                /ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
                                }if
                            ColorSpace 0 get /CIEBasedDEFG eq
                                {
                                /ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
                                }if
                            currentdict 0 false AGMCORE_separateShading
                            }if
                        }if
                    currentdict
                    end exch
                    }if
                pop
                dup /AGMCORE_ignoreshade known
                    {
                    begin
                    /ColorSpace [/Separation (None) /DeviceGray {}] def
                    currentdict end
                    }if
                }def
            /shfill
                {
                AGMCORE_separateShadingDict 
                dup /AGMCORE_ignoreshade known
                    {pop}
                    {AGMCORE_&sysshfill}ifelse
                }def
            /makepattern
                {
                exch
                dup /PatternType get 2 eq
                    {
                    clonedict
                    begin
                    /Shading Shading AGMCORE_separateShadingDict def
                    Shading /AGMCORE_ignoreshade known
                    currentdict end exch
                    {pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
                    exch AGMCORE_&sysmakepattern
                    }{
                    exch AGMCORE_&usrmakepattern
                    }ifelse
                }def
        }if
    }if
    AGMCORE_in_rip_sep{
        /setcustomcolor
        {
            exch aload pop
            dup 7 1 roll inRip_spot_has_ink not { 
                4 {4 index mul 4 1 roll}
                repeat
                /DeviceCMYK setcolorspace
                6 -2 roll pop pop
            }{ 
                //Adobe_AGM_Core begin
                    /AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
                end
                [/Separation 4 -1 roll /DeviceCMYK
                {dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
                ]
                setcolorspace
            }ifelse
            setcolor
        }ndf
        /setseparationgray
        {
            [/Separation (All) /DeviceGray {}] setcolorspace_opt
            1 exch sub setcolor
        }ndf
    }{
        /setseparationgray
        {
            AGMCORE_&setgray
        }ndf
    }ifelse
    /findcmykcustomcolor
    {
        5 makereadonlyarray
    }ndf
    /setcustomcolor
    {
        exch aload pop pop
        4 {4 index mul 4 1 roll} repeat
        setcmykcolor pop
    }ndf
    /has_color
        /colorimage where{
            AGMCORE_producing_seps{
                pop true
            }{
                systemdict eq
            }ifelse
        }{
            false
        }ifelse
    def
    /map_index
    {
        1 index mul exch getinterval {255 div} forall
    } bdf
    /map_indexed_devn
    {
        Lookup Names length 3 -1 roll cvi map_index
    } bdf
    /n_color_components
    {
        base_colorspace_type
        dup /DeviceGray eq{
            pop 1
        }{
            /DeviceCMYK eq{
                4
            }{
                3
            }ifelse
        }ifelse
    }bdf
    level2{
        /mo /moveto ldf
        /li /lineto ldf
        /cv /curveto ldf
        /knockout_unitsq
        {
            1 setgray
            0 0 1 1 rectfill
        }def
        level2 /setcolorspace AGMCORE_key_known not and{
            /AGMCORE_&&&setcolorspace /setcolorspace ldf
            /AGMCORE_ReplaceMappedColor
            {
                dup type dup /arraytype eq exch /packedarraytype eq or
                {
                    /AGMCORE_SpotAliasAry2 where {
                        begin
                        dup 0 get dup /Separation eq
                        {
                            pop
                            dup length array copy
                            dup dup 1 get
                            current_spot_alias
                            {
                                dup map_alias
                                {
                                    false set_spot_alias
                                    dup 1 exch setsepcolorspace
                                    true set_spot_alias
                                    begin
                                    /sep_colorspace_dict currentdict AGMCORE_gput
                                    pop pop pop
                                    [ 
                                        /Separation Name 
                                        CSA map_csa
                                        MappedCSA 
                                        /sep_colorspace_proc load
                                    ]
                                    dup Name
                                    end
                                }if
                            }if
                            map_reserved_ink_name 1 xpt
                        }{
                            /DeviceN eq 
                            {
                                dup length array copy
                                dup dup 1 get [ 
                                    exch {
                                        current_spot_alias{
                                            dup map_alias{
                                                /Name get exch pop
                                            }if
                                        }if
                                        map_reserved_ink_name
                                    } forall 
                                ] 1 xpt
                            }if
                        }ifelse
                        end
                    } if
                }if
            }def
            /setcolorspace
            {
                dup type dup /arraytype eq exch /packedarraytype eq or
                {
                    dup 0 get /Indexed eq
                    {
                        AGMCORE_distilling
                        {
                            /PhotoshopDuotoneList where
                            {
                                pop false
                            }{
                                true
                            }ifelse
                        }{
                            true
                        }ifelse
                        {
                            aload pop 3 -1 roll
                            AGMCORE_ReplaceMappedColor
                            3 1 roll 4 array astore
                        }if
                    }{
                        AGMCORE_ReplaceMappedColor
                    }ifelse
                }if
                DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
            }def
        }if 
    }{
        /adj
        {
            currentstrokeadjust{
                transform
                0.25 sub round 0.25 add exch
                0.25 sub round 0.25 add exch
                itransform
            }if
        }def
        /mo{
            adj moveto
        }def
        /li{
            adj lineto
        }def
        /cv{
            6 2 roll adj
            6 2 roll adj
            6 2 roll adj curveto
        }def
        /knockout_unitsq
        {
            1 setgray
            8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
        }def
        /currentstrokeadjust{
            /currentstrokeadjust AGMCORE_gget
        }def
        /setstrokeadjust{
            /currentstrokeadjust exch AGMCORE_gput
        }def
        /setcolorspace
        {
            /currentcolorspace exch AGMCORE_gput
        } def
        /currentcolorspace
        {
            /currentcolorspace AGMCORE_gget
        } def
        /setcolor_devicecolor
        {
            base_colorspace_type
            dup /DeviceGray eq{
                pop setgray
            }{
                /DeviceCMYK eq{
                    setcmykcolor
                }{
                    setrgbcolor
                }ifelse
            }ifelse
        }def
        /setcolor
        {
            currentcolorspace 0 get
            dup /DeviceGray ne{
                dup /DeviceCMYK ne{
                    dup /DeviceRGB ne{
                        dup /Separation eq{
                            pop
                            currentcolorspace 3 get exec
                            currentcolorspace 2 get
                        }{
                            dup /Indexed eq{
                                pop
                                currentcolorspace 3 get dup type /stringtype eq{
                                    currentcolorspace 1 get n_color_components
                                    3 -1 roll map_index
                                }{
                                    exec
                                }ifelse
                                currentcolorspace 1 get
                            }{
                                /AGMCORE_cur_err /AGMCORE_invalid_color_space def
                                AGMCORE_invalid_color_space
                            }ifelse
                        }ifelse
                    }if
                }if
            }if
            setcolor_devicecolor
        } def
    }ifelse
    /sop /setoverprint ldf
    /lw /setlinewidth ldf
    /lc /setlinecap ldf
    /lj /setlinejoin ldf
    /ml /setmiterlimit ldf
    /dsh /setdash ldf
    /sadj /setstrokeadjust ldf
    /gry /setgray ldf
    /rgb /setrgbcolor ldf
    /cmyk /setcmykcolor ldf
    /sep /setsepcolor ldf
    /devn /setdevicencolor ldf
    /idx /setindexedcolor ldf
    /colr /setcolor ldf
    /csacrd /set_csa_crd ldf
    /sepcs /setsepcolorspace ldf
    /devncs /setdevicencolorspace ldf
    /idxcs /setindexedcolorspace ldf
    /cp /closepath ldf
    /clp /clp_npth ldf
    /eclp /eoclp_npth ldf
    /f /fill ldf
    /ef /eofill ldf
    /@ /stroke ldf
    /nclp /npth_clp ldf
    /gset /graphic_setup ldf
    /gcln /graphic_cleanup ldf
    /AGMCORE_def_ht currenthalftone def
    /clonedict Adobe_AGM_Utils begin /clonedict load end def
    /clonearray Adobe_AGM_Utils begin /clonearray load end def
    currentdict{
        dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
            bind
        }if
        def
    }forall
    /getrampcolor
    { 
        /indx exch def
        0 1 NumComp 1 sub
        {
            dup
            Samples exch get
            dup type /stringtype eq {indx get} if
            exch
            Scaling exch get aload pop
            3 1 roll
            mul add
        } for
        ColorSpaceFamily /Separation eq 
        {sep}
        {
            ColorSpaceFamily /DeviceN eq
            {devn} {setcolor}ifelse
        }ifelse
    } bdf
    /sssetbackground {aload pop setcolor} bdf
    /RadialShade
    {
        40 dict begin
        /ColorSpaceFamily xdf
        /background xdf
        /ext1 xdf
        /ext0 xdf
        /BBox xdf
        /r2 xdf
        /c2y xdf
        /c2x xdf
        /r1 xdf
        /c1y xdf
        /c1x xdf
        /rampdict xdf
        /setinkoverprint where {pop /setinkoverprint{pop}def}if
        gsave
        BBox length 0 gt
        {
            newpath
            BBox 0 get BBox 1 get moveto
            BBox 2 get BBox 0 get sub 0 rlineto
            0 BBox 3 get BBox 1 get sub rlineto
            BBox 2 get BBox 0 get sub neg 0 rlineto
            closepath
            clip
            newpath
        } if
        c1x c2x eq
        {
            c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
        }
        {
            /slope c2y c1y sub c2x c1x sub div def
            /theta slope 1 atan def
            c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
            c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
        } ifelse
        gsave
        clippath
        c1x c1y translate
        theta rotate
        -90 rotate
        { pathbbox } stopped
        { 0 0 0 0 } if
        /yMax xdf
        /xMax xdf
        /yMin xdf
        /xMin xdf
        grestore
        xMax xMin eq yMax yMin eq or
        {
            grestore
            end
        }
        {
            /max { 2 copy gt { pop } {exch pop} ifelse } bdf
            /min { 2 copy lt { pop } {exch pop} ifelse } bdf
            rampdict begin
            40 dict begin
            background length 0 gt { background sssetbackground gsave clippath fill grestore } if
            gsave
            c1x c1y translate
            theta rotate
            -90 rotate
            /c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
            /c1y 0 def
            /c1x 0 def
            /c2x 0 def
            ext0
            {
                0 getrampcolor
                c2y r2 add r1 sub 0.0001 lt
                {
                    c1x c1y r1 360 0 arcn
                    pathbbox
                    /aymax exch def
                    /axmax exch def
                    /aymin exch def
                    /axmin exch def
                    /bxMin xMin axmin min def
                    /byMin yMin aymin min def
                    /bxMax xMax axmax max def
                    /byMax yMax aymax max def
                    bxMin byMin moveto
                    bxMax byMin lineto
                    bxMax byMax lineto
                    bxMin byMax lineto
                    bxMin byMin lineto
                    eofill
                }
                {
                    c2y r1 add r2 le
                    {
                        c1x c1y r1 0 360 arc
                        fill
                    }
                    {
                        c2x c2y r2 0 360 arc fill
                        r1 r2 eq
                        {
                            /p1x r1 neg def
                            /p1y c1y def
                            /p2x r1 def
                            /p2y c1y def
                            p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
                            fill
                        }
                        {
                            /AA r2 r1 sub c2y div def
                            AA -1 eq
                            { /theta 89.99 def}
                            { /theta AA 1 AA dup mul sub sqrt div 1 atan def}
                            ifelse
                            /SS1 90 theta add dup sin exch cos div def
                            /p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
                            /p1y p1x SS1 div neg def
                            /SS2 90 theta sub dup sin exch cos div def
                            /p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
                            /p2y p2x SS2 div neg def
                            r1 r2 gt
                            {
                                /L1maxX p1x yMin p1y sub SS1 div add def
                                /L2maxX p2x yMin p2y sub SS2 div add def
                            }
                            {
                                /L1maxX 0 def
                                /L2maxX 0 def
                            } ifelse
                            p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
                            L1maxX L1maxX p1x sub SS1 mul p1y add lineto
                            fill
                        } ifelse
                    } ifelse
                } ifelse
            } if
        c1x c2x sub dup mul
        c1y c2y sub dup mul
        add 0.5 exp
        0 dtransform
        dup mul exch dup mul add 0.5 exp 72 div
        0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
        72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
        1 index 1 index lt { exch } if pop
        /hires xdf
        hires mul
        /numpix xdf
        /numsteps NumSamples def
        /rampIndxInc 1 def
        /subsampling false def
        numpix 0 ne
        {
            NumSamples numpix div 0.5 gt
            {
                /numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
                /rampIndxInc NumSamples 1 sub numsteps div def
                /subsampling true def
            } if
        } if
        /xInc c2x c1x sub numsteps div def
        /yInc c2y c1y sub numsteps div def
        /rInc r2 r1 sub numsteps div def
        /cx c1x def
        /cy c1y def
        /radius r1 def
        newpath
        xInc 0 eq yInc 0 eq rInc 0 eq and and
        {
            0 getrampcolor
            cx cy radius 0 360 arc
            stroke
            NumSamples 1 sub getrampcolor
            cx cy radius 72 hires div add 0 360 arc
            0 setlinewidth
            stroke
        }
        {
            0
            numsteps
            {
                dup
                subsampling { round cvi } if
                getrampcolor
                cx cy radius 0 360 arc
                /cx cx xInc add def
                /cy cy yInc add def
                /radius radius rInc add def
                cx cy radius 360 0 arcn
                eofill
                rampIndxInc add
            } repeat
            pop
        } ifelse
        ext1
        {
            c2y r2 add r1 lt
            {
                c2x c2y r2 0 360 arc
                fill
            }
            {
                c2y r1 add r2 sub 0.0001 le
                {
                    c2x c2y r2 360 0 arcn
                    pathbbox
                    /aymax exch def
                    /axmax exch def
                    /aymin exch def
                    /axmin exch def
                    /bxMin xMin axmin min def
                    /byMin yMin aymin min def
                    /bxMax xMax axmax max def
                    /byMax yMax aymax max def
                    bxMin byMin moveto
                    bxMax byMin lineto
                    bxMax byMax lineto
                    bxMin byMax lineto
                    bxMin byMin lineto
                    eofill
                }
                {
                    c2x c2y r2 0 360 arc fill
                    r1 r2 eq
                    {
                        /p1x r2 neg def
                        /p1y c2y def
                        /p2x r2 def
                        /p2y c2y def
                        p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
                        fill
                    }
                    {
                        /AA r2 r1 sub c2y div def
                        AA -1 eq
                        { /theta 89.99 def}
                        { /theta AA 1 AA dup mul sub sqrt div 1 atan def}
                        ifelse
                        /SS1 90 theta add dup sin exch cos div def
                        /p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
                        /p1y c2y p1x SS1 div sub def
                        /SS2 90 theta sub dup sin exch cos div def
                        /p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
                        /p2y c2y p2x SS2 div sub def
                        r1 r2 lt
                        {
                            /L1maxX p1x yMax p1y sub SS1 div add def
                            /L2maxX p2x yMax p2y sub SS2 div add def
                        }
                        {
                            /L1maxX 0 def
                            /L2maxX 0 def
                        }ifelse
                        p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
                        L1maxX L1maxX p1x sub SS1 mul p1y add lineto
                        fill
                    } ifelse
                } ifelse
            } ifelse
        } if
        grestore
        grestore
        end
        end
        end
        } ifelse
    } bdf
    /GenStrips
    {
        40 dict begin
        /ColorSpaceFamily xdf
        /background xdf
        /ext1 xdf
        /ext0 xdf
        /BBox xdf
        /y2 xdf
        /x2 xdf
        /y1 xdf
        /x1 xdf
        /rampdict xdf
        /setinkoverprint where {pop /setinkoverprint{pop}def}if
        gsave
        BBox length 0 gt
        {
            newpath
            BBox 0 get BBox 1 get moveto
            BBox 2 get BBox 0 get sub 0 rlineto
            0 BBox 3 get BBox 1 get sub rlineto
            BBox 2 get BBox 0 get sub neg 0 rlineto
            closepath
            clip
            newpath
        } if
        x1 x2 eq
        {
            y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
        }
        {
            /slope y2 y1 sub x2 x1 sub div def
            /theta slope 1 atan def
            x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
            x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
        }
        ifelse
        gsave
        clippath
        x1 y1 translate
        theta rotate
        { pathbbox } stopped
        { 0 0 0 0 } if
        /yMax exch def
        /xMax exch def
        /yMin exch def
        /xMin exch def
        grestore
        xMax xMin eq yMax yMin eq or
        {
            grestore
            end
        }
        {
            rampdict begin
            20 dict begin
            background length 0 gt { background sssetbackground gsave clippath fill grestore } if
            gsave
            x1 y1 translate
            theta rotate
            /xStart 0 def
            /xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
            /ySpan yMax yMin sub def
            /numsteps NumSamples def
            /rampIndxInc 1 def
            /subsampling false def
            xStart 0 transform
            xEnd 0 transform
            3 -1 roll
            sub dup mul
            3 1 roll
            sub dup mul
            add 0.5 exp 72 div
            0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
            72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
            1 index 1 index lt { exch } if pop
            mul
            /numpix xdf
            numpix 0 ne
            {
                NumSamples numpix div 0.5 gt
                {
                    /numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
                    /rampIndxInc NumSamples 1 sub numsteps div def
                    /subsampling true def
                } if
            } if
            ext0
            {
                0 getrampcolor
                xMin xStart lt
                {
                    xMin yMin xMin neg ySpan rectfill
                } if
            } if
            /xInc xEnd xStart sub numsteps div def
            /x xStart def
            0
            numsteps
            {
                dup
                subsampling { round cvi } if
                getrampcolor
                x yMin xInc ySpan rectfill
                /x x xInc add def
                rampIndxInc add
            } repeat
            pop
            ext1 {
                xMax xEnd gt
                {
                    xEnd yMin xMax xEnd sub ySpan rectfill
                } if
            } if
            grestore
            grestore
            end
            end
            end
        } ifelse
    } bdf
}def
/page_trailer
{
    end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
    //Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
    /findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
    /setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
    gsave
    setcmykcolor currentgray 1 ne
    grestore
}def
/inRip_spot_has_ink
{
    dup //Adobe_AGM_Core/AGMCORE_name xddf
    convert_spot_to_process not
}def
/map255_to_range
{
    1 index sub
    3 -1 roll 255 div mul add
}def
/set_csa_crd
{
    /sep_colorspace_dict null AGMCORE_gput
    begin
        CSA get_csa_by_name setcolorspace_opt
        set_crd
    end
}
def
/map_csa
{
    currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
    {pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
    /sep_colorspace_dict AGMCORE_gget begin
        dup /sep_tint exch AGMCORE_gput
        TintProc
    end
} def
/setdevicencolor
{ 
    /devicen_colorspace_dict AGMCORE_gget begin
        Names length copy
        Names length 1 sub -1 0
        {
            /devicen_tints AGMCORE_gget 3 1 roll xpt
        } for
        TintProc
    end
} def
/sep_colorspace_proc
{
    /AGMCORE_tmp exch store
    /sep_colorspace_dict AGMCORE_gget begin
    currentdict/Components known{
        Components aload pop 
        TintMethod/Lab eq{
            2 {AGMCORE_tmp mul NComponents 1 roll} repeat
            LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
        }{
            TintMethod/Subtractive eq{
                NComponents{
                    AGMCORE_tmp mul NComponents 1 roll
                }repeat
            }{
                NComponents{
                    1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
                } repeat
            }ifelse
        }ifelse
    }{
        ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
        aload pop
    }ifelse
    end
} def
/sep_colorspace_gray_proc
{
    /AGMCORE_tmp exch store
    /sep_colorspace_dict AGMCORE_gget begin
    GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
    end
} def
/sep_proc_name
{
    dup 0 get 
    dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
        pop [/DeviceGray]
        /sep_colorspace_gray_proc
    }{
        /sep_colorspace_proc
    }ifelse
} def
/setsepcolorspace
{ 
    current_spot_alias{
        dup begin
            Name map_alias{
                exch pop
            }if
        end
    }if
    dup /sep_colorspace_dict exch AGMCORE_gput
    begin
    CSA map_csa
    /AGMCORE_sep_special Name dup () eq exch (All) eq or store
    AGMCORE_avoid_L2_sep_space{
        [/Indexed MappedCSA sep_proc_name 255 exch 
            { 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
        ] setcolorspace_opt
        /TintProc {
            255 mul round cvi setcolor
        }bdf
    }{
        MappedCSA 0 get /DeviceCMYK eq 
        currentdict/Components known and 
        AGMCORE_sep_special not and{
            /TintProc [
                Components aload pop Name findcmykcustomcolor 
                /exch cvx /setcustomcolor cvx
            ] cvx bdf
        }{
            AGMCORE_host_sep Name (All) eq and{
                /TintProc { 
                    1 exch sub setseparationgray 
                }bdf
            }{
                AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
                AGMCORE_host_sep or
                Name () eq and{
                    /TintProc [
                        MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
                            cvx /setcmykcolor cvx
                        }{
                            cvx /setgray cvx
                        }ifelse
                    ] cvx bdf
                }{
                    AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
                        /TintProc [
                            /dup cvx
                            MappedCSA sep_proc_name cvx exch
                            0 get /DeviceGray eq{
                                1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
                            }if
                            /Name cvx /findcmykcustomcolor cvx /exch cvx
                            AGMCORE_host_sep{
                                AGMCORE_is_cmyk_sep
                                /Name cvx 
                                /AGMCORE_IsSeparationAProcessColor load /exec cvx
                                /not cvx /and cvx 
                            }{
                                Name inRip_spot_has_ink not
                            }ifelse
                            [
                                /pop cvx 1
                            ] cvx /if cvx
                            /setcustomcolor cvx
                        ] cvx bdf
                    }{ 
                        /TintProc {setcolor} bdf
                        [/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
    }ifelse
    set_crd
    setsepcolor
    end
} def
/additive_blend
{
    3 dict begin
    /numarrays xdf
    /numcolors xdf
    0 1 numcolors 1 sub
        {
        /c1 xdf
        1
        0 1 numarrays 1 sub
            {
            1 exch add /index cvx
            c1 /get cvx /mul cvx
            }for
        numarrays 1 add 1 /roll cvx 
        }for
    numarrays [/pop cvx] cvx /repeat cvx
    end
}def
/subtractive_blend
{
    3 dict begin
    /numarrays xdf
    /numcolors xdf
    0 1 numcolors 1 sub
        {
        /c1 xdf
        1 1
        0 1 numarrays 1 sub
            {
            1 3 3 -1 roll add /index cvx  
            c1 /get cvx /sub cvx /mul cvx
            }for
        /sub cvx
        numarrays 1 add 1 /roll cvx
        }for
    numarrays [/pop cvx] cvx /repeat cvx
    end
}def
/exec_tint_transform
{
    /TintProc [
        /TintTransform cvx /setcolor cvx
    ] cvx bdf
    MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
    2 dict begin
    /names_index xdf
    /Names xdf
    1 1 1 1 Names names_index get findcmykcustomcolor
    /devicen_tints AGMCORE_gget names_index get setcustomcolor
    Names length {pop} repeat
    end
} bdf
/setdevicencolorspace
{ 
    dup /AliasedColorants known {false}{true}ifelse 
    current_spot_alias and {
        7 dict begin
        /names_index 0 def
        dup /names_len exch /Names get length def
        /new_names names_len array def
        /new_LookupTables names_len array def
        /alias_cnt 0 def
        dup /Names get
        {
            dup map_alias {
                exch pop
                dup /ColorLookup known {
                    dup begin
                    new_LookupTables names_index ColorLookup put
                    end
                }{
                    dup /Components known {
                        dup begin
                        new_LookupTables names_index Components put
                        end
                    }{
                        dup begin
                        new_LookupTables names_index [null null null null] put
                        end
                    } ifelse
                } ifelse
                new_names names_index 3 -1 roll /Name get put
                /alias_cnt alias_cnt 1 add def 
            }{
                /name xdf               
                new_names names_index name put
                dup /LookupTables known {
                    dup begin
                    new_LookupTables names_index LookupTables names_index get put
                    end
                }{
                    dup begin
                    new_LookupTables names_index [null null null null] put
                    end
                } ifelse
            } ifelse
            /names_index names_index 1 add def 
        } forall
        alias_cnt 0 gt {
            /AliasedColorants true def
            /lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
            0 1 names_len 1 sub {
                /names_index xdf
                new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
                    /AliasedColorants false def
                    exit
                }
                {
                    new_LookupTables names_index get 0 get null eq {
                        dup /Names get names_index get /name xdf
                        name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
                        or or or not {
                            /AliasedColorants false def
                            exit
                        } if
                    } if
                } ifelse
            } for
            lut_entry_len 1 eq {
                /AliasedColorants false def
            } if
            AliasedColorants {
                dup begin
                /Names new_names def
                /LookupTables new_LookupTables def
                /AliasedColorants true def
                /NComponents lut_entry_len def
                /TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
                /MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
                currentdict /TTTablesIdx known not {
                    /TTTablesIdx -1 def
                } if
                end
            } if
        }if
        end
    } if
    dup /devicen_colorspace_dict exch AGMCORE_gput
    begin
    currentdict /AliasedColorants known {
        AliasedColorants
    }{
        false
    } ifelse
    dup not {
        CSA map_csa
    } if
    /TintTransform load type /nulltype eq or {
        /TintTransform [
            0 1 Names length 1 sub
                {
                /TTTablesIdx TTTablesIdx 1 add def
                dup LookupTables exch get dup 0 get null eq
                    {
                    1 index
                    Names exch get
                    dup (Cyan) eq
                        {
                        pop exch
                        LookupTables length exch sub
                        /index cvx
                        0 0 0
                        }
                        {
                        dup (Magenta) eq
                            {
                            pop exch
                            LookupTables length exch sub
                            /index cvx
                            0 /exch cvx 0 0
                            }
                            {
                            (Yellow) eq
                                {
                                exch
                                LookupTables length exch sub
                                /index cvx
                                0 0 3 -1 /roll cvx 0
                                }
                                {
                                exch
                                LookupTables length exch sub
                                /index cvx
                                0 0 0 4 -1 /roll cvx
                                } ifelse
                            } ifelse
                        } ifelse
                    5 -1 /roll cvx /astore cvx
                    }
                    {
                    dup length 1 sub
                    LookupTables length 4 -1 roll sub 1 add
                    /index cvx /mul cvx /round cvx /cvi cvx /get cvx
                    } ifelse
                    Names length TTTablesIdx add 1 add 1 /roll cvx
                } for
            Names length [/pop cvx] cvx /repeat cvx
            NComponents Names length
            TintMethod /Subtractive eq
                {
                subtractive_blend
                }
                {
                additive_blend
                } ifelse
        ] cvx bdf
    } if
    AGMCORE_host_sep {
        Names convert_to_process {
            exec_tint_transform
        }
        {   
            currentdict /AliasedColorants known {
                AliasedColorants not
            }{
                false
            } ifelse
            5 dict begin
            /AvoidAliasedColorants xdf
            /painted? false def
            /names_index 0 def
            /names_len Names length def
            AvoidAliasedColorants {
                /currentspotalias current_spot_alias def
                false set_spot_alias
            } if
            Names {
                AGMCORE_is_cmyk_sep {
                    dup (Cyan) eq AGMCORE_cyan_plate and exch
                    dup (Magenta) eq AGMCORE_magenta_plate and exch
                    dup (Yellow) eq AGMCORE_yellow_plate and exch
                    (Black) eq AGMCORE_black_plate and or or or {
                        /devicen_colorspace_dict AGMCORE_gget /TintProc [
                            Names names_index /devn_makecustomcolor cvx
                        ] cvx ddf
                        /painted? true def
                    } if
                    painted? {exit} if
                }{
                    0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
                    /devicen_colorspace_dict AGMCORE_gget /TintProc [
                        Names names_index /devn_makecustomcolor cvx
                    ] cvx ddf
                    /painted? true def
                    exit
                    } if
                } ifelse
                /names_index names_index 1 add def
            } forall
            AvoidAliasedColorants {
                currentspotalias set_spot_alias
            } if
            painted? {
                /devicen_colorspace_dict AGMCORE_gget /names_index names_index put
            }{
                /devicen_colorspace_dict AGMCORE_gget /TintProc [
                    names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
                    0 0 0 0 /setcmykcolor cvx
                ] cvx ddf
            } ifelse
            end
        } ifelse
    }
    {
        AGMCORE_in_rip_sep {
            Names convert_to_process not
        }{
            level3
        } ifelse
        {
            [/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
            /TintProc level3 not AGMCORE_in_rip_sep and {
                [
                    Names /length cvx [/pop cvx] cvx /repeat cvx
                ] cvx bdf
            }{
                {setcolor} bdf
            } ifelse
        }{
            exec_tint_transform
        } ifelse
    } ifelse
    set_crd
    /AliasedColorants false def
    end
} def
/setindexedcolorspace
{
    dup /indexed_colorspace_dict exch AGMCORE_gput
    begin
        currentdict /CSDBase known {
            CSDBase /CSD get_res begin
            currentdict /Names known {
                currentdict devncs
            }{
                1 currentdict sepcs
            } ifelse
            AGMCORE_host_sep{
                4 dict begin
                /compCnt /Names where {pop Names length}{1}ifelse def
                /NewLookup HiVal 1 add string def
                0 1 HiVal {
                    /tableIndex xdf
                    Lookup dup type /stringtype eq {
                        compCnt tableIndex map_index
                    }{
                        exec
                    } ifelse
                    /Names where {
                        pop setdevicencolor
                    }{
                        setsepcolor
                    } ifelse
                    currentgray
                    tableIndex exch
                    HiVal mul cvi 
                    NewLookup 3 1 roll put
                } for
                [/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
                end
            }{
                level3
                {
                    currentdict /Names known {
                        [/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
                    }{
                        [/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
                    } ifelse
                }{
                [/Indexed MappedCSA HiVal
                    [
                    currentdict /Names known {
                        Lookup dup type /stringtype eq
                            {/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
                            {/exec cvx}ifelse
                            /TintTransform load /exec cvx
                    }{
                        Lookup dup type /stringtype eq
                            {/exch cvx /get cvx 255 /div cvx}
                            {/exec cvx}ifelse
                            CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
                    } ifelse
                    ]cvx
                ]setcolorspace_opt
                }ifelse
            } ifelse
            end
            set_crd
        }
        {
            CSA map_csa
            AGMCORE_host_sep level2 not and{
                0 0 0 0 setcmykcolor
            }{
                [/Indexed MappedCSA 
                level2 not has_color not and{
                    dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
                        pop [/DeviceGray]
                    }if
                    HiVal GrayLookup
                }{
                    HiVal 
                    currentdict/RangeArray known{
                        { 
                            /indexed_colorspace_dict AGMCORE_gget begin
                            Lookup exch 
                            dup HiVal gt{
                                pop HiVal
                            }if
                            NComponents mul NComponents getinterval {} forall
                            NComponents 1 sub -1 0{
                                RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
                                NComponents 1 roll
                            }for
                            end
                        } bind
                    }{
                        Lookup
                    }ifelse
                }ifelse
                ] setcolorspace_opt
                set_crd
            }ifelse
        }ifelse
    end
}def
/setindexedcolor
{
    AGMCORE_host_sep {
        /indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
            begin
            CSDBase /CSD get_res begin
            currentdict /Names known{
                map_indexed_devn
                devn
            }
            {
                Lookup 1 3 -1 roll map_index
                sep
            }ifelse
            end
            end
        }{
            /Lookup get 4 3 -1 roll map_index setcmykcolor
        } ifelse
    }{
        level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
            /indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
            map_indexed_devn
            devn
            end
        }
        {
            setcolor
        } ifelse
    }ifelse
} def
/ignoreimagedata
{
    currentoverprint not{
        gsave
        dup clonedict begin
        1 setgray
        /Decode [0 1] def
        /DataSource <FF> def
        /MultipleDataSources false def
        /BitsPerComponent 8 def
        currentdict end
        systemdict /image get exec
        grestore
        }if
    consumeimagedata
}def
/add_res
{
    dup /CSD eq {
        pop 
        //Adobe_AGM_Core begin
        /AGMCORE_CSD_cache load 3 1 roll put
        end
    }{
        defineresource pop
    } ifelse
}def
/del_res
{
    {
        aload pop exch
        dup /CSD eq {
            pop 
            {
                //Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
            }forall
        }{
            exch
            {
                1 index undefineresource
            }forall
            pop
        } ifelse
    } forall
}def
/get_res
{
    dup /CSD eq {
        pop
        dup type dup /nametype eq exch /stringtype eq or {
            AGMCORE_CSD_cache exch get
        } if
    }{
        findresource
    } ifelse
}def
/get_csa_by_name
{
    dup type dup /nametype eq exch /stringtype eq or{
        /CSA get_res
    } if
}def
/pattern_buf_init
{
    /count get 0 0 put
} def
/pattern_buf_next
{
    dup /count get dup 0 get
    dup 3 1 roll
    1 add 0 xpt
    get             
} def
/cachepattern_compress
{
    5 dict begin
    currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
    /patarray 20 dict def
    /string_size 16000 def
    /readbuffer string_size string def
    currentglobal true setglobal 
    patarray 1 array dup 0 1 put /count xpt
    setglobal
    /LZWFilter 
    {
        exch
        dup length 0 eq {
            pop
        }{
            patarray dup length 1 sub 3 -1 roll put
        } ifelse
        {string_size}{0}ifelse string
    } /LZWEncode filter def
    {       
        ReadFilter readbuffer readstring
        exch LZWFilter exch writestring
        not {exit} if
    } loop
    LZWFilter closefile
    patarray                
    end
}def
/cachepattern
{
    2 dict begin
    currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
    /patarray 20 dict def
    currentglobal true setglobal 
    patarray 1 array dup 0 1 put /count xpt
    setglobal
    {
        ReadFilter 16000 string readstring exch
        patarray dup length 1 sub 3 -1 roll put
        not {exit} if
    } loop
    patarray dup dup length 1 sub () put                    
    end 
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
    clonedict
    begin
    /OldPaintProc /PaintProc load def
    /PaintProc
    {
        mark exch
        dup /OldPaintProc get stopped
        {closefile restore end} if
        cleartomark
    }  def
    end
  } {pop} ifelse
} def
/make_pattern
{
    exch clonedict exch
    dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
    exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
    exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
    matrix translate exch matrix concatmatrix
              1 index begin
        BBox 0 get XStep div cvi XStep mul /xshift exch neg def
        BBox 1 get YStep div cvi YStep mul /yshift exch neg def
        BBox 0 get xshift add
        BBox 1 get yshift add
        BBox 2 get xshift add
        BBox 3 get yshift add
        4 array astore
        /BBox exch def
        [ xshift yshift /translate load null /exec load ] dup
        3 /PaintProc load put cvx /PaintProc exch def
        end
    1 index dup /ID get exch /Pattern add_res
    gsave 0 setgray
    makepattern
    grestore
}def
/set_pattern
{
    dup /PatternType get 1 eq{
        dup /PaintType get 1 eq{
            currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
        }if
    }if
    setpattern
}def
/setcolorspace_opt
{
    dup currentcolorspace eq{
        pop
    }{
        setcolorspace
    }ifelse
}def
/updatecolorrendering
{
    currentcolorrendering/RenderingIntent known{
        currentcolorrendering/RenderingIntent get
    }{null}ifelse
    Intent ne {
        Intent /ColorRendering {findresource} stopped
        {
            pop pop systemdict /findcolorrendering known
            {
                Intent findcolorrendering pop
                /ColorRendering findresource 
                true
            }
            {false} ifelse
        }
        {true} ifelse
        {
            dup begin
            currentdict /TransformPQR known {
                currentdict /TransformPQR get aload pop
                3 {{} eq 3 1 roll} repeat or or
            }
            {true} ifelse
            currentdict /MatrixPQR known {
                currentdict /MatrixPQR get aload pop
                1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
                0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
                0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
                and and and and and and and and
            }
            {true} ifelse
            end
            or
            {
                clonedict begin
                /TransformPQR [
                    {4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
                    3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
                    {4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
                    3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
                    {4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
                    3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
                ] def
                /MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
                /RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
                currentdict end
            } if
            setcolorrendering_opt
        } if        
    }if
} def
/set_crd
{
    AGMCORE_host_sep not level2 and{
        currentdict /ColorRendering known{
            ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
        }{
            currentdict/Intent known{
                updatecolorrendering
            }if
        }ifelse
        currentcolorspace dup type /arraytype eq
            {0 get}if
        /DeviceRGB eq
            {
            currentdict/UCR known
                {/UCR}{/AGMCORE_currentucr}ifelse
            load setundercolorremoval
            currentdict/BG known 
                {/BG}{/AGMCORE_currentbg}ifelse
            load setblackgeneration
            }if
    }if
}def
/setcolorrendering_opt
{
    dup currentcolorrendering eq{
        pop
    }{
        clonedict
        begin
            /Intent Intent def
            currentdict
        end
        setcolorrendering
    }ifelse
}def
/cpaint_gcomp
{
    convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
    //Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
    {
        (%end_cpaint_gcomp) flushinput
    }if
}def
/cpaint_gsep
{
    //Adobe_AGM_Core/AGMCORE_ConvertToProcess get
    {   
        (%end_cpaint_gsep) flushinput
    }if
}def
/cpaint_gend
{
    newpath
}def
/set_spot_alias_ary
{
    dup inherit_aliases
    //Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
    dup inherit_aliases
    dup length
    /AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
    array
    //Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
    /AGMCORE_SpotAliasAry where{
        pop
        AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
        AGMCORE_SpotAliasAry length
    }{0} ifelse
    AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
    true set_spot_alias
}def
/inherit_aliases
{
    {dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
    /AGMCORE_SpotAliasAry2 where{
        /AGMCORE_current_spot_alias 3 -1 roll put
    }{
        pop
    }ifelse
}def
/current_spot_alias
{
    /AGMCORE_SpotAliasAry2 where{
        /AGMCORE_current_spot_alias get
    }{
        false
    }ifelse
}def
/map_alias
{
    /AGMCORE_SpotAliasAry2 where{
        begin
            /AGMCORE_name xdf
            false   
            AGMCORE_SpotAliasAry2{
                dup/Name get AGMCORE_name eq{
                    /CSD get /CSD get_res
                    exch pop true
                    exit
                }{
                    pop
                }ifelse
            }forall
        end
    }{
        pop false
    }ifelse
}bdf
/spot_alias
{
    true set_spot_alias
    /AGMCORE_&setcustomcolor AGMCORE_key_known not {
        //Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
    } if
    /customcolor_tint 1 AGMCORE_gput
    //Adobe_AGM_Core begin
    /setcustomcolor
    {
        currentdict/TintProc known currentdict/CSA known and 3 1 roll
        //Adobe_AGM_Core begin
        dup /customcolor_tint exch AGMCORE_gput
        1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
        current_spot_alias and{1 index 4 get map_alias}{false}ifelse
        {
            false set_spot_alias
            4 -1 roll{
                exch pop /sep_tint AGMCORE_gget exch
            }if
            mark 3 1 roll
            setsepcolorspace
            counttomark 0 ne{
                setsepcolor
            }if
            pop
            pop
            true set_spot_alias
        }{
            AGMCORE_&setcustomcolor
            pop
        }ifelse
        end
    }bdf
    end
}def
/begin_feature
{
    Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
    count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
    {Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
    2 dict begin
    /spd /setpagedevice load def
    /setpagedevice { get_gstate spd set_gstate } def
    stopped{$error/newerror false put}if
    end
    count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
    countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
    {Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
    //Adobe_AGM_Core begin
    /AGMCORE_inverting exch def
    level2{
        currentpagedevice/NegativePrint known{
            currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
                true begin_feature true{
                        << /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
                }end_feature
            }if
            /AGMCORE_inverting false def
        }if
    }if
    AGMCORE_inverting{
        [{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
        gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
        /AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
    }if
    end
}def
/lw_save_restore_override {
    /md where {
        pop
        md begin
        initializepage
        /initializepage{}def
        /pmSVsetup{} def
        /endp{}def
        /pse{}def
        /psb{}def
        /orig_showpage where
            {pop}
            {/orig_showpage /showpage load def}
        ifelse
        /showpage {orig_showpage gR} def
        end
    }if
}def
/pscript_showpage_override {
    /NTPSOct95 where
    {
        begin
        showpage
        save
        /showpage /restore load def
        /restore {exch pop}def
        end
    }if
}def
/driver_media_override
{
    /md where {
        pop
        md /initializepage known {
            md /initializepage {} put
        } if
        md /rC known {
            md /rC {4{pop}repeat} put
        } if
    }if
    /mysetup where {
        /mysetup [1 0 0 1 0 0] put
    }if
    Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
    level2
        {Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
    /PrepsDict where
        {pop}
        {
        Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
        Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
            {
            Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
            Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
            }if
            {
            Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
            }if
        }ifelse
}def
AGMCORE_err_strings begin
    /AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
    /AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
    /AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
    AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
    setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
    { /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
    systemdict /languagelevel known dup
        { pop systemdict /languagelevel get 2 ge }
    if def
Level2? not
    {
    /currentglobal false def
    /setglobal /pop load def
    /gcheck { pop false } bind def
    /currentpacking false def
    /setpacking /pop load def
    /SharedFontDirectory 0 dict def
    }
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
     { 2 copy 10 dict put }
if
get
     begin
     /@opStackCountByLevel 32 dict def
     /@opStackLevel 0 def
     /@dictStackCountByLevel 32 dict def
     /@dictStackLevel 0 def
     end
setglobal
/@_SaveStackLevels
    {
    Adobe_CoolType_Data
        begin
        /@vmState currentglobal def false setglobal
        @opStackCountByLevel
        @opStackLevel
        2 copy known not
            {
            2 copy
            3 dict dup /args
            7 index
            5 add array put
            put get
            }
            {
            get dup /args get dup length 3 index lt
                {
                dup length 5 add array exch
                1 index exch 0 exch putinterval
                1 index exch /args exch put
                }
                { pop }
            ifelse
            }
        ifelse
            begin
            count 1 sub
            1 index lt
                { pop count }
            if
            dup /argCount exch def
            dup 0 gt
                {
                args exch 0 exch getinterval 
            astore pop
                }
                { pop }
            ifelse
            count
            /restCount exch def
            end
        /@opStackLevel @opStackLevel 1 add def
        countdictstack 1 sub
        @dictStackCountByLevel exch @dictStackLevel exch put
        /@dictStackLevel @dictStackLevel 1 add def
        @vmState setglobal
        end
    } bind def
/@_RestoreStackLevels
    {
    Adobe_CoolType_Data
        begin
        /@opStackLevel @opStackLevel 1 sub def
        @opStackCountByLevel @opStackLevel get
            begin
            count restCount sub dup 0 gt
                { { pop } repeat }
                { pop }
            ifelse
            args 0 argCount getinterval {} forall
            end
        /@dictStackLevel @dictStackLevel 1 sub def
        @dictStackCountByLevel @dictStackLevel get
        end
    countdictstack exch sub dup 0 gt
        { { end } repeat }
        { pop }
    ifelse
    } bind def
/@_PopStackLevels
    {
    Adobe_CoolType_Data
        begin
        /@opStackLevel @opStackLevel 1 sub def
        /@dictStackLevel @dictStackLevel 1 sub def
        end
    } bind def
/@Raise
    {
    exch cvx exch errordict exch get exec
    stop
    } bind def
/@ReRaise
    {
    cvx $error /errorname get errordict exch get exec
    stop
    } bind def
/@Stopped
    {
    0 @#Stopped
    } bind def
/@#Stopped
    {
    @_SaveStackLevels
    stopped
        { @_RestoreStackLevels true }
        { @_PopStackLevels false }
    ifelse
    } bind def
/@Arg
    {
    Adobe_CoolType_Data
        begin
        @opStackCountByLevel @opStackLevel 1 sub get
        begin
        args exch
        argCount 1 sub exch sub get
        end
        end
    } bind def
currentglobal true setglobal
/CTHasResourceForAllBug
    Level2?
        {
        1 dict dup
                /@shouldNotDisappearDictValue true def
                Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
                begin
                count @_SaveStackLevels
                     { (*) { pop stop } 128 string /Category resourceforall }
                stopped pop
                @_RestoreStackLevels
                currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
                     {
                          /@shouldNotDisappearDictValue known
                                {
                                          {
                                                end
                                                currentdict 1 index eq
                                                     { pop exit }
                                                if
                                          }
                                     loop
                                }
                          if
                     }
                if
                end
        }
        { false }
    ifelse
    def
true setglobal
/CTHasResourceStatusBug
    Level2?
        {
        mark
            { /steveamerige /Category resourcestatus }
        stopped
            { cleartomark true }
            { cleartomark currentglobal not }
        ifelse
        }
        { false }
    ifelse
    def
setglobal
/CTResourceStatus
        {
        mark 3 1 roll
        /Category findresource
            begin
            ({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
                { cleartomark false }
                { { 3 2 roll pop true } { cleartomark false } ifelse }
            ifelse
            end
        } bind def
/CTWorkAroundBugs
    {
    Level2?
        {
        /cid_PreLoad /ProcSet resourcestatus
            {
            pop pop
            currentglobal
            mark
                {
                (*)
                    {
                    dup /CMap CTHasResourceStatusBug
                        { CTResourceStatus }
                        { resourcestatus }
                    ifelse
                        {
                        pop dup 0 eq exch 1 eq or
                            {
                            dup /CMap findresource gcheck setglobal
                            /CMap undefineresource
                            }
                            {
                            pop CTHasResourceForAllBug
                                { exit }
                                { stop }
                            ifelse
                            }
                        ifelse
                        }
                        { pop }
                    ifelse
                    }
                128 string /CMap resourceforall
                }
            stopped
                { cleartomark }
            stopped pop
            setglobal
            }
        if
        }
    if
    } bind def
/doc_setup
    {
    Adobe_CoolType_Core
        begin
        CTWorkAroundBugs
        /mov /moveto load def
        /nfnt /newencodedfont load def
        /mfnt /makefont load def
        /sfnt /setfont load def
        /ufnt /undefinefont load def
        /chp /charpath load def
        /awsh /awidthshow load def
        /wsh /widthshow load def
        /ash /ashow load def
        /sh /show load def
        end
        currentglobal false setglobal
      userdict /Adobe_CoolType_Data 2 copy known not
          { 2 copy 10 dict put }
        if
        get
        begin
        /AddWidths? false def
        /CC 0 def
        /charcode 2 string def
        /@opStackCountByLevel 32 dict def
        /@opStackLevel 0 def
        /@dictStackCountByLevel 32 dict def
        /@dictStackLevel 0 def
        /InVMFontsByCMap 10 dict def
        /InVMDeepCopiedFonts 10 dict def
        end
        setglobal
    } bind def
/doc_trailer
    {
    currentdict Adobe_CoolType_Core eq
        { end }
    if
    } bind def
/page_setup
    {
    Adobe_CoolType_Core begin
    } bind def
/page_trailer
    {
    end
    } bind def
/unload
    {
    systemdict /languagelevel known
        {
        systemdict/languagelevel get 2 ge
            {
            userdict/Adobe_CoolType_Core 2 copy known
                { undef }
                { pop pop }
            ifelse
            }
        if
        }
    if
    } bind def
/ndf
    {
    1 index where
        { pop pop pop }
        { dup xcheck { bind } if def }
    ifelse
    } def
/findfont systemdict
    begin
    userdict
        begin
        /globaldict where { /globaldict get begin } if
            dup where pop exch get
        /globaldict where { pop end } if
        end
    end
Adobe_CoolType_Core_Defined
    { /systemfindfont exch def }
    {
    /findfont 1 index def
    /systemfindfont exch def
    }
ifelse
/undefinefont
    { pop } ndf
/copyfont
    {
    currentglobal 3 1 roll
    1 index gcheck setglobal
    dup null eq { 0 } { dup length } ifelse
    2 index length add 1 add dict
        begin
        exch
            {
            1 index /FID eq
                { pop pop }
                { def }
            ifelse
            }
        forall
        dup null eq
            { pop }
            { { def } forall }
        ifelse
        currentdict
        end
    exch setglobal
    } bind def
/copyarray
    {
    currentglobal exch
    dup gcheck setglobal
    dup length array copy
    exch setglobal
    } bind def
/newencodedfont
    {
    currentglobal
        {
        SharedFontDirectory 3 index  known
            { SharedFontDirectory 3 index get /FontReferenced known }
            { false }
        ifelse
        }
        {
        FontDirectory 3 index known
            { FontDirectory 3 index get /FontReferenced known }
            {
            SharedFontDirectory 3 index known
                { SharedFontDirectory 3 index get /FontReferenced known }
                { false }
            ifelse
            }
        ifelse
        }
    ifelse
    dup
        {
        3 index findfont /FontReferenced get
        2 index dup type /nametype eq
            {findfont}
        if ne
            { pop false }
        if
        }
    if
        {
        pop
        1 index findfont
        /Encoding get exch
        0 1 255
            { 2 copy get 3 index 3 1 roll put }
        for
        pop pop pop
        }
        {
        dup type /nametype eq
          { findfont }
      if
        dup dup maxlength 2 add dict
            begin
            exch
                {
                1 index /FID ne
                    {def}
                    {pop pop}
                ifelse
                }
            forall
            /FontReferenced exch def
            /Encoding exch dup length array copy def
            /FontName 1 index dup type /stringtype eq { cvn } if def dup
            currentdict
            end
        definefont def
        }
    ifelse
    } bind def
/SetSubstituteStrategy
    {
    $SubstituteFont
        begin
        dup type /dicttype ne
            { 0 dict }
        if
        currentdict /$Strategies known
            {
            exch $Strategies exch 
            2 copy known
                {
                get
                2 copy maxlength exch maxlength add dict
                    begin
                    { def } forall
                    { def } forall
                    currentdict
                    dup /$Init known
                        { dup /$Init get exec }
                    if
                    end
                /$Strategy exch def
                }
                { pop pop pop }
            ifelse
            }
            { pop pop }
        ifelse
        end
    } bind def
/scff
    {
    $SubstituteFont
        begin
        dup type /stringtype eq
            { dup length exch }
            { null }
        ifelse
        /$sname exch def
        /$slen exch def
        /$inVMIndex
            $sname null eq
                {
                1 index $str cvs
                dup length $slen sub $slen getinterval cvn
                }
                { $sname }
            ifelse def
        end
        { findfont }
    @Stopped
        {
        dup length 8 add string exch
        1 index 0 (BadFont:) putinterval
        1 index exch 8 exch dup length string cvs putinterval cvn
            { findfont }
        @Stopped
            { pop /Courier findfont }
        if
        }
    if
    $SubstituteFont
        begin
        /$sname null def
        /$slen 0 def
        /$inVMIndex null def
        end
    } bind def
/isWidthsOnlyFont
    {
    dup /WidthsOnly known
        { pop pop true }
        {
        dup /FDepVector known
            { /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
            {
            dup /FDArray known
                { /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
                { pop }
            ifelse
            }
        ifelse
        }
    ifelse
    } bind def
/?str1 256 string def
/?set
    {
    $SubstituteFont
        begin
        /$substituteFound false def
        /$fontname 4 index def
        /$doSmartSub false def
        end
    3 index
    currentglobal false setglobal exch
    /CompatibleFonts /ProcSet resourcestatus
        {
        pop pop
        /CompatibleFonts /ProcSet findresource
            begin
            dup /CompatibleFont currentexception
            1 index /CompatibleFont true setexception
            1 index /Font resourcestatus
                {
                pop pop
                3 2 roll setglobal
                end
                exch
                dup findfont
                /CompatibleFonts /ProcSet findresource
                    begin
                    3 1 roll exch /CompatibleFont exch setexception
                    end
                }
                {
                3 2 roll setglobal
                1 index exch /CompatibleFont exch setexception
                end
                findfont
                $SubstituteFont /$substituteFound true put
                }
            ifelse
        }
        { exch setglobal findfont }
    ifelse
    $SubstituteFont
        begin
        $substituteFound
            {
         false
         (%%[Using embedded font ) print
         5 index ?str1 cvs print
         ( to avoid the font substitution problem noted earlier.]%%\n) print
         }
            {
            dup /FontName known
                {
                dup /FontName get $fontname eq
                1 index /DistillerFauxFont known not and
                /currentdistillerparams where
                    { pop false 2 index isWidthsOnlyFont not and }
                if
                }
                { false }
            ifelse
            }
        ifelse
        exch pop
        /$doSmartSub true def
        end
        {
        exch pop exch pop exch
        2 dict dup /Found 3 index put
        exch findfont exch
        }
        {
        exch exec
        exch dup findfont
        dup /FontType get 3 eq
      {
          exch ?str1 cvs
          dup length 1 sub
          -1 0
        {
              exch dup 2 index get 42 eq
            {
                 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
                 exit
              }
              {exch pop} ifelse
          }for
        }
        {
         exch pop
      } ifelse
        2 dict dup /Downloaded 6 5 roll put
        }
    ifelse
    dup /FontName 4 index put copyfont definefont pop
    } bind def
/?str2 256 string def
/?add
    {
    1 index type /integertype eq
        { exch true 4 2 }
        { false 3 1 }
    ifelse
    roll
    1 index findfont
    dup /Widths known
        {
        Adobe_CoolType_Data /AddWidths? true put
        gsave dup 1000 scalefont setfont
        }
    if
    /Downloaded known
        {
        exec
        exch
            {
            exch ?str2 cvs exch
            findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
            ?str1 1 index 1 add 3 index putinterval
            exch length 1 add 1 index add
            ?str1 2 index (*) putinterval
            ?str1 0 2 index getinterval cvn findfont 
            ?str1 3 index (+) putinterval
            2 dict dup /FontName ?str1 0 6 index getinterval cvn put
            dup /Downloaded Downloaded put end copyfont
            dup /FontName get exch definefont pop pop pop
            }
            {
            pop
            }
        ifelse
        }
        {
        pop
        exch
            {
            findfont
            dup /Found get
            dup length exch ?str1 cvs pop
            ?str1 1 index (+) putinterval
            ?str1 1 index 1 add 4 index ?str2 cvs putinterval
            ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
            1 dict exch 1 index exch /FontName exch put copyfont
            dup /FontName get exch definefont pop
            }
            {
            pop
            }
        ifelse
        }
    ifelse
    Adobe_CoolType_Data /AddWidths? get
        { grestore Adobe_CoolType_Data /AddWidths? false put }
    if
    } bind def
/?sh
    {
    currentfont /Downloaded known { exch } if pop
    } bind def
/?chp
    {
    currentfont /Downloaded known { pop } { false chp } ifelse
    } bind def
/?mv 
    {
    currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
    } bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
    begin
    /SubstituteFont
        dup $error exch 2 copy known
            { get }
            { pop pop { pop /Courier } bind }
        ifelse def
    /currentdistillerparams where dup
        {
        pop pop
        currentdistillerparams /CannotEmbedFontPolicy 2 copy known
            { get /Error eq }
            { pop pop false }
        ifelse
        }
    if not
        {
        countdictstack array dictstack 0 get
            begin
            userdict
                begin
                $SubstituteFont
                    begin
                    /$str 128 string def
                    /$fontpat 128 string def
                    /$slen 0 def
                    /$sname null def
                    /$match false def
                    /$fontname null def
                    /$substituteFound false def
                    /$inVMIndex null def
                    /$doSmartSub true def
                    /$depth 0 def
                    /$fontname null def
                    /$italicangle 26.5 def
                    /$dstack null def
                    /$Strategies 10 dict dup
                        begin
                        /$Type3Underprint
                            {
                            currentglobal exch false setglobal
                            11 dict
                                begin
                                /UseFont exch
                                    $WMode 0 ne
                                        {
                                        dup length dict copy
                                        dup /WMode $WMode put
                                        /UseFont exch definefont
                                        }
                                    if def
                                /FontName $fontname dup type /stringtype eq { cvn } if def
                                /FontType 3 def
                                /FontMatrix [ .001 0 0 .001 0 0 ] def
                                /Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
                                /FontBBox [ 0 0 0 0 ] def
                                /CCInfo 7 dict dup
                                    begin
                                    /cc null def
                                    /x 0 def
                                    /y 0 def
                                    end def
                                /BuildChar
                                    {
                                    exch
                                        begin
                                        CCInfo
                                            begin
                                            1 string dup 0 3 index put exch pop
                                            /cc exch def
                                            UseFont 1000 scalefont setfont
                                            cc stringwidth /y exch def /x exch def
                                            x y setcharwidth
                                            $SubstituteFont /$Strategy get /$Underprint get exec
                                            0 0 moveto cc show
                                            x y moveto
                                            end
                                        end
                                    } bind def
                                currentdict
                                end
                            exch setglobal
                            } bind def
                        /$GetaTint
                            2 dict dup
                                begin
                                /$BuildFont
                                    {
                                    dup /WMode known
                                        { dup /WMode get }
                                        { 0 }
                                    ifelse
                                    /$WMode exch def
                                    $fontname exch
                                    dup /FontName known
                                        {
                                        dup /FontName get
                                        dup type /stringtype eq { cvn } if
                                        }
                                        { /unnamedfont }
                                    ifelse
                                    exch
                                    Adobe_CoolType_Data /InVMDeepCopiedFonts get
                                    1 index /FontName get known
                                        {
                                        pop
                                        Adobe_CoolType_Data /InVMDeepCopiedFonts get
                                        1 index get
                                        null copyfont
                                        }
                                        { $deepcopyfont }
                                    ifelse
                                    exch 1 index exch /FontBasedOn exch put
                                    dup /FontName $fontname dup type /stringtype eq { cvn } if put
                                    definefont
                                    Adobe_CoolType_Data /InVMDeepCopiedFonts get
                                        begin
                                        dup /FontBasedOn get 1 index def
                                        end
                                    } bind def
                                /$Underprint
                                    {
                                    gsave
                                    x abs y abs gt
                                        { /y 1000 def }
                                        { /x -1000 def 500 120 translate }
                                    ifelse
                                    Level2?
                                        {
                                        [ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
                                        setcolorspace
                                        }
                                        { 0 setgray }
                                    ifelse
                                    10 setlinewidth
                                    x .8 mul
                                    [ 7 3 ]
                                        {
                                        y mul 8 div 120 sub x 10 div exch moveto
                                        0 y 4 div neg rlineto
                                        dup 0 rlineto
                                        0 y 4 div rlineto
                                        closepath
                                        gsave
                                        Level2?
                                            { .2 setcolor }
                                            { .8 setgray }
                                        ifelse
                                        fill grestore
                                        stroke
                                        }
                                    forall
                                    pop
                                    grestore
                                    } bind def
                                end def
                        /$Oblique
                            1 dict dup
                                begin
                                /$BuildFont
                                    {
                                    currentglobal exch dup gcheck setglobal
                                    null copyfont
                                        begin
                                        /FontBasedOn
                                        currentdict /FontName known
                                            {
                                            FontName
                                            dup type /stringtype eq { cvn } if
                                            }
                                            { /unnamedfont }
                                        ifelse
                                        def
                                        /FontName $fontname dup type /stringtype eq { cvn } if def
                                        /currentdistillerparams where
                                            { pop }
                                            {
                                            /FontInfo currentdict /FontInfo known
                                                { FontInfo null copyfont }
                                                { 2 dict }
                                            ifelse
                                            dup
                                                begin
                                                /ItalicAngle $italicangle def
                                                /FontMatrix FontMatrix
                                                [ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
                                                matrix concatmatrix readonly
                                                end
                                            4 2 roll def
                                            def
                                            }
                                        ifelse
                                        FontName currentdict
                                        end
                                    definefont
                                    exch setglobal
                                    } bind def
                                end def
                        /$None
                            1 dict dup
                                begin
                                /$BuildFont {} bind def
                                end def
                        end def
                    /$Oblique SetSubstituteStrategy
                    /$findfontByEnum
                        {
                        dup type /stringtype eq { cvn } if
                        dup /$fontname exch def
                        $sname null eq
                            { $str cvs dup length $slen sub $slen getinterval }
                            { pop $sname }
                        ifelse
                        $fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
                        /$match false def
                        $SubstituteFont /$dstack countdictstack array dictstack put
                        mark
                            {
                            $fontpat 0 $slen 7 add getinterval
                                { /$match exch def exit }
                            $str filenameforall
                            }
                        stopped
                            {
                            cleardictstack
                            currentdict
                            true
                            $SubstituteFont /$dstack get
                                {
                                exch
                                    {
                                    1 index eq
                                        { pop false }
                                        { true }
                                    ifelse
                                    }
                                    { begin false }
                                ifelse
                                }
                            forall
                            pop
                            }
                        if
                        cleartomark
                        /$slen 0 def
                        $match false ne
                            { $match (fonts/) anchorsearch pop pop cvn }
                            { /Courier }
                        ifelse
                        } bind def
                    /$ROS 1 dict dup
                        begin
                        /Adobe 4 dict dup
                            begin
                            /Japan1  [ /Ryumin-Light /HeiseiMin-W3
                                          /GothicBBB-Medium /HeiseiKakuGo-W5
                                          /HeiseiMaruGo-W4 /Jun101-Light ] def
                            /Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
                            /GB1      [ /STSong-Light /STHeiti-Regular ] def
                            /CNS1    [ /MKai-Medium /MHei-Medium ] def
                            end def
                        end def
                    /$cmapname null def
                    /$deepcopyfont
                        {
                        dup /FontType get 0 eq
                            {
                            1 dict dup /FontName /copied put copyfont
                                begin
                                /FDepVector FDepVector copyarray
                                0 1 2 index length 1 sub
                                    {
                                    2 copy get $deepcopyfont
                                    dup /FontName /copied put
                                    /copied exch definefont
                                    3 copy put pop pop
                                    }
                                for
                                def
                                currentdict
                                end
                            }
                            { $Strategies /$Type3Underprint get exec }
                        ifelse
                        } bind def
                    /$buildfontname
                        {
                        dup /CIDFont findresource /CIDSystemInfo get
                            begin
                            Registry length Ordering length Supplement 8 string cvs
                            3 copy length 2 add add add string
                            dup 5 1 roll dup 0 Registry putinterval
                            dup 4 index (-) putinterval
                            dup 4 index 1 add Ordering putinterval
                            4 2 roll add 1 add 2 copy (-) putinterval
                            end
                        1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
                        anchorsearch
                            { pop pop 3 2 roll putinterval cvn /$cmapname exch def }
                            { pop pop pop pop pop }
                        ifelse
                        length
                        $str 1 index (-) putinterval 1 add
                        $str 1 index $cmapname $fontpat cvs putinterval
                        $cmapname length add
                        $str exch 0 exch getinterval cvn
                        } bind def
                    /$findfontByROS
                        {
                        /$fontname exch def
                        $ROS Registry 2 copy known
                            {
                            get Ordering 2 copy known
                                { get }
                                { pop pop [] }
                            ifelse
                            }
                            { pop pop [] }
                        ifelse
                        false exch
                            {
                            dup /CIDFont resourcestatus
                                {
                                pop pop
                                save
                                1 index /CIDFont findresource
                                dup /WidthsOnly known
                                    { dup /WidthsOnly get }
                                    { false }
                                ifelse
                                exch pop
                                exch restore
                                    { pop }
                                    { exch pop true exit }
                                ifelse
                                }
                                { pop }
                            ifelse
                            }
                        forall
                            { $str cvs $buildfontname }
                            {
                            false (*)
                                {
                                save exch
                                dup /CIDFont findresource
                                dup /WidthsOnly known
                                    { dup /WidthsOnly get not }
                                    { true }
                                ifelse
                                exch /CIDSystemInfo get
                                dup /Registry get Registry eq
                                exch /Ordering get Ordering eq and and
                                    { exch restore exch pop true exit }
                                    { pop restore }
                                ifelse
                                }
                            $str /CIDFont resourceforall
                                { $buildfontname }
                                { $fontname $findfontByEnum }
                            ifelse
                            }
                        ifelse
                        } bind def
                    end
                end
                currentdict /$error known currentdict /languagelevel known and dup
                    { pop $error /SubstituteFont known }
                if
                dup
                    { $error }
                    { Adobe_CoolType_Core }
                ifelse
                begin
                    {
                    /SubstituteFont
                    /CMap /Category resourcestatus
                        {
                        pop pop
                        {
                        $SubstituteFont
                            begin
                            /$substituteFound true def
                            dup length $slen gt
                            $sname null ne or
                            $slen 0 gt and
                                {
                                $sname null eq
                                    { dup $str cvs dup length $slen sub $slen getinterval cvn }
                                    { $sname }
                                ifelse
                                Adobe_CoolType_Data /InVMFontsByCMap get
                                1 index 2 copy known
                                    {
                                    get
                                    false exch
                                        {
                                        pop
                                        currentglobal
                                            {
                                            GlobalFontDirectory 1 index known
                                                { exch pop true exit }
                                                { pop }
                                            ifelse
                                            }
                                            {
                                            FontDirectory 1 index known
                                                { exch pop true exit }
                                                {
                                                GlobalFontDirectory 1 index known
                                                    { exch pop true exit }
                                                    { pop }
                                                ifelse
                                                }
                                            ifelse
                                            }
                                        ifelse
                                        }
                                    forall
                                    }
                                    { pop pop false }
                                ifelse
                                    {
                                    exch pop exch pop
                                    }
                                    {
                                    dup /CMap resourcestatus
                                        {
                                        pop pop
                                        dup /$cmapname exch def
                                        /CMap findresource /CIDSystemInfo get { def } forall
                                        $findfontByROS
                                        }
                                        {
                                        128 string cvs
                                        dup (-) search
                                            {
                                            3 1 roll search
                                                {
                                                3 1 roll pop
                                                    { dup cvi }
                                                stopped
                                                    { pop pop pop pop pop $findfontByEnum }
                                                    {
                                                    4 2 roll pop pop
                                                    exch length
                                                    exch
                                                    2 index length
                                                    2 index
                                                    sub
                                                    exch 1 sub -1 0
                                                        {
                                                        $str cvs dup length
                                                        4 index
                                                        0
                                                        4 index
                                                        4 3 roll add
                                                        getinterval
                                                        exch 1 index exch 3 index exch
                                                        putinterval
                                                        dup /CMap resourcestatus
                                                            {
                                                            pop pop
                                                            4 1 roll pop pop pop
                                                            dup /$cmapname exch def
                                                            /CMap findresource /CIDSystemInfo get { def } forall
                                                            $findfontByROS
                                                            true exit
                                                            }
                                                            { pop }
                                                        ifelse
                                                        }
                                                    for
                                                    dup type /booleantype eq
                                                        { pop }
                                                        { pop pop pop $findfontByEnum }
                                                    ifelse
                                                    }
                                                ifelse
                                                }
                                                { pop pop pop $findfontByEnum }
                                            ifelse
                                            }
                                            { pop pop $findfontByEnum }
                                        ifelse
                                        }
                                    ifelse
                                    }
                                ifelse
                                }
                                { //SubstituteFont exec }
                            ifelse
                            /$slen 0 def
                            end
                        }
                        }
                        {
                        {
                        $SubstituteFont
                            begin
                            /$substituteFound true def
                            dup length $slen gt
                            $sname null ne or
                            $slen 0 gt and
                                { $findfontByEnum }
                                { //SubstituteFont exec }
                            ifelse
                            end
                        }
                        }
                    ifelse
                    bind readonly def
                    Adobe_CoolType_Core /scfindfont /systemfindfont load put
                    }
                    {
                    /scfindfont
                        {
                        $SubstituteFont
                            begin
                            dup systemfindfont
                            dup /FontName known
                                { dup /FontName get dup 3 index ne }
                                { /noname true }
                            ifelse
                            dup
                                {
                                /$origfontnamefound 2 index def
                                /$origfontname 4 index def /$substituteFound true def
                                }
                            if
                            exch pop
                                {
                                $slen 0 gt
                                $sname null ne
                                3 index length $slen gt or and
                                    {
                                    pop dup $findfontByEnum findfont
                                    dup maxlength 1 add dict
                                        begin
                                            { 1 index /FID eq { pop pop } { def } ifelse }
                                        forall
                                        currentdict
                                        end
                                    definefont
                                    dup /FontName known { dup /FontName get } { null } ifelse
                                    $origfontnamefound ne
                                        {
                                        $origfontname $str cvs print
                                        ( substitution revised, using ) print
                                        dup /FontName known
                                            { dup /FontName get } { (unspecified font) }
                                        ifelse
                                        $str cvs print (.\n) print
                                        }
                                    if
                                    }
                                    { exch pop }
                                ifelse
                                }
                                { exch pop }
                            ifelse
                            end
                        } bind def
                    }
                ifelse
                end
            end
        Adobe_CoolType_Core_Defined not
            {
            Adobe_CoolType_Core /findfont
                {
                $SubstituteFont
                    begin
                    $depth 0 eq
                        {
                        /$fontname 1 index dup type /stringtype ne { $str cvs } if def
                        /$substituteFound false def
                        }
                    if
                    /$depth $depth 1 add def
                    end
                scfindfont
                $SubstituteFont
                    begin
                    /$depth $depth 1 sub def
                    $substituteFound $depth 0 eq and
                        {
                        $inVMIndex null ne
                            { dup $inVMIndex $AddInVMFont }
                        if
                        $doSmartSub
                            {
                            currentdict /$Strategy known
                                { $Strategy /$BuildFont get exec }
                            if
                            }
                        if
                        }
                    if
                    end
                } bind put
            }
        if
        }
    if
    end
/$AddInVMFont
    {
    exch /FontName 2 copy known
        {
        get
        1 dict dup begin exch 1 index gcheck def end exch
        Adobe_CoolType_Data /InVMFontsByCMap get exch
        $DictAdd
        }
        { pop pop pop }
    ifelse
    } bind def
/$DictAdd
    {
    2 copy known not
        { 2 copy 4 index length dict put }
    if
    Level2? not
        {
        2 copy get dup maxlength exch length 4 index length add lt
        2 copy get dup length 4 index length add exch maxlength 1 index lt
            {
            2 mul dict
                begin
                2 copy get { forall } def
                2 copy currentdict put
                end
            }
            { pop }
        ifelse
        }
    if
    get
        begin
            { def }
        forall
        end
    } bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
    { currentglobal false setglobal }
    { false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
    { 2 copy get dup maxlength 27 add dict copy }
    { 27 dict }
ifelse put
Adobe_CoolType_Utility
    begin
    /@eexecStartData
          <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
         118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
         4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
    /@recognizeCIDFont null def
    /ct_Level2? exch def
    /ct_Clone? 1183615869 internaldict dup
            /CCRun known not
            exch /eCCRun known not
            ct_Level2? and or def
ct_Level2?
    { globaldict begin currentglobal true setglobal }
if
    /ct_AddStdCIDMap
        ct_Level2?
            { {
                mark
                Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
                     {
                     ((Hex) 57 StartData
                     0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
                     7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
                     d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
                     cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
                     }
                stopped
                     {
                     cleartomark
                     Adobe_CoolType_Utility /@recognizeCIDFont get
                     countdictstack dup array dictstack
                     exch 1 sub -1 0
                          {
                          2 copy get 3 index eq
                                { 1 index length exch sub 1 sub { end } repeat exit }
                                { pop }
                          ifelse
                          }
                     for
                     pop pop
                     Adobe_CoolType_Utility /@eexecStartData get eexec
                     }
                     { cleartomark }
                ifelse
            } }
            { {
                Adobe_CoolType_Utility /@eexecStartData get eexec
            } }
        ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
     {
     cid_extensions
     begin
     /cid_GetCIDSystemInfo
         {
         1 index type /stringtype eq
             { exch cvn exch }
         if
         cid_extensions
             begin
             dup load 2 index known
                 {
                 2 copy
                 cid_GetStatusInfo
                 dup null ne
                     {
                     1 index load
                     3 index get
                     dup null eq
                          { pop pop cid_UpdateDB }
                          {
                          exch
                          1 index /Created get eq
                              { exch pop exch pop }
                              { pop cid_UpdateDB }
                          ifelse
                          }
                     ifelse
                     }
                     { pop cid_UpdateDB }
                 ifelse
                 }
                 { cid_UpdateDB }
             ifelse
             end
         } bind def
     end
     }
if
ct_Level2?
    { end setglobal }
if
    /ct_UseNativeCapability?  systemdict /composefont known def
    /ct_MakeOCF 35 dict def
    /ct_Vars 25 dict def
    /ct_GlyphDirProcs 6 dict def
    /ct_BuildCharDict 15 dict dup
        begin
        /charcode 2 string def
        /dst_string 1500 string def
        /nullstring () def
        /usewidths? true def
        end def
    ct_Level2? { setglobal } { pop } ifelse
    ct_GlyphDirProcs
        begin
        /GetGlyphDirectory
            {
            systemdict /languagelevel known
                { pop /CIDFont findresource /GlyphDirectory get }
                {
                1 index /CIDFont findresource /GlyphDirectory
                get dup type /dicttype eq
                    {
                    dup dup maxlength exch length sub 2 index lt
                        {
                        dup length 2 index add dict copy 2 index
                        /CIDFont findresource/GlyphDirectory 2 index put
                        }
                    if
                    }
                if
                exch pop exch pop
                }
            ifelse
            +
            } def
        /+
            {
            systemdict /languagelevel known
                {
                currentglobal false setglobal
                3 dict begin
                    /vm exch def
                }
                { 1 dict begin }
            ifelse
            /$ exch def
            systemdict /languagelevel known
                {
                vm setglobal
                /gvm currentglobal def
                $ gcheck setglobal
                }
            if
            ? { $ begin } if
            } def
        /? { $ type /dicttype eq } def
        /| {
            userdict /Adobe_CoolType_Data known
                {
            Adobe_CoolType_Data /AddWidths? known
                {
                 currentdict Adobe_CoolType_Data
                    begin
                      begin
                        AddWidths?
                                {
                                Adobe_CoolType_Data /CC 3 index put
                                ? { def } { $ 3 1 roll put } ifelse
                                CC charcode exch 1 index 0 2 index 256 idiv put
                                1 index exch 1 exch 256 mod put
                                stringwidth 2 array astore
                                currentfont /Widths get exch CC exch put
                                }
                                { ? { def } { $ 3 1 roll put } ifelse }
                            ifelse
                    end
                end
                }
                { ? { def } { $ 3 1 roll put } ifelse } ifelse
                }
                { ? { def } { $ 3 1 roll put } ifelse }
            ifelse
            } def
        /!
            {
            ? { end } if
            systemdict /languagelevel known
                { gvm setglobal }
            if
            end
            } def
        /: { string currentfile exch readstring pop } executeonly def
        end
    ct_MakeOCF
        begin
        /ct_cHexEncoding
        [/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
         /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
         /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
         /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
         /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
         /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
         /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
         /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
         /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
         /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
         /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
         /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
         /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
         /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
        /ct_CID_STR_SIZE 8000 def
        /ct_mkocfStr100 100 string def
        /ct_defaultFontMtx [.001 0 0 .001 0 0] def
        /ct_1000Mtx [1000 0 0 1000 0 0] def
        /ct_raise {exch cvx exch errordict exch get exec stop} bind def
        /ct_reraise
            { cvx $error /errorname get (Error: ) print dup (                         ) cvs print
                    errordict exch get exec stop
            } bind def
        /ct_cvnsi
            {
            1 index add 1 sub 1 exch 0 4 1 roll
                {
                2 index exch get
                exch 8 bitshift
                add
                }
            for
            exch pop
            } bind def
        /ct_GetInterval
            {
            Adobe_CoolType_Utility /ct_BuildCharDict get
                begin
                /dst_index 0 def
                dup dst_string length gt
                    { dup string /dst_string exch def }
                if
                1 index ct_CID_STR_SIZE idiv
                /arrayIndex exch def
                2 index arrayIndex  get
                2 index
                arrayIndex ct_CID_STR_SIZE mul
                sub
                    {
                    dup 3 index add 2 index length le
                        {
                        2 index getinterval
                        dst_string  dst_index 2 index putinterval
                        length dst_index add /dst_index exch def
                        exit
                        }
                        {
                        1 index length 1 index sub
                        dup 4 1 roll
                        getinterval
                        dst_string  dst_index 2 index putinterval
                        pop dup dst_index add /dst_index exch def
                        sub
                        /arrayIndex arrayIndex 1 add def
                        2 index dup length arrayIndex gt
                              { arrayIndex get }
                              {
                              pop
                              exit
                              }
                        ifelse
                        0
                        }
                    ifelse
                    }
                loop
                pop pop pop
                dst_string 0 dst_index getinterval
                end
            } bind def
        ct_Level2?
            {
            /ct_resourcestatus
            currentglobal mark true setglobal
                { /unknowninstancename /Category resourcestatus }
            stopped
                { cleartomark setglobal true }
                { cleartomark currentglobal not exch setglobal }
            ifelse
                {
                    {
                    mark 3 1 roll /Category findresource
                        begin
                        ct_Vars /vm currentglobal put
                        ({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
                            { cleartomark false }
                            { { 3 2 roll pop true } { cleartomark false } ifelse }
                        ifelse
                        ct_Vars /vm get setglobal
                        end
                    }
                }
                { { resourcestatus } }
            ifelse bind def
            /CIDFont /Category ct_resourcestatus
                { pop pop }
                {
                currentglobal  true setglobal
                /Generic /Category findresource
                dup length dict copy
                dup /InstanceType /dicttype put
                /CIDFont exch /Category defineresource pop
                setglobal
                }
            ifelse
            ct_UseNativeCapability?
                {
                /CIDInit /ProcSet findresource begin
                12 dict begin
                begincmap
                /CIDSystemInfo 3 dict dup begin
                  /Registry (Adobe) def
                  /Ordering (Identity) def
                  /Supplement 0 def
                end def
                /CMapName /Identity-H def
                /CMapVersion 1.000 def
                /CMapType 1 def
                1 begincodespacerange
                <0000> <FFFF>
                endcodespacerange
                1 begincidrange
                <0000> <FFFF> 0
                endcidrange
                endcmap
                CMapName currentdict /CMap defineresource pop
                end
                end
                }
            if
            }
            {
            /ct_Category 2 dict begin
            /CIDFont  10 dict def
            /ProcSet    2 dict def
            currentdict
            end
            def
            /defineresource
                {
                ct_Category 1 index 2 copy known
                    {
                    get
                    dup dup maxlength exch length eq
                        {
                        dup length 10 add dict copy
                        ct_Category 2 index 2 index put
                        }
                    if
                    3 index 3 index put
                    pop exch pop
                    }
                    { pop pop /defineresource /undefined ct_raise }
                ifelse
                } bind def
            /findresource
                {
                ct_Category 1 index 2 copy known
                    {
                    get
                    2 index 2 copy known
                        { get 3 1 roll pop pop}
                        { pop pop /findresource /undefinedresource ct_raise }
                    ifelse
                    }
                    { pop pop /findresource /undefined ct_raise }
                ifelse
                } bind def
            /resourcestatus
                {
                ct_Category 1 index 2 copy known
                    {
                    get
                    2 index known
                    exch pop exch pop
                        {
                        0 -1 true
                        }
                        {
                        false
                        }
                    ifelse
                    }
                    { pop pop /findresource /undefined ct_raise }
                ifelse
                } bind def
            /ct_resourcestatus /resourcestatus load def
            }
        ifelse
        /ct_CIDInit 2 dict
            begin
            /ct_cidfont_stream_init
                {
                    {
                    dup (Binary) eq
                        {
                        pop
                        null
                        currentfile
                        ct_Level2?
                            {
                                { cid_BYTE_COUNT () /SubFileDecode filter }
                            stopped
                                { pop pop pop }
                            if
                            }
                        if
                        /readstring load
                        exit
                        }
                    if
                    dup (Hex) eq
                        {
                        pop
                        currentfile
                        ct_Level2?
                            {
                                { null exch /ASCIIHexDecode filter /readstring }
                            stopped
                                { pop exch pop (>) exch /readhexstring }
                            if
                            }
                            { (>) exch /readhexstring }
                        ifelse
                        load
                        exit
                        }
                    if
                    /StartData /typecheck ct_raise
                    }
                loop
                cid_BYTE_COUNT ct_CID_STR_SIZE le
                    {
                    2 copy cid_BYTE_COUNT string exch exec
                    pop
                    1 array dup
                    3 -1 roll
                    0 exch put
                    }
                    {
                    cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
                    dup array exch 2 sub 0 exch 1 exch
                        {
                        2 copy
                        5 index
                        ct_CID_STR_SIZE
                        string
                        6 index exec
                        pop
                        put
                        pop
                        }
                    for
                    2 index
                    cid_BYTE_COUNT ct_CID_STR_SIZE mod string
                    3 index exec
                    pop
                    1 index exch
                    1 index length 1 sub
                    exch put
                    }
                ifelse
                cid_CIDFONT exch /GlyphData exch put
                2 index null eq
                    {
                    pop pop pop
                    }
                    {
                    pop /readstring load
                    1 string exch
                        {
                        3 copy exec
                        pop
                        dup length 0 eq
                            {
                            pop pop pop pop pop
                            true exit
                            }
                        if
                        4 index
                        eq
                            {
                            pop pop pop pop
                            false exit
                            }
                        if
                        }
                    loop
                    pop
                    }
                ifelse
                } bind def
            /StartData
                {
                mark
                    {
                    currentdict
                    dup /FDArray get 0 get /FontMatrix get
                    0 get 0.001 eq
                        {
                        dup /CDevProc known not
                            {
                            /CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
                                { get }
                                {
                                pop pop
                                { pop pop pop pop pop 0 -1000 7 index 2 div 880 }
                                }
                            ifelse
                            def
                            }
                        if
                        }
                        {
                         /CDevProc
                             {
                             pop pop pop pop pop
                             0
                             1 cid_temp /cid_CIDFONT get
                             /FDArray get 0 get
                             /FontMatrix get 0 get div
                             7 index 2 div
                             1 index 0.88 mul
                             } def
                        }
                    ifelse
                    /cid_temp 15 dict def
                    cid_temp
                        begin
                        /cid_CIDFONT exch def
                        3 copy pop
                        dup /cid_BYTE_COUNT exch def 0 gt
                            {
                            ct_cidfont_stream_init
                            FDArray
                                {
                                /Private get
                                dup /SubrMapOffset known
                                    {
                                    begin
                                    /Subrs SubrCount array def
                                    Subrs
                                    SubrMapOffset
                                    SubrCount
                                    SDBytes
                                    ct_Level2?
                                        {
                                        currentdict dup /SubrMapOffset undef
                                        dup /SubrCount undef
                                        /SDBytes undef
                                        }
                                    if
                                    end
                                    /cid_SD_BYTES exch def
                                    /cid_SUBR_COUNT exch def
                                    /cid_SUBR_MAP_OFFSET exch def
                                    /cid_SUBRS exch def
                                    cid_SUBR_COUNT 0 gt
                                        {
                                        GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
                                        0 cid_SD_BYTES ct_cvnsi
                                        0 1 cid_SUBR_COUNT 1 sub
                                            {
                                            exch 1 index
                                            1 add
                                            cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
                                            GlyphData exch cid_SD_BYTES ct_GetInterval
                                            0 cid_SD_BYTES ct_cvnsi
                                            cid_SUBRS 4 2 roll
                                            GlyphData exch
                                            4 index
                                            1 index
                                            sub
                                            ct_GetInterval
                                            dup length string copy put
                                            }
                                        for
                                        pop
                                        }
                                    if
                                    }
                                    { pop }
                                ifelse
                                }
                            forall
                            }
                        if
                        cleartomark pop pop
                        end
                    CIDFontName currentdict /CIDFont defineresource pop
                    end end
                    }
                stopped
                    { cleartomark /StartData ct_reraise }
                if
                } bind def
            currentdict
            end def
        /ct_saveCIDInit
            {
            /CIDInit /ProcSet ct_resourcestatus
                { true }
                { /CIDInitC /ProcSet ct_resourcestatus }
            ifelse
                {
                pop pop
                /CIDInit /ProcSet findresource
                ct_UseNativeCapability?
                    { pop null }
                    { /CIDInit ct_CIDInit /ProcSet defineresource pop }
                ifelse
                }
                { /CIDInit ct_CIDInit /ProcSet defineresource pop null }
            ifelse
            ct_Vars exch /ct_oldCIDInit exch put
            } bind def
        /ct_restoreCIDInit
            {
            ct_Vars /ct_oldCIDInit get dup null ne
                { /CIDInit exch /ProcSet defineresource pop }
                { pop }
            ifelse
            } bind def
        /ct_BuildCharSetUp
            {
            1 index
                begin
                CIDFont
                    begin
                    Adobe_CoolType_Utility /ct_BuildCharDict get
                        begin
                        /ct_dfCharCode exch def
                        /ct_dfDict exch def
                        CIDFirstByte ct_dfCharCode add
                        dup CIDCount ge
                            { pop 0 }
                        if
                        /cid exch def
                            {
                            GlyphDirectory cid 2 copy known
                                { get }
                                { pop pop nullstring }
                            ifelse
                            dup length FDBytes sub 0 gt
                                {
                                dup
                                FDBytes 0 ne
                                    { 0 FDBytes ct_cvnsi }
                                    { pop 0 }
                                ifelse
                                /fdIndex exch def
                                dup length FDBytes sub FDBytes exch getinterval
                                /charstring exch def
                                exit
                                }
                                {
                                pop
                                cid 0 eq
                                    { /charstring nullstring def exit }
                                if
                                /cid 0 def
                                }
                            ifelse
                            }
                        loop
            } def
        /ct_SetCacheDevice
            {
            0 0 moveto
            dup stringwidth
            3 -1 roll
            true charpath
            pathbbox
            0 -1000
            7 index 2 div 880
            setcachedevice2
            0 0 moveto
            } def
        /ct_CloneSetCacheProc
            {
            1 eq
                {
                stringwidth
                pop -2 div -880
                0 -1000 setcharwidth
                moveto
                }
                {
                usewidths?
                    {
                    currentfont /Widths get cid
                    2 copy known
                        { get exch pop aload pop }
                        { pop pop stringwidth }
                    ifelse
                    }
                    { stringwidth }
                ifelse
                setcharwidth
                0 0 moveto
                }
            ifelse
            } def
        /ct_Type3ShowCharString
            {
            ct_FDDict fdIndex 2 copy known
                { get }
                {
                currentglobal 3 1 roll
                1 index gcheck setglobal
                ct_Type1FontTemplate dup maxlength dict copy
                    begin
                    FDArray fdIndex get
                    dup /FontMatrix 2 copy known
                        { get }
                        { pop pop ct_defaultFontMtx }
                    ifelse
                    /FontMatrix exch dup length array copy def
                    /Private get
                    /Private exch def
                    /Widths rootfont /Widths get def
                    /CharStrings 1 dict dup /.notdef
                        <d841272cf18f54fc13> dup length string copy put def
                    currentdict
                    end
                /ct_Type1Font exch definefont
                dup 5 1 roll put
                setglobal
                }
            ifelse
            dup /CharStrings get 1 index /Encoding get
            ct_dfCharCode get charstring put
            rootfont /WMode 2 copy known
                { get }
                { pop pop 0 }
            ifelse
            exch
            1000 scalefont setfont
            ct_str1 0 ct_dfCharCode put
            ct_str1 exch ct_dfSetCacheProc
            ct_SyntheticBold
                {
                currentpoint
                ct_str1 show
                newpath
                moveto
                ct_str1 true charpath
                ct_StrokeWidth setlinewidth
                stroke
                }
                { ct_str1 show }
            ifelse
            } def
        /ct_Type4ShowCharString
            {
            ct_dfDict ct_dfCharCode charstring
            FDArray fdIndex get
            dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
                { ct_1000Mtx matrix concatmatrix concat }
                { pop }
            ifelse
            /Private get
            Adobe_CoolType_Utility /ct_Level2? get not
                {
                ct_dfDict /Private
                3 -1 roll
                    { put }
                1183615869 internaldict /superexec get exec
                }
            if
            1183615869 internaldict
            Adobe_CoolType_Utility /ct_Level2? get
                { 1 index }
                { 3 index /Private get mark 6 1 roll }
            ifelse
            dup /RunInt known
                { /RunInt get }
                { pop /CCRun }
            ifelse
            get exec
            Adobe_CoolType_Utility /ct_Level2? get not
                { cleartomark }
            if
            } bind def
        /ct_BuildCharIncremental
            {
                {
                Adobe_CoolType_Utility /ct_MakeOCF get begin
                ct_BuildCharSetUp
                ct_ShowCharString
                }
            stopped
                { stop }
            if
            end
            end
            end
            end
            } bind def
        /BaseFontNameStr (BF00) def
        /ct_Type1FontTemplate 14 dict
            begin
            /FontType 1 def
            /FontMatrix  [0.001 0 0 0.001 0 0] def
            /FontBBox  [-250 -250 1250 1250] def
            /Encoding ct_cHexEncoding def
            /PaintType 0 def
            currentdict
            end def
        /BaseFontTemplate 11 dict
            begin
            /FontMatrix  [0.001 0 0 0.001 0 0] def
            /FontBBox  [-250 -250 1250 1250] def
            /Encoding ct_cHexEncoding def
            /BuildChar /ct_BuildCharIncremental load def
            ct_Clone?
                {
                /FontType 3 def
                /ct_ShowCharString /ct_Type3ShowCharString load def
                /ct_dfSetCacheProc /ct_CloneSetCacheProc load def
                /ct_SyntheticBold false def
                /ct_StrokeWidth 1 def
                }
                {
                /FontType 4 def
                /Private 1 dict dup /lenIV 4 put def
                /CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
                /PaintType 0 def
                /ct_ShowCharString /ct_Type4ShowCharString load def
                }
            ifelse
            /ct_str1 1 string def
            currentdict
            end def
        /BaseFontDictSize BaseFontTemplate length 5 add def
        /ct_matrixeq
            {
            true 0 1 5
                {
                dup 4 index exch get exch 3 index exch get eq and
                dup not
                    { exit }
                if
                }
            for
            exch pop exch pop
            } bind def
        /ct_makeocf
            {
            15 dict
                begin
                exch /WMode exch def
                exch /FontName exch def
                /FontType 0 def
                /FMapType 2 def
            dup /FontMatrix known
                { dup /FontMatrix get /FontMatrix exch def }
                { /FontMatrix matrix def }
            ifelse
                /bfCount 1 index /CIDCount get 256 idiv 1 add
                    dup 256 gt { pop 256} if def
                /Encoding
                    256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
                    bfCount 1 255 { 2 copy bfCount put pop } for
                    def
                /FDepVector bfCount dup 256 lt { 1 add } if array def
                BaseFontTemplate BaseFontDictSize dict copy
                    begin
                    /CIDFont exch def
                    CIDFont /FontBBox known
                        { CIDFont /FontBBox get /FontBBox exch def }
                    if
                    CIDFont /CDevProc known
                        { CIDFont /CDevProc get /CDevProc exch def }
                    if
                    currentdict
                    end
                BaseFontNameStr 3 (0) putinterval
                0 1 bfCount dup 256 eq { 1 sub } if
                    {
                    FDepVector exch
                    2 index BaseFontDictSize dict copy
                        begin
                        dup /CIDFirstByte exch 256 mul def
                        FontType 3 eq
                            { /ct_FDDict 2 dict def }
                        if
                        currentdict
                        end
                    1 index  16
                    BaseFontNameStr  2 2 getinterval cvrs pop
                    BaseFontNameStr exch definefont
                    put
                    }
                for
                ct_Clone?
                    { /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
                if
                FontName
                currentdict
                end
            definefont
            ct_Clone?
                {
                gsave
                dup 1000 scalefont setfont
                ct_BuildCharDict
                    begin
                    /usewidths? false def
                    currentfont /Widths get
                        begin
                        exch /CIDFont get /GlyphDirectory get
                            {
                            pop
                            dup charcode exch 1 index 0 2 index 256 idiv put
                            1 index exch 1 exch 256 mod put
                            stringwidth 2 array astore def
                            }
                        forall
                        end
                    /usewidths? true def
                    end
                grestore
                }
                { exch pop }
            ifelse
            } bind def
        /ct_ComposeFont
            {
            ct_UseNativeCapability?
                {
                2 index /CMap ct_resourcestatus
                    { pop pop exch pop }
                    {
                    /CIDInit /ProcSet findresource
                        begin
                        12 dict
                            begin
                            begincmap
                            /CMapName 3 index def
                            /CMapVersion 1.000 def
                            /CMapType 1 def
                            exch /WMode exch def
                            /CIDSystemInfo 3 dict dup
                                begin
                                /Registry (Adobe) def
                                /Ordering
                                CMapName ct_mkocfStr100 cvs
                                (Adobe-) search
                                    {
                                    pop pop
                                    (-) search
                                        {
                                        dup length string copy
                                        exch pop exch pop
                                        }
                                        { pop (Identity)}
                                    ifelse
                                    }
                                    { pop  (Identity)  }
                                ifelse
                                def
                                /Supplement 0 def
                                end def
                            1 begincodespacerange
                            <0000> <FFFF>
                            endcodespacerange
                            1 begincidrange
                            <0000> <FFFF> 0
                            endcidrange
                            endcmap
                            CMapName currentdict /CMap defineresource pop
                            end
                        end
                    }
                ifelse
                composefont
                }
                {
                3 2 roll pop
                0 get /CIDFont findresource
                ct_makeocf
                }
            ifelse
            } bind def
        /ct_MakeIdentity
            {
            ct_UseNativeCapability?
                {
                1 index /CMap ct_resourcestatus
                    { pop pop }
                    {
                    /CIDInit /ProcSet findresource begin
                    12 dict begin
                    begincmap
                    /CMapName 2 index def
                    /CMapVersion 1.000 def
                    /CMapType 1 def
                    /CIDSystemInfo 3 dict dup
                        begin
                        /Registry (Adobe) def
                        /Ordering
                        CMapName ct_mkocfStr100 cvs
                        (Adobe-) search
                            {
                            pop pop
                            (-) search
                                { dup length string copy exch pop exch pop }
                                { pop (Identity) }
                            ifelse
                            }
                            { pop (Identity) }
                        ifelse
                        def
                        /Supplement 0 def
                        end def
                    1 begincodespacerange
                    <0000> <FFFF>
                    endcodespacerange
                    1 begincidrange
                    <0000> <FFFF> 0
                    endcidrange
                    endcmap
                    CMapName currentdict /CMap defineresource pop
                    end
                    end
                    }
                ifelse
                composefont
                }
                {
                exch pop
                0 get /CIDFont findresource
                ct_makeocf
                }
            ifelse
            } bind def
        currentdict readonly pop
        end
    end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  { 
        pop
  } 
  { 
        {string} forall
  } ifelse
} bind def
/Type42DictBegin
{
    25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
    begin
          /.notdef 0 def
          currentdict 
    end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
     currentdict dup /FontName get exch definefont end
    ct_T42Dict exch
    dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
    Is2015?
    {         
         /GlyphDirectory 
         16
         dict def
         sfnts 0 get
         dup
         2 index
         (glyx)
         putinterval
         2 index  
         (locx)
         putinterval
         pop
         pop
    }
    {
         pop
         pop
    } ifelse            
} bind def
/AddT42Char
{
    Is2015?
    {
        /GlyphDirectory get 
        begin
        def
        end
        pop
        pop
    }
    {
        /sfnts get
        4 index
        get
        3 index
      2 index
        putinterval
        pop
        pop
        pop
        pop
    } ifelse
} bind def
/T0AddT42Mtx2
{
    /CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
    currentpacking
    true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
    null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
    Adobe_AGM_Core begin
    Adobe_AGM_Image begin
    /AGMIMG_&image systemdict/image get def
    /AGMIMG_&imagemask systemdict/imagemask get def
    /colorimage where{
        pop
        /AGMIMG_&colorimage /colorimage ldf
    }if
    end
    end
}def
/page_setup
{
    Adobe_AGM_Image begin
    /AGMIMG_ccimage_exists {/customcolorimage where 
        {
            pop
            /Adobe_AGM_OnHost_Seps where
            {
            pop false
            }{
            /Adobe_AGM_InRip_Seps where
                {
                pop false
                }{
                    true
                 }ifelse
             }ifelse
            }{
            false
        }ifelse 
    }bdf
    level2{
        /invert_image_samples
        {
            Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
            /Decode [ Decode 1 get Decode 0 get] def
        }def
        /knockout_image_samples
        {
            Operator/imagemask ne{
                /Decode [1 1] def
            }if
        }def
    }{  
        /invert_image_samples
        {
            {1 exch sub} currenttransfer addprocs settransfer
        }def
        /knockout_image_samples
        {
            { pop 1 } currenttransfer addprocs settransfer
        }def
    }ifelse
    /img /imageormask ldf
    /sepimg /sep_imageormask ldf
    /devnimg /devn_imageormask ldf
    /idximg /indexed_imageormask ldf
    /_ctype 7 def
    currentdict{
        dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
            bind
        }if
        def
    }forall
}def
/page_trailer
{
    end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
    dup type /arraytype ne
        {1 array astore}if
    aload length
        {
        dup type /filetype eq
            {
            dup status 1 index currentfile ne and
                {dup flushfile closefile}
                {pop}
            ifelse
            }{pop}ifelse
        } repeat
}def
/imageormask_sys
{
    begin
        save mark
        level2{
            currentdict
            Operator /imagemask eq{
                AGMIMG_&imagemask
            }{
                use_mask {
                    level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
                }{
                    AGMIMG_&image
                }ifelse
            }ifelse
        }{
            Width Height
            Operator /imagemask eq{
                Decode 0 get 1 eq Decode 1 get 0 eq and
                ImageMatrix /DataSource load
                AGMIMG_&imagemask
            }{
                BitsPerComponent ImageMatrix /DataSource load
                AGMIMG_&image
            }ifelse
        }ifelse
        currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
        cleartomark restore
    end
}def
/overprint_plate
{
    currentoverprint {
        0 get dup type /nametype eq {
            dup /DeviceGray eq{
                pop AGMCORE_black_plate not
            }{
                /DeviceCMYK eq{
                    AGMCORE_is_cmyk_sep not
                }if
            }ifelse
        }{
            false exch
            {
                 AGMOHS_sepink eq or
            } forall
            not
        } ifelse
    }{
        pop false
    }ifelse
}def
/process_mask_L3
{
    dup begin
    /ImageType 1 def
    end
    4 dict begin
        /DataDict exch def
        /ImageType 3 def
        /InterleaveType 3 def
        /MaskDict 9 dict begin
            /ImageType 1 def
            /Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
            /Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
            /ImageMatrix [Width 0 0 Height neg 0 Height] def
            /NComponents 1 def
            /BitsPerComponent 1 def
            /Decode [0 1] def
            /DataSource AGMIMG_maskSource def
        currentdict end def
    currentdict end
}def
/use_mask
{
    dup type /dicttype eq
    {
        dup /Mask known {
            dup /Mask get {
                level3
                {true}
                {
                    dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
                    dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
                    3 -1 roll and
                } ifelse
            }
            {false} ifelse
        }
        {false} ifelse
    }
    {false} ifelse
}def
/make_line_source
{
    begin
    MultipleDataSources {
        [
        Decode length 2 div cvi {Width string} repeat
        ]
    }{
        Width Decode length 2 div mul cvi string
    }ifelse
    end
}def
/datasource_to_str
{
    exch dup type
    dup /filetype eq {
        pop exch readstring
    }{
        /arraytype eq {
            exec exch copy
        }{
            pop
        }ifelse
    }ifelse
    pop
}def
/masked_image_simulation
{
    3 dict begin
    dup make_line_source /line_source xdf
    /mask_source AGMIMG_maskSource /LZWDecode filter def
    dup /Width get 8 div ceiling cvi string /mask_str xdf
    begin
    gsave
    0 1 translate 1 -1 Height div scale
    1 1 Height {
        pop
        gsave
        MultipleDataSources {
            0 1 DataSource length 1 sub {
                dup DataSource exch get
                exch line_source exch get
                datasource_to_str
            } for
        }{
            DataSource line_source datasource_to_str
        } ifelse
        <<
            /PatternType 1
            /PaintProc [
                /pop cvx
                <<
                    /ImageType 1
                    /Width Width
                    /Height 1
                    /ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
                    /MultipleDataSources MultipleDataSources
                    /DataSource line_source
                    /BitsPerComponent BitsPerComponent
                    /Decode Decode
                >>
                /image cvx
            ] cvx
            /BBox [0 0 Width 1]
            /XStep Width
            /YStep 1
            /PaintType 1
            /TilingType 2
        >>
        matrix makepattern set_pattern
        <<
            /ImageType 1
            /Width Width
            /Height 1
            /ImageMatrix Width 1 matrix scale
            /MultipleDataSources false
            /DataSource mask_source mask_str readstring pop
            /BitsPerComponent 1
            /Decode [0 1]
        >>
        imagemask
        grestore
        0 1 translate
    } for
    grestore
    end
    end
}def
/imageormask
{
    begin
        SkipImageProc {
            currentdict consumeimagedata
        }
        {
            save mark
            level2 AGMCORE_host_sep not and{
                currentdict
                Operator /imagemask eq DeviceN_PS2 not and {
                    imagemask
                }{
                    AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
                        [/Separation /Black /DeviceGray {}] setcolorspace
                        /Decode [ Decode 1 get Decode 0 get ] def
                    }if
                    use_mask {
                        level3 {process_mask_L3 image}{masked_image_simulation}ifelse
                    }{
                        DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
                        {
                            Names convert_to_process not {
                                2 dict begin
                                /imageDict xdf
                                /names_index 0 def
                                gsave
                                imageDict write_image_file {
                                    Names {
                                        dup (None) ne {
                                            [/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
                                            Operator imageDict read_image_file
                                            names_index 0 eq {true setoverprint} if
                                            /names_index names_index 1 add def
                                        }{
                                            pop
                                        } ifelse
                                    } forall
                                    close_image_file
                                } if
                                grestore
                                end
                            }{
                                Operator /imagemask eq {
                                    imagemask
                                }{
                                    image
                                } ifelse
                            } ifelse
                        }{
                            Operator /imagemask eq {
                                imagemask
                            }{
                                image
                            } ifelse
                        } ifelse
                    }ifelse
                }ifelse
            }{
                Width Height
                Operator /imagemask eq{
                    Decode 0 get 1 eq Decode 1 get 0 eq and
                    ImageMatrix /DataSource load
                    /Adobe_AGM_OnHost_Seps where {
                        pop imagemask
                    }{
                        currentgray 1 ne{
                            currentdict imageormask_sys
                        }{
                            currentoverprint not{
                                1 AGMCORE_&setgray
                                currentdict imageormask_sys
                            }{
                                currentdict ignoreimagedata
                            }ifelse                     
                        }ifelse
                    }ifelse
                }{
                    BitsPerComponent ImageMatrix 
                    MultipleDataSources{
                        0 1 NComponents 1 sub{
                            DataSource exch get
                        }for
                    }{
                        /DataSource load
                    }ifelse
                    Operator /colorimage eq{
                        AGMCORE_host_sep{
                            MultipleDataSources level2 or NComponents 4 eq and{
                                AGMCORE_is_cmyk_sep{
                                    MultipleDataSources{
                                        /DataSource [
                                            DataSource 0 get /exec cvx
                                            DataSource 1 get /exec cvx
                                            DataSource 2 get /exec cvx
                                            DataSource 3 get /exec cvx
                                            /AGMCORE_get_ink_data cvx
                                        ] cvx def
                                    }{
                                        /DataSource 
                                        Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
                                        /DataSource load
                                        filter_cmyk 0 () /SubFileDecode filter def
                                    }ifelse
                                    /Decode [ Decode 0 get Decode 1 get ] def
                                    /MultipleDataSources false def
                                    /NComponents 1 def
                                    /Operator /image def
                                    invert_image_samples
                                    1 AGMCORE_&setgray
                                    currentdict imageormask_sys
                                }{
                                    currentoverprint not Operator/imagemask eq and{
                                        1 AGMCORE_&setgray
                                        currentdict imageormask_sys
                                    }{
                                        currentdict ignoreimagedata
                                    }ifelse
                                }ifelse
                            }{  
                                MultipleDataSources NComponents AGMIMG_&colorimage                      
                            }ifelse
                        }{
                            true NComponents colorimage
                        }ifelse
                    }{
                        Operator /image eq{
                            AGMCORE_host_sep{
                                /DoImage true def
                                HostSepColorImage{
                                    invert_image_samples
                                }{
                                    AGMCORE_black_plate not Operator/imagemask ne and{
                                        /DoImage false def
                                        currentdict ignoreimagedata
                                    }if
                                }ifelse
                                1 AGMCORE_&setgray
                                DoImage
                                    {currentdict imageormask_sys} if
                            }{
                                use_mask {
                                    level3 {process_mask_L3 image}{masked_image_simulation}ifelse
                                }{
                                    image
                                }ifelse
                            }ifelse
                        }{
                            Operator/knockout eq{
                                pop pop pop pop pop
                                currentcolorspace overprint_plate not{
                                    knockout_unitsq
                                }if
                            }if
                        }ifelse
                    }ifelse
                }ifelse
            }ifelse
            cleartomark restore
        }ifelse
        currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
    end
}def
/sep_imageormask
{
    /sep_colorspace_dict AGMCORE_gget begin
    CSA map_csa
    begin
    SkipImageProc {
        currentdict consumeimagedata
    }
    {
        save mark 
        AGMCORE_avoid_L2_sep_space{
            /Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
        }if
        AGMIMG_ccimage_exists 
        MappedCSA 0 get /DeviceCMYK eq and
        currentdict/Components known and 
        Name () ne and 
        Name (All) ne and 
        Operator /image eq and
        AGMCORE_producing_seps not and
        level2 not and
        {
            Width Height BitsPerComponent ImageMatrix 
            [
            /DataSource load /exec cvx
            {
                0 1 2 index length 1 sub{
                    1 index exch
                    2 copy get 255 xor put
                }for
            } /exec cvx
            ] cvx bind
            MappedCSA 0 get /DeviceCMYK eq{
                Components aload pop
            }{
                0 0 0 Components aload pop 1 exch sub
            }ifelse
            Name findcmykcustomcolor
            customcolorimage
        }{
            AGMCORE_producing_seps not{
                level2{
                    AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
                        [/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
                        /sep_tint AGMCORE_gget setcolor
                    }if
                    currentdict imageormask
                }{ 
                    currentdict
                    Operator /imagemask eq{
                        imageormask
                    }{
                        sep_imageormask_lev1
                    }ifelse
                }ifelse
            }{
                AGMCORE_host_sep{
                    Operator/knockout eq{
                        currentdict/ImageMatrix get concat
                        knockout_unitsq
                    }{
                        currentgray 1 ne{
                            AGMCORE_is_cmyk_sep Name (All) ne and{
                                level2{
                                    Name AGMCORE_IsSeparationAProcessColor 
                                    {
                                        Operator /imagemask eq{
                                            /sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
                                        }{
                                            invert_image_samples
                                        }ifelse
                                    }{
                                        [ /Separation Name [/DeviceGray]
                                        { 
                                            sep_colorspace_proc AGMCORE_get_ink_data
                                            1 exch sub
                                        } bind
                                        ] AGMCORE_&setcolorspace
                                        /sep_tint AGMCORE_gget AGMCORE_&setcolor
                                    }ifelse
                                    currentdict imageormask_sys
                                }{
                                    currentdict
                                    Operator /imagemask eq{
                                        imageormask_sys
                                    }{
                                        sep_image_lev1_sep
                                    }ifelse
                                }ifelse
                            }{
                                Operator/imagemask ne{
                                    invert_image_samples
                                }if
                                currentdict imageormask_sys
                            }ifelse
                        }{
                            currentoverprint not Name (All) eq or Operator/imagemask eq and{
                                currentdict imageormask_sys 
                                }{
                                currentoverprint not
                                    {
                                    gsave 
                                    knockout_unitsq
                                    grestore
                                    }if
                                currentdict consumeimagedata 
                            }ifelse
                        }ifelse
                    }ifelse
                }{
                    currentcolorspace 0 get /Separation ne{
                        [/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
                        /sep_tint AGMCORE_gget setcolor
                    }if
                    currentoverprint 
                    MappedCSA 0 get /DeviceCMYK eq and 
                    Name AGMCORE_IsSeparationAProcessColor not and
                    Name inRip_spot_has_ink not and 
                    Name (All) ne and {
                        imageormask_l2_overprint
                    }{
                        currentdict imageormask
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
        cleartomark restore
    }ifelse
    currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
    end
    end
}def
/decode_image_sample
{
    4 1 roll exch dup 5 1 roll
    sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
    mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
    1 dict begin
    /dataSource xdf
    [
        0 1 dataSource length 1 sub {
            dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
            /exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
        } for
    ] cvx bind
    end
} bdf       
/devn_alt_datasource
{
    11 dict begin
    /convProc xdf
    /origcolorSpaceElemCnt xdf
    /origMultipleDataSources xdf
    /origBitsPerComponent xdf
    /origDecode xdf
    /origDataSource xdf
    /dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
    /DataSource origMultipleDataSources
        {
            [
            BitsPerComponent 8 idiv origDecode length 2 idiv mul string
            0 1 origDecode length 2 idiv 1 sub
                {
                dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
                origDataSource exch get 0 () /SubFileDecode filter
                BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
                }for 
            ]bind cvx
        }{origDataSource}ifelse 0 () /SubFileDecode filter def      
    [
        origcolorSpaceElemCnt string
        0 2 origDecode length 2 sub
            {
            dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
            1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
            }for
        /convProc load /exec cvx
        origcolorSpaceElemCnt 1 sub -1 0
            {
            /dup cvx 2 /add cvx /index cvx
            3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
            }for
    ]bind cvx 0 () /SubFileDecode filter
    end
} bdf
/devn_imageormask
{
    /devicen_colorspace_dict AGMCORE_gget begin
    CSA map_csa
    2 dict begin
    dup
    /srcDataStrs [ 3 -1 roll begin
        currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
        {
            Width Decode length 2 div mul cvi
            {
                dup 65535 gt {1 add 2 div cvi}{exit}ifelse
            } loop
            string
        } repeat
        end ] def
    /dstDataStr srcDataStrs 0 get length string def
    begin
    SkipImageProc {
        currentdict consumeimagedata
    }
    {
        save mark 
        AGMCORE_producing_seps not {
            level3 not {
                Operator /imagemask ne {
                    /DataSource [ [
                        DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
                        colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
                        devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def             
                    /MultipleDataSources true def
                    /Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
                } if
            }if
            currentdict imageormask
        }{
            AGMCORE_host_sep{
                Names convert_to_process {
                    CSA get_csa_by_name 0 get /DeviceCMYK eq {
                        /DataSource
                            Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
                            DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
                            4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
                            devn_alt_datasource
                        filter_cmyk 0 () /SubFileDecode filter def
                        /MultipleDataSources false def
                        /Decode [1 0] def
                        /DeviceGray setcolorspace
                        currentdict imageormask_sys
                    }{
                        AGMCORE_report_unsupported_color_space
                        AGMCORE_black_plate {
                            /DataSource
                                DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
                                CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
                                devn_alt_datasource
                            /MultipleDataSources false def
                            /Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
                            currentdict imageormask_sys
                        }
                        {
                            gsave 
                            knockout_unitsq
                            grestore
                            currentdict consumeimagedata 
                        } ifelse
                    } ifelse
                }
                {   
                    /devicen_colorspace_dict AGMCORE_gget /names_index known {
                        Operator/imagemask ne{
                            MultipleDataSources {
                                /DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
                                /MultipleDataSources false def
                            }{
                                /DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
                            } ifelse
                            invert_image_samples
                        } if
                        currentdict imageormask_sys
                    }{
                        currentoverprint not Operator/imagemask eq and{
                            currentdict imageormask_sys 
                            }{
                            currentoverprint not
                                {
                                gsave 
                                knockout_unitsq
                                grestore
                                }if
                            currentdict consumeimagedata 
                        }ifelse
                    }ifelse
                }ifelse
            }{
                currentdict imageormask
            }ifelse
        }ifelse
        cleartomark restore
    }ifelse
    currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
    end
    end
    end
}def
/imageormask_l2_overprint
{
    currentdict
    currentcmykcolor add add add 0 eq{
        currentdict consumeimagedata
    }{
        level3{             
            currentcmykcolor 
            /AGMIMG_k xdf 
            /AGMIMG_y xdf 
            /AGMIMG_m xdf 
            /AGMIMG_c xdf
            Operator/imagemask eq{
                [/DeviceN [
                AGMIMG_c 0 ne {/Cyan} if
                AGMIMG_m 0 ne {/Magenta} if
                AGMIMG_y 0 ne {/Yellow} if
                AGMIMG_k 0 ne {/Black} if
                ] /DeviceCMYK {}] setcolorspace
                AGMIMG_c 0 ne {AGMIMG_c} if
                AGMIMG_m 0 ne {AGMIMG_m} if
                AGMIMG_y 0 ne {AGMIMG_y} if
                AGMIMG_k 0 ne {AGMIMG_k} if
                setcolor            
            }{  
                /Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
                [/Indexed               
                    [
                        /DeviceN [
                            AGMIMG_c 0 ne {/Cyan} if
                            AGMIMG_m 0 ne {/Magenta} if
                            AGMIMG_y 0 ne {/Yellow} if
                            AGMIMG_k 0 ne {/Black} if
                        ] 
                        /DeviceCMYK {
                            AGMIMG_k 0 eq {0} if
                            AGMIMG_y 0 eq {0 exch} if
                            AGMIMG_m 0 eq {0 3 1 roll} if
                            AGMIMG_c 0 eq {0 4 1 roll} if                       
                        }
                    ]
                    255
                    {
                        255 div 
                        mark exch
                        dup dup dup
                        AGMIMG_k 0 ne{
                            /sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop      
                            counttomark 1 roll
                        }{
                            pop
                        }ifelse
                        AGMIMG_y 0 ne{
                            /sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop      
                            counttomark 1 roll
                        }{
                            pop
                        }ifelse
                        AGMIMG_m 0 ne{
                            /sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop      
                            counttomark 1 roll
                        }{
                            pop
                        }ifelse
                        AGMIMG_c 0 ne{
                            /sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop       
                            counttomark 1 roll
                        }{
                            pop
                        }ifelse
                        counttomark 1 add -1 roll pop
                    }
                ] setcolorspace
            }ifelse
            imageormask_sys
        }{
    write_image_file{
        currentcmykcolor
        0 ne{
            [/Separation /Black /DeviceGray {}] setcolorspace
            gsave
            /Black
            [{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
            cvx modify_halftone_xfer
            Operator currentdict read_image_file
            grestore
        }if
        0 ne{
            [/Separation /Yellow /DeviceGray {}] setcolorspace
            gsave
            /Yellow
            [{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
            cvx modify_halftone_xfer
            Operator currentdict read_image_file
            grestore
        }if
        0 ne{
            [/Separation /Magenta /DeviceGray {}] setcolorspace
            gsave
            /Magenta
            [{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
            cvx modify_halftone_xfer
            Operator currentdict read_image_file
            grestore
        }if
        0 ne{
            [/Separation /Cyan /DeviceGray {}] setcolorspace
            gsave
            /Cyan 
            [{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
            cvx modify_halftone_xfer
            Operator currentdict read_image_file
            grestore
        } if
                close_image_file
            }{
                imageormask
            }ifelse
        }ifelse
    }ifelse
} def
/indexed_imageormask
{
    begin
        save mark 
        currentdict
        AGMCORE_host_sep{
            Operator/knockout eq{
                /indexed_colorspace_dict AGMCORE_gget dup /CSA known {
                    /CSA get get_csa_by_name
                }{
                    /Names get
                } ifelse
                overprint_plate not{
                    knockout_unitsq
                }if
            }{
                Indexed_DeviceN {
                    /devicen_colorspace_dict AGMCORE_gget /names_index known {
                        indexed_image_lev2_sep
                    }{
                        currentoverprint not{
                            knockout_unitsq
                        }if
                        currentdict consumeimagedata
                    } ifelse
                }{
                    AGMCORE_is_cmyk_sep{
                        Operator /imagemask eq{
                            imageormask_sys
                        }{
                            level2{
                                indexed_image_lev2_sep
                            }{
                                indexed_image_lev1_sep
                            }ifelse
                        }ifelse
                    }{
                        currentoverprint not{
                            knockout_unitsq
                        }if
                        currentdict consumeimagedata
                    }ifelse
                }ifelse
            }ifelse
        }{
            level2{
                Indexed_DeviceN {
                    /indexed_colorspace_dict AGMCORE_gget begin
                }{
                    /indexed_colorspace_dict AGMCORE_gget begin
                    CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
                        [/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
                        setcolorspace
                    } if
                    end
                } ifelse
                imageormask
                Indexed_DeviceN {
                    end
                } if
            }{ 
                Operator /imagemask eq{
                    imageormask
                }{
                    indexed_imageormask_lev1
                }ifelse
            }ifelse
        }ifelse
        cleartomark restore
    currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
    end
}def
/indexed_image_lev2_sep
{
    /indexed_colorspace_dict AGMCORE_gget begin
    begin
        Indexed_DeviceN not {
            currentcolorspace 
            dup 1 /DeviceGray put
            dup 3
            currentcolorspace 2 get 1 add string
            0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
            {
            dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
            }for 
            put setcolorspace
        } if
        currentdict 
        Operator /imagemask eq{
            AGMIMG_&imagemask
        }{
            use_mask {
                level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
            }{
                AGMIMG_&image
            }ifelse
        }ifelse
    end end
}def
  /OPIimage
  {
    dup type /dicttype ne{
        10 dict begin
            /DataSource xdf
            /ImageMatrix xdf
            /BitsPerComponent xdf
            /Height xdf
            /Width xdf
            /ImageType 1 def
            /Decode [0 1 def]
            currentdict
        end
    }if
    dup begin
        /NComponents 1 cdndf
        /MultipleDataSources false cdndf
        /SkipImageProc {false} cdndf
        /HostSepColorImage false cdndf
        /Decode [
                0 
                currentcolorspace 0 get /Indexed eq{
                    2 BitsPerComponent exp 1 sub
                }{
                    1
                }ifelse
        ] cdndf
        /Operator /image cdndf
    end
    /sep_colorspace_dict AGMCORE_gget null eq{
        imageormask
    }{
        gsave
        dup begin invert_image_samples end
        sep_imageormask
        grestore
    }ifelse
  }def
/cachemask_level2
{
    3 dict begin
    /LZWEncode filter /WriteFilter xdf
    /readBuffer 256 string def
    /ReadFilter
        currentfile
        0 (%EndMask) /SubFileDecode filter
        /ASCII85Decode filter
        /RunLengthDecode filter
    def
    {
        ReadFilter readBuffer readstring exch
        WriteFilter exch writestring
        not {exit} if
    }loop
    WriteFilter closefile
    end
}def
/cachemask_level3
{
    currentfile
    <<
        /Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
        /DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
        /Intent 1
    >>
    /ReusableStreamDecode filter
}def
/spot_alias
{
    /mapto_sep_imageormask 
    {
        dup type /dicttype ne{
            12 dict begin
                /ImageType 1 def
                /DataSource xdf
                /ImageMatrix xdf
                /BitsPerComponent xdf
                /Height xdf
                /Width xdf
                /MultipleDataSources false def
        }{
            begin
        }ifelse
                /Decode [/customcolor_tint AGMCORE_gget 0] def
                /Operator /image def
                /HostSepColorImage false def
                /SkipImageProc {false} def
                currentdict 
            end
        sep_imageormask
    }bdf
    /customcolorimage
    {
        Adobe_AGM_Image/AGMIMG_colorAry xddf
        /customcolor_tint AGMCORE_gget
        <<
            /Name AGMIMG_colorAry 4 get
            /CSA [ /DeviceCMYK ] 
            /TintMethod /Subtractive
            /TintProc null
            /MappedCSA null
            /NComponents 4 
            /Components [ AGMIMG_colorAry aload pop pop ] 
        >>
        setsepcolorspace
        mapto_sep_imageormask
    }ndf
    Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
    /customcolorimage
    {
        Adobe_AGM_Image/AGMIMG_override false put
        current_spot_alias{dup 4 get map_alias}{false}ifelse
        {
            false set_spot_alias
            /customcolor_tint AGMCORE_gget exch setsepcolorspace
            pop
            mapto_sep_imageormask
            true set_spot_alias
        }{
            AGMIMG_&customcolorimage
        }ifelse         
    }bdf
}def
/snap_to_device
{
    6 dict begin
    matrix currentmatrix
    dup 0 get 0 eq 1 index 3 get 0 eq and
    1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
    {
        1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
        0 0 transform
        AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
        AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
        itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
        1 1 transform
        AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
        AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
        itransform /AGMIMG_urY exch def /AGMIMG_urX exch def            
        [AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
    }{
    }ifelse
    end
} def
level2 not{
    /colorbuf
    {
        0 1 2 index length 1 sub{
            dup 2 index exch get 
            255 exch sub 
            2 index 
            3 1 roll 
            put
        }for
    }def
    /tint_image_to_color
    {
        begin
            Width Height BitsPerComponent ImageMatrix 
            /DataSource load
        end
        Adobe_AGM_Image begin
            /AGMIMG_mbuf 0 string def
            /AGMIMG_ybuf 0 string def
            /AGMIMG_kbuf 0 string def
            {
                colorbuf dup length AGMIMG_mbuf length ne
                    {
                    dup length dup dup
                    /AGMIMG_mbuf exch string def
                    /AGMIMG_ybuf exch string def
                    /AGMIMG_kbuf exch string def
                    } if
                dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
            }
            addprocs
            {AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage   
        end
    } def           
    /sep_imageormask_lev1
    {
        begin
            MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
                {
                    255 mul round cvi GrayLookup exch get
                } currenttransfer addprocs settransfer
                currentdict imageormask
            }{
                /sep_colorspace_dict AGMCORE_gget/Components known{
                    MappedCSA 0 get /DeviceCMYK eq{
                        Components aload pop
                    }{
                        0 0 0 Components aload pop 1 exch sub
                    }ifelse
                    Adobe_AGM_Image/AGMIMG_k xddf 
                    Adobe_AGM_Image/AGMIMG_y xddf 
                    Adobe_AGM_Image/AGMIMG_m xddf 
                    Adobe_AGM_Image/AGMIMG_c xddf 
                    AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
                        {AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
                        currentdict imageormask
                    }{ 
                        currentcolortransfer
                        {AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
                        {AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
                        {AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
                        {AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
                        setcolortransfer
                        currentdict tint_image_to_color
                    }ifelse
                }{
                    MappedCSA 0 get /DeviceGray eq {
                        {255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
                        currentdict imageormask
                    }{
                        MappedCSA 0 get /DeviceCMYK eq {
                            currentcolortransfer
                            {255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
                            setcolortransfer 
                            currentdict tint_image_to_color
                        }{ 
                            currentcolortransfer
                            {pop 1} exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
                            setcolortransfer 
                            currentdict tint_image_to_color
                        }ifelse
                    }ifelse
                }ifelse
            }ifelse
        end
    }def
    /sep_image_lev1_sep
    {
        begin
            /sep_colorspace_dict AGMCORE_gget/Components known{
                Components aload pop
                Adobe_AGM_Image/AGMIMG_k xddf 
                Adobe_AGM_Image/AGMIMG_y xddf 
                Adobe_AGM_Image/AGMIMG_m xddf 
                Adobe_AGM_Image/AGMIMG_c xddf 
                {AGMIMG_c mul 1 exch sub}
                {AGMIMG_m mul 1 exch sub}
                {AGMIMG_y mul 1 exch sub}
                {AGMIMG_k mul 1 exch sub}
            }{ 
                {255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
                {255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
                {255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
                {255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
            }ifelse
            AGMCORE_get_ink_data currenttransfer addprocs settransfer
            currentdict imageormask_sys
        end
    }def
    /indexed_imageormask_lev1
    {
        /indexed_colorspace_dict AGMCORE_gget begin
        begin
            currentdict
            MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
                {HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
                imageormask
            }{
                MappedCSA 0 get /DeviceGray eq {
                    {HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
                    imageormask
                }{
                    MappedCSA 0 get /DeviceCMYK eq {
                        currentcolortransfer
                        {4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
                        {4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
                        {4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
                        {4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
                        setcolortransfer 
                        tint_image_to_color
                    }{ 
                        currentcolortransfer
                        {pop 1} exch addprocs 4 1 roll
                        {3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
                        {3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
                        {3 mul HiVal mul round cvi      Lookup exch get HiVal div} exch addprocs 4 1 roll
                        setcolortransfer 
                        tint_image_to_color
                    }ifelse
                }ifelse
            }ifelse
        end end
    }def
    /indexed_image_lev1_sep
    {
        /indexed_colorspace_dict AGMCORE_gget begin
        begin
            {4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
            {4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
            {4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
            {4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
            AGMCORE_get_ink_data currenttransfer addprocs settransfer
            currentdict imageormask_sys
        end end
    }def
}if
end
systemdict /setpacking known
{
    setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">File to test web and exerquiz packages</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Stat Matching Game</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>D. P. Story</rdf:li>
            </rdf:Seq>
         </dc:creator>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2006-10-22T16:42:57+02:00</xap:CreateDate>
         <xap:ModifyDate>2006-10-22T16:42:57+02:00</xap:ModifyDate>
         <xap:MetadataDate>2006-10-22T16:42:57+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>244</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEAyADIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAyAAAAAEA&#xA;AQDIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA9AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7bqv/HWtf+M8f/ExhQzz&#xA;Al2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kvl&#xA;n80/+Otf/wDGab/iZzBy83s+zvpHuD2rVf8AjrWv/GeP/iYzPeLZ5gS7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXy9+aNpcm71G7EZ+rJcyxtL2D&#xA;liQv3Zg5Q9j2fIVEdaey6r/x1rX/AIzx/wDExme8azzAl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kvnb8yVmGg66wlAhbUwGiIIJZedCDyodmNRw&#xA;28R3w8nIvVaCuOH9V6bqv/HWtf8AjPH/AMTGZryjPMCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+c/zKMZ0bXAZE5jUgVi+EyUIk5MK/EF6A0zD&#xA;yci9XoPrj/V/U9Q1X/jrWv8Axnj/AOJjM15NnmBLsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVfOn5kTKuieYYvUCs+pxN6RIDMFE+4FKmlfHMPJyL&#xA;1egHrgf6P6np+q/8da1/4zx/8TGZrybPMCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+WfzT/wCOtf8A/Gab/iZzBy83s+zvpHuD2rVf+Ota/wDG&#xA;eP8A4mMz3i2eVwJdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVd&#xA;XFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV81edPLus6/5mvNP0m1e6uXml+FdlUepTk7H4VX3O&#xA;YU4kmg9bpc8MWMSkaFPWNW/46tt/xnj/AOJjM55FnVcCXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXV&#xA;xV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVUbWztLUOLaF&#xA;YvUYySFRQszGpZj3OIDKUzLmWF6t/wAdW2/4zx/8TGFgziuBLq4q6uKurirq4q6uKurirq4q6uKu&#xA;rirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirB9X&#xA;/wCOpbf8Z4/+JjChm1cCXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1c&#xA;VdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVUbu9trSBp7iQRxr1J/UB3xVh+r/APHUt/8A&#xA;jPH/AMTGFDM64Eurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKur&#xA;irq4q6uKurirq4q6uKurirq4q6uKurirq4qw7zfI7MQxJABoOw6YULNY/wCOnb/8Zo/+JjFWZVwJ&#xA;dXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVx&#xA;V1cVdXFXVxV1cVdXFXVxVh3mz7TfI/wwoa1j/jp2/wDxmj/4mMVZfXAl1cVdXFXVxV1cVdXFXch4&#xA;4q7kPHFXchirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6&#xA;uKurirEfNn2j8j/DChrWf+Onb/8AGZP+JDFWW1wJdXFWi4HU0xVTa4HYVxVYZnPenyxVaWY9STir&#xA;qN4HFXUbwOKu3HY4q4Ow6E4quE7jrviqos6nrtiq8MD0OKt1xV1cVdXFXVxV1cVdXFXVxV1cVdXF&#xA;XVxV1cVdXFXVxV1cVdXFXVxV1cVYn5r+0fkf4YUNaz/x0oP+Myf8SGKsqLACpOBKk0x6L9+KrKlj&#xA;4nFVwj8Tiq4Kg7VxVcCB0xV3LFXcsVdyxVxIPUVxVaUQ+2KrCh7b4q0GZTsaHFVRZgdm298VVK4q&#xA;6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirq4qxXzX1PyP8ADChrWjTUYD4TJ/xI&#xA;YqyFnLHfAltVJ3PTFVQUHTFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXEA9cVU2Uj5Yq5JCvuPDFVZ&#xA;XDCoxVuuKurirq4q6uKurirq4q6uKurirq4q6uKurirq4q6uKurirF/NXU/6p/hhQt1z/joQ/wDG&#xA;VP8AiQxVkKDucCV9cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVU2FNx0xVyuVNRiqurh&#xA;hUYq3XFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFWM+av+NT/AAwoW65/x0If+Mqf8SGK&#xA;shqMCXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxVcaEU7YqoHY0xVtH4n274qiAwIqM&#xA;VdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVY55p/41P8MKFuuf73w/8ZU/4kMVT2uBLq4q&#xA;6uKt1xVuuKurirq4q6uKurirq4q6uKurirq4q2pxVuuKqcvUHFVOuKqkUn7J+jFVauKurirq4q6u&#xA;Kurirq4q6uKurirq4q6uKurirq4qx7zT0/2J/hhQ1rSO2oRBQWPqKaDfYNXFU55YEt1xV1cVdXFW&#xA;wcVdXFXVxV1cVdXFXVxV1cVdXFXVxVdWgxVsNiq191IxVRrirq4qiFfkoOKt1xV1cVdXFXVxV1cV&#xA;dXFXVxV1cVdXFXVxV1cVSDzR0/2J/hhQmlQZGeg5N1OKrq4pbBwK6uFXVxVsHArdcKurirq4q6uK&#xA;urirq4q6uKtrucVczb0wK5W7Yq3XCqk+zYFW1xVfC+5HjhVWrirq4q6uKurirq4q6uKurirq4q6u&#xA;Kurirq4qkXmjoP8AVP8ADFCY1xVcDirYOBW64VdXFW64FdXCrq4q3gV2KW8VaxQ6uFVymgriq2uK&#xA;tcqHAlfXChbJuK+GKqRwK5WowOFURXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxVJfM/wBkf6n9&#xA;MVRkk0USc5XWNKgcmIUVJoBU+JwMgCeSpXCxbBxSurihwOKW64odXFWwcUurih1cVdXFXVxV3XFK&#xA;5iaUGKFtD4Yq1Q+GKVwJpvih1cVUTsaYq0TilXRqqMULq4q6uKurirq4q6uKurirq4q6uKurirq4&#xA;qk/mf7I/1P6Yq8h80a7qeo+ZdLW4mPoJe2/pwKSI1/ervx8fc5hSkTIPW6fTQx4pUN+E7/B7ZXM1&#xA;5NuuKt1xVsHFXVxVsHFW64q6uKuxV2KuriranFXFz2xVrmcVaMhxVwc1xVdXFVknjiqnXFVaJvgx&#xA;VdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFUp8zfYX/U/gMUPEtW/5SXTf+Y2D/k6uYB+oPaR/upf&#xA;1T9z3oHM94tuuKt1xVsHFXVxVuuKt1xVuuKurirq4q6uKurQYqtrirROKurirVcVXhqjFXNuKYqo&#xA;1xVViPwn54qvrirq4q6uKurirq4q6uKurirq4q6uKuriqV+ZvsL/AKn8BirxzWtNu01TSdRZQLaX&#xA;UYYozyHIssik/D1p75gkbj3vYwyDgnHrwn7nt1cznjmwcVdXFV1cVcDirdcVbrirYxVuuKurirqj&#xA;FXEjFVppirVcVarirY40364q7ko6HFXcx44q0fTr1xVclANumKrq4q6uKurirq4q6uKurirq4q6u&#xA;Kurirq4qlvmb+7X/AFP4DFXlvmB4VtdBjDI0smrq7AV5KEdBxau2/Ku305hHp73rMYPr/qPW65mv&#xA;Jtg4q4HFW64q3XFWwcVbrirdcVbGKuxVquKtE4q4nFWq4qtriricVarirVcVaJxVVj+wMVXVxV1c&#xA;VdXFXVxV1cVdXFXVxV1cVdXFXVxVAeZf7tf9T+AxV5drttGLHQ7gQj1H1tUM9N6AxnhXj9P2swiO&#xA;Xvesxy+sX/k/1vXPSOZrybYiOKuERxVv0jiq70jirhEcVb9I4q36RxVv08Vd6eKtekcVaMRxVxiO&#xA;KtekcVa9I4q0YjirXpHFWvSOKtGI4qriEgAYq70jirvSOKu9I4q70jirvSOKu9I4q70jirvSOKu9&#xA;I4q70jiqXeZf7tf9T+AxV49rGqXkuq6NpjMPqkGowyxoFUHm8qgksByP0nMEncDzexhjAhOXUxP3&#xA;PeBFmc8e36WKt+jirYixVv0sVb9HFWxFirvSxVv0sVd6WKu9LFWvSxVr0cVaMWKtejirXo4q0YsV&#xA;d6WKuSCrDFVf0cVd6OKu9HFXejirvRxV3o4q70cVd6OKu9HFXejirvRxVIfNAoAP8k/wxQ8U1EV8&#xA;1aUP+X63/wCTy5gH6g9pH+6l/VP3Po70fbM94xv0fbFWxF7Yq36PtirvS9sVb9L2xVv0cVb9L2xV&#xA;3pYq70sVd6XtirXo4q16XtirvRxVr0vbFWjF7Yq16PtirXo+2KqkUG1adcVVPR9sVd6PtirvR9sV&#xA;d6PtirvR9sVd6PtirvR9sVd6PtirvR9sVd6PtirvR9sVYr5rFCR/kn+GKE0k/wCVWfW4vU/Qf1v1&#xA;F9Dl9T9T1Kjhwr8XLl0plXp8nOH5mj9df5zJf9F/4r/DLHCd/ov+R+GKu/0X/I/DFW/9G/yPwxV3&#xA;+jf5H4Yq7/R/8j8MVd/o/wDkfhirv9H/AMj8MVd/o/8Akfhirv8AR/8AI/DFXf6P/kfhirv9H/yP&#xA;wxV3+j/5H4Yq7/Rv8j8MVd/o3+R+GKtf6L/kfhirv9F/yPwxV3+i/wDFf4YquHoU240+jFXfuf8A&#xA;J/DFXfuf8n8MVd+5/wAn8MVd+5/yfwxV37n/ACfwxV37n/J/DFXfuf8AJ/DFXfuf8n8MVd+5/wAn&#xA;8MVd+5/yfwxV37n/ACfwxVB3f6Br/pf1Wvf1vT/42xV//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:CAC6C969DB61DB11885DDE2828C3F7EA</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:CBC6C969DB61DB11885DDE2828C3F7EA</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:C9C6C969DB61DB11885DDE2828C3F7EA</stRef:instanceID>
            <stRef:documentID>uuid:C8C6C969DB61DB11885DDE2828C3F7EA</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Keywords>LaTeX, hyperref, PDF, exercises, quizzes</pdf:Keywords>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -576.004 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 576.004 li
612 576.004 li
612 0 li
cp
clp
[1 0 0 1 0 0 ] concat
611.712 576 mo
365.634 576 li
378.176 550.931 386.199 523.232 388.645 493.961 cv
388.965 493.979 389.255 493.999 389.511 494.019 cv
389.511 483.687 li
389.27 483.687 li
389.382 480.768 389.439 477.831 389.439 474.885 cv
389.439 349.29 287.019 247.473 160.668 247.473 cv
98.055 247.473 41.31 272.484 0 313.011 cv
0 576 li
0 119.349 li
611.712 119.349 li
611.712 576 li
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[-1.99609e-5 -456.652 456.652 -1.99609e-5 305.858 576.004 ] concat
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.960784 .960784 .964706 ]
/C1 [.960784 .960784 .964706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.960784 .960784 .964706 ]
/C1 [.847059 .85098 .854902 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .85098 .854902 ]
/C1 [1 1 1 ]
/N 1 
>>
]
/Bounds [.00561798 .123596 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.99609e-5 -456.652 456.652 -1.99609e-5 305.858 576.004 ] concat
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~p%@tKo'u5<md9B,lKRNqkN:mej5T%Uhqm2EgY1?5f\"j/f\"m1g"G'3g=k97g=tB:gY:K<gt^]?gtgfB
h;-oDhVR,Ghr!>Khr!AMi8EPOiSibSiSieUio8tXj5]1[j5f:^jQ,C`jlPUcjlY^fk2tjikND$kkih6o
kih9ql07HslK[["lKdd%lg*m'm-O**m-X3-mHs</mdBN2n*f`6n*fc8nF5r:naZ/>naZ2@o()ACoCMSF
oCV\Io^qeKp%A"Np%J+Qp@e7Tp\4FVq"XXZq"X[\q>'j^qYL'bqYU0eqtp9gr;?Kjr;HTmrVc]orr2or
~>
<~p%@tKo'u5<md9E.lg!`ukN:mej5T%Vi8<DIgtUQ9g"G'3g"G*5g=k97gY:K;gY:N=gt^]?h;-oCh;-rE
hVR,Ghr!>Khr*GNi8EPPiSibSiSrkVio8tXj5]1[j5f:^jQ,C`jlPUcjlY^fk2tghkND$kkNM-nkih6p
l07Hsl0@R!lK[^$lg*m&m-O**m-O-,mHs<.mdBN2mdBQ4n*f`6nF5r:nF5u<naZ/>o()ABo()DDoCMSF
o^qeJo_%nMp%A"Op@e4Rp@n=Up\4FWq"XXZq"aa]q>'j_qYL'bqYU0eqtp9gr;?Kjr;HTmrVc]orr2or
~>
<~p@e1OoCDG@n*]W2m-Es$ki_*ijQ#7ZiS`VMh;$c=g=k97g=k<9gY:K;gt^]?gt^`Ah;-oChVR,GhVR/I
hr!>Khr*GNi8EPPiSibSiSrkVio8tXj5]1[j5f:^jQ,C`jlPUcjlY^fk2tghkND$kkNM-nkih6pl07Hs
l0@R!lK[[#lg*m&lg4!)m-O*+mHs<.mI'E1mdBN3n*f`6n*fc8nF5r:naZ/>naZ2@o()ABoCMSFoCMVH
o^qeJp%A"Np%A%Pp@e4Rp\4FVp\4IXq"XXZq>'j^q>'m`qYL'bqtp9fqtp<hr;?KjrVc]nrVc`prr2or
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
newpath
gsave % PSGState
365.634 576 mo
0 576 li
0 313.011 li
41.31 272.484 98.055 247.473 160.668 247.473 cv
287.019 247.473 389.439 349.29 389.439 474.885 cv
389.439 477.831 389.382 480.768 389.27 483.687 cv
366.552 483.687 li
314.052 354.948 li
304.018 304.401 239.391 265.401 161.154 265.401 cv
161.154 265.401 li
161.154 265.401 li
75.969 265.401 6.903 311.643 6.903 368.685 cv
6.903 368.685 li
6.903 368.685 li
6.903 368.685 li
6.903 425.736 75.969 471.978 161.154 471.978 cv
188.328 471.978 213.862 467.272 236.035 459.013 cv
228.303 477.918 li
226.611 481.77 226.611 482.247 219.843 482.967 cv
213.804 483.687 212.841 483.687 207.522 483.687 cv
203.166 483.687 li
203.166 494.019 li
209.457 493.542 223.947 493.542 230.967 493.542 cv
237.492 493.542 255.132 493.542 260.694 494.019 cv
260.694 483.687 li
255.375 483.687 246.186 483.687 239.418 481.041 cv
240.147 478.881 240.147 478.404 240.633 477.441 cv
250.746 452.78 li
255.031 450.729 259.149 448.537 263.091 446.211 cv
318.213 446.211 li
333.441 483.687 li
310.716 483.687 li
310.716 494.019 li
318.456 493.542 341.901 493.542 351.081 493.542 cv
358.484 493.542 381.412 493.542 388.645 493.961 cv
386.199 523.232 378.176 550.931 365.634 576 cv
313.857 435.879 mo
278.312 435.879 li
288.464 427.949 296.848 418.98 303.064 409.238 cv
313.857 435.879 li
clp
34.56 246.72 mo
34.56 313.92 li
107.04 313.92 li
107.04 246.72 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[72.48 0 0 67.2 34.56 262.084 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 151 
/Height 140 
/ImageMatrix[151 0 0 -140 0 140 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 151 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 151 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 151 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
K'S$SK'S$SK'S$SK'VplPNpfcX6YB'W9`4'OQuH'K'S$Shs7*'a6L>'K'Schm-92frp#4'K'U_J[Hb3c
c0KuIL?ng'K'MagQKs.g^$E]'V<Zq'K'S$So]q+oK'LbKZKo'eb3FTDM<as'K'VplPNmbb_!8i'W9`4'
K'IsQpZd_'hs7*'K'KQ)eE`Iem-92fK'ML`Sa4Se[H`A/T'GG'L?ng'K'IsQe`s='^$E]'K'IsQK'N!n
K'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'LYH[HY-ac0BoGL?ea%K'D[eQKj(e
^$<W%V<Qk%K'IsQo]h%ml04Z%K'Ko3b3>Vaip)-\K'MjjPNg`aX6P<%W9W.%OQlB%K'IsQhs.$%K'BK'
eEWCcm-0,dK'DF^Sa+Mc[HW;-T'>A%L?ea%K'@mOe`j7%^$<W%K'A9Zp?I7po]h%mK'C\IZKf!cb3=NB
M<Xm%K'MjjPNd\`_!/c%W9W.%K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'Dpl
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
o]^tlK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
K'DplK'@mOK'@mOK'@mOK'@mOK'@mOW9N(#OQc<#K'@mOhs$s#a6:2#K'AWdm-'&brof(#K'CSF[HP'_
c09iEL?\[#K';UcQKa"c^$3Q#V<He#K'@mOo]^tkl0+T#K'Bi1b35P_iou'ZK'DdhPN^Z_X6G6#W9N(#
K'7gMpZRS#hs$s#K'9E%eEN=am-'&bK';@\Sa"Ga[HN5+T'5;#L?\[#K'7gMe`a1#^$3Q#K'83Xp?@1n
o]^tkK':VGZK\pab34H@M<Og#K'DdhPN[V^_!&]#W9N(#K'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7sQ
rTAdqmH9f!K'9o3`oj2]hWTRTK';jjK'2C]Rco@e\`h3!U$(G!K'7gMnE?)!f]T=!K'9/sgZO[]oB:ei
K';+UV!#e]]]at2Qg!f!K'3-rL$4-PcKM\![cbp!K'7sQrTAdqK'1\IY3<R_`ohs:NT^$!K';jjK'.aK
dH@h!\`h3!K'/!RqWNOpnE?)!K'0r4_s"&_gZO1OK'2mkN9K0_V!!?mYNOF!Qg!f!K'.aKk3&<!cKM\!
K'/`gjlhH_rTAdqK'1\IY3<R_`ohs:K'.aKo]LhhK'.aK\`_,tU#t@tK'.aKnE6"tf]K6tK'0)qgZFU[
oB1_gK'2%SUuo_[]]Xn0Qfm_tK'*'pL$+'NcKDUt[cYitK'.mOrT8^omH0_tK'0i1`oa,[hWKLRK'2dh
K')=[Rcf:c\`_,tU#t@tK'.aKnE6"tK''l2_rmu]gZF+MK')giN9B*]Uum9kYNF?tQfm_tK'%[Ik2r5t
cKDUtK'&Zejl_B]rT8^oK'(VGY33L]`o_m8NTTrtK'2dhK'%[IdH7at\`_,tK'%pPqWEInnE6"tK''l2
_rmu]gZF+MK'%[Ihr^`ra5strK'&E^m,`i\roJjrK'(A@[H4jYc/sW?L?AHrK&uC]QKEe]^#m>rV<-Rr
K'%[Io]Cbel/eArK''W+b2o>YioYjTK')RbPNCHYX6,#rW92jrOQH)rK'%[Ihr^`ra5strK'&E^J,~>

%%EndBinary
grestore % PSGState
newpath % image
105.6 246.72 mo
105.6 281.28 li
284.16 281.28 li
284.16 246.72 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[178.56 0 0 34.56 105.6 294.724 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 372 
/Height 72 
/ImageMatrix[372 0 0 -72 0 72 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 372 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 372 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 372 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
K'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'Tr4bNa]EK'L2;_Wug>K'S$SK'S$Se*F7'K'IsQ
h!1g'K'S$Sjm.NaK'S?\q!*IrK'JTcn*>SkK'S$SK'S$SVX*('K'IsQYNjX'K'S$SK'S$SK'U8=_Wla<
K'LMD\a+k5K'S$SK'S$Sh!:m'K'IsQjm%H`K'S$SK'S$SPj@f'K'IsQSa,A'K'S$SK'S$SK'TW+eEVYN
K'IsQK'IsQ_<So'K'S$Sb3QV'K'IsQK'IsQK'M.VVsAs#K'VOaK'IsQK'IsQK'JTcn*>SkK'Sunk3@Q`
K'IsQK'IsQYNjX'K'S$S\Eh?'K'IsQK'IsQK'LMD\a+k5K'UnOYj-i*K'IsQK'IsQjm%H`K'S?\q!*Ir
K'IsQK'IsQSa,A'K'S$SVX*('K'IsQK'IsQK'Kl2bNjcGK'U8=_Wla<K'IsQK'IsQK'IsQK'IsQK'IsQ
jm%H_K'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQ
K'MI_K'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'Kl2bNXWCK'C,9_Wla<K'IsQK'IsQe*=1%
K'@mOh!(a%K'IsQjm%H_K'J9Zq!!CpK'ANan*5MiK'IsQK'IsQVX!"%K'@mOYNaR%K'IsQK'IsQK'L2;
_Wc[:K'CGB\a"e3K'IsQK'IsQh!1g%K'@mOjlqB^K'IsQK'IsQPj7`%K'@mOSa#;%K'IsQK'IsQK'KQ)
eEMSLK'@mOK'@mO_<Ji%K'IsQb3HP%K'@mOK'@mOK'D(TVs8m!K'MI_K'@mOK'@mOK'ANan*5MiK'Jol
k37K^K'@mOK'@mOYNaR%K'IsQ\E_9%K'@mOK'@mOK'CGB\a"e3K'LhMYj$c(K'@mOK'@mOjlqB^K'J9Z
q!!CpK'@mOK'@mOSa#;%K'IsQVX!"%K'@mOK'@mOK'Bf0bNa]EK'L2;_Wc[:K'@mOK'@mOK'@mOK'@mO
K'@mOjlqB]K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'DC]K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOjlqB]K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOK'DC]K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOjlqB]K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOK'DC]K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOjlqB]K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOK'DC]K'7gMMs0s#K'@mOK'@mOK'Aijk3.E\K'9)qh<BOUK'@mOK'@mO\EV3#
K'7gM_<Ac#K'@mOK'@mOK'CbKYip]&K';"RVs/ftK'DC]K'@mOMs:$#K'7gMPj%T#K'@mOK'@mOK'B/s
h<9ISK'9E%eEMSLK'@mOK'@mO_<HI~>

%%EndBinary
grestore % PSGState
newpath % image
-.480001 279.84 mo
-.480001 576.48 li
36 576.48 li
36 279.84 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[36.48 0 0 296.64 -.480001 -.476064 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 76 
/Height 618 
/ImageMatrix[76 0 0 -618 0 618 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 76 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 76 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 76 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
[HPp#SE]5#cfhb#[cu'#l0+T#d-7t%s65."lKP_?jlqK`roglUbNYY`jQM?^rTUlWb35M^j6>%WYir[^
am&3WQKZi^[H[SPK';Xd[HZZ6M<Og#]]mK#UZgY#f'0=#^$*K#nEH/#fBBX,pum=nK'7gMK'9)qK'7gM
cfhe"!9f$ul0,P<k3.K^s6$lSbikY^jlb%SZKSg^bNJ3SR-;u^[HIMPK';Rb[HHT6LZn[!]'%3!U$1M!
eE=%!]BI?!U?CM!e`a1!]][?!n*$#!f&sI)q<*@mnE74Chrfp\puoHU`TO)\hWWVUX677\`9?dU[HFs\
cKOKUS*/,\[HIVRK'2C][HQc9K'.aKK'1PE[H@JOK'2I_[H?Q5L?JNt\`V&tT]b@te)mmt]'%2tmH0_t
eE=7%qr`RomcV"?iTH'\qW>HQa605\i9&VQXlmC\`ocdQPNUQ\XQI7Z`TQdSP31EZ[HI;HK')Xd[HE/(
kiT;9kN7EZ!9^fRc/tSZk3(+SZf\aZbie9SRHDoZ[HIPOK')C][HHW5L?AHt\`_,tK'(PE[H7>KK')I_
[H6E1M!"Tr]B.,rU?:Fre`Esr]]R8rn)]erf&jC%q<!:knE..?hr]jZpuT6O`TF#ZhW<DOX6.1Z`9$RO
[H=mZcK49OS*&&Z[,naXc0"9QRcVoX[H@MNK&u:Z[H?T4L#r<r\E:urTB5.rdcRgr\`Lurm,jYre)e""
r8iOlmH(b<ioQ!XqrYNQaQ9/XiTA\QY3!=Xa6)jQ[H-9-MWOZp^#[2pUugLpfAs$p^?*>pn`5kpf]BO%
pZ7"go&[:?K&u4X[H-N4KB3*o[cG]pS`T"pd,_Op\)kiplK"ApdH.dsroJanlfFMpdc@gtrT&Rkm,YS9
j5c!Vr8kNOalK/VioS\OYN3=VaQ;jOQ/pKV[H78GK&lC][H6?-MWFTp^#d8pUu^FpfB'*p^?!8pn`@1=
hW3>M[H7/C^Z38nVW>/FcK(MVkMsnK[,e[Vc/\'KRcMiV[H%;JK&l4X[H$B0L#i6n\DtcnTB,(ndc7Un
\`Conm,OGne)[psr8`IjmGt\8ioGpVqr<:gmc1_9iT#dTqW,<Ma5`rTi8iJMXlI+T`oQXMPN19T[H.,C
K&cC][H-3)N8sZn^Z<>nVW5)FcJtGTkN'tM[,\UTc/e-M[Gp?/d,VOps5LNIbiA!K[H-H/dGhIl\Dtcl
lf+;ldc7aprSrLim,PM5j5YpTr8P<IalB)Tio8JIYN*7TaPuXIQ/gET[Gq&CK&c=[[Gp-)MW=Nl^#I&l
UuU@lMrONl^>m2lV;g@lf]0$l^Z*2lo&I.;[GoKlki8/lcf2@m!9/Uil/K,2k2M'Rs5UTKbi55Rjl=bK
ZJrCRbN%pK[Gg3+dc.[prSb<Gb2VdI[H$<+e)@^or8YBKal2XGQK$ER[Gh#BK&Z4X[Gg*(M;nBj]]$oj
UZ14jf&<aj^#I&jnDTSjfAa3spu6nbn`$t8hVsLRpYimG`8[ZR[GfEjSDr_jKAcgi[c5QjS`/_jd,MCj
\)GQjlJe5jdG_Lmro&Iflf#82jPbjPrSkBIb2K#Pj5SPIYi31Pal;^IQJp?P[Gq)A]AUchmbtS5iS`8E
[GguA]]-uin)1V4i8W>I[G^l>^#?ujnD^k6hr0LPpu&mE`SmZPhVd&EX5UhP`8L4E[GeOPcJ[pES)M]P
[GV&DK&PtQ[G^3+K]2sh\)>KhT&JehdGV=h\DbWhTA\ehdc%Ih\_tWhm,=;he)7Xmr8<1bmGPD2io#XN
qr,0GaP`fNiSi>GY2HtNa5QLGPi1-N[Ggr=^#-ifnDL_5hr!&C[G^i=^>[&gn_^b4hVm,G[GU`:^Ym&h
o&7"6[G]?hki&r,kMV!N!8k6Bc/>/Nk24PCZf&=Nbhq^CRGcKN[GUuAK&GtQ[GU''L>`$f\_kQfT]"kf
e).Cf]&:]fmGF5feDROf]AL]fmbjAfe_ddmqVQn^n)(P2i89FLq;AsE`o!TLhr*,EXP^bL`Sg:EP2FpL
[G^f9^YZodo&$k5[GK3dkhif+kMFPA[GLuB[c#Eel/&i*k2=VE[GLr@\)5EflJT),jknJC[G_&@\DGEd
lef,.jPJ>AZ/<+Lb22LAQf$9L[GLi=K&>tQ[GKp#Lu8*d]ACWdU>Oqde_[Id]\gcdn(s;df&*Ud^#$cd
nDBGdfA<pmptgVZn_U\2hVO4JpYWaC`87BJ[GT9dSDNGdcel+d[bf9dl/.rdd,)1fs4t0?bhhXA[GU*%
dG;4ernk6CbMDL?[GL!%dbhIgrSG*Ab2;RC[GBm"e)%Lir8"s?aklFA[GU!"eD7Ohqqo$CaPH:?[GKm"
e_ddjqVHh\n(tJ.i80@Jq;&a?`nmNJhqco?XPU\J`SL(?P2=jJ[GCT6K&6(T[G?Gkkh_fbceZ"c!8W7_
l.rc(k1t^Hs5(6Abh_U@!8b0?jPJ;@\)%)@rnY0Aakl@?\)%)@jPA>AZekZ9^>-]`n(k>,!8lhlg"`pi
pti[?s51rRo\?b.hVQi?s51KEo\I==_qsq?rnkEEg"kE=ZekZ<qV9'F^>8M=ZekW;i8!5FZeb3/_VY4J
`n^FGZea6ih;8%d^te>5a5+Dbptkl)_;*JpiSF:c^>8S@pY<sI\D@)=pYN[@pYNdB_;4_=p>3U@p>4uf
h;#?mp"f])_VOnAc.r'KZeb<2k2"hKp"mXBnD2%=o\RgJpYGJu`SC">jkShMZeb60rnPTMn_MCDqqSO6
oA8Q`j4s.[`n]q:aPHFDb2!!On(l%>dG<j=n_V=An(mosbhT\`rS@##aP?4>inW_PZeb--qqKNQZePQ:
[,(3-iS3\QZeX^!cJ@sGbhN'N\D59`l.tdac.h44dbM1bs5*8%c.g:omG,&(mG@WmfA!XeqVAa=m,$UR
n_:D*i8)o=m,$(Cp>!C;l.sP=le^"Cs4k$;cJ@X=lJBnBjkS2;[+t`<lJBqCb1u:;Zeam&s4c#WZeYQ9
lJ9eAkM>7Smb>)'k2$$le(j*Ae(a]R]A2N(jP91Yjk\D?hqZc;jk\>>qVCMoeD%psnD**\dbNp>r7foZ
inW&<p>!C;jPAhMo\8?[e_Aj6g"bWDf%]fOmbHCJ^teS;in`2?i8"1`h:o9ko\JulfA#3<i7n%]ZeXNq
q:jf]hqZi<nD(t;iSEDFr7\L3e_K';i8*,@m+]V9]A35;i8*/AdG*^9ZeY!)o%i'SgY:E9ZeY?3khY%J
^t\M9ZeXEn!8?8_ZeP--_;*l&k1]UaZeO0ggYCW@hV.GQ`S8,^p>"HZhV-N7hqPKmo%iWfhqGZrqV/@3
gYMh^j4^iombGh;gYLoDrn=^5f\HDZj4i5Ai7dJNb1kS(inOFdf\GH>ceIR9fA,9<lJ1g_iS(]os4c/\
hqQc<qV(2fZeO^!n(cjUf%f9=s4c,ZinDW2khF\Dj4`SKnD!!WZePN8fA,E?e(aZOm+Sf#jkTC]jP&&:
jP'Lc\_GWhpY,&hdbEj:iS2i9eD03>[+ag"b1kD#kLm2qd+dX9e(j->kM"27[bLi:dbO'>bhD:7ZeOa"
lJ1UVZe>E6[+j$arn6YkZeFNqceHk&l.Q!g\D#-\l.aV@lIk.Me(V._rnPuXlIj53mFno$jP9.Xle/Vu
qV/U9ceSENn_(8&i7lc9ceRj>pY*@8`S9k9cJ7d>gtLE7ZeP<2f%fWF_V4S7bhMF:h:qGRmFei"p"S*Q
le9P:pt>AoZeF0gn_<B`bM2I<n_1n7b1l[Ep=d[Dmb-4Go%NNbaP-"7b1l@;iS*MLmb+u$qqKHOn(Gb8
!86kpZeFBml.b[[a4g"8ptEC7akQjKo%D%:nCcXOf@n=#o%<Tf^tHWZn_2(=o%;[Lm+DBmn_(8&p=n$M
o@V"7!8@D)p"?\*gtV2Mo@V%8s4["ro@h%7a4pOEq:NX=s4[%sf\5-7`nU.<n(H=Grn?qr`S(=HqqCbt
`nU.<e_0KGrn?ts`7b4Gn_3Nfe_BcL`S(4DqUt_u`S1@Hn_2ULn([Nf`S(4Do@`Qcf\6A[n_1t:q:P]!
`7b+Co\%^Io@j2uo%M(;!8R;#lIjtGr7^er`S1=GptGW!`S1CJp=RaFp=]Ato\%4;rnI%um+^7Ks4mA$
`S(.BpY#T"`S1:Fo@hXIo\9E$pXmI<qqC_r`S1:Fp"A'Qm+VEmpXmL=qV(Yro%MUIr7gqu`S17E!8.,"
`S(+Ap=\*Pmb7Tnp=[F=r7h#!n(H=GqV(Yr`nL=Es4R2#`nL=Ept4-Mo%Eimpt3U>q:bSrn(QCIqqLr!
`S((@rn./$`S((@pY"*Nn_3lpq:N^?ptGPrm+L.HptGJq`nL:DrRh,%`S(%?qUj3Kp"B,opt<X?qV1r"
kh+bEp=];p`nC+?r7V&%`nL7Cr7B6Hq:PAnqUig@pY,Dqle:.Jq:ki!`n9t;qq/m@pY,Grd+\3Iq:kl"
`n9q:qq1)bi7[hXq:WdAptPc!rn,?Fo\',oc.VsHp=f>q`nL4BrR^,_j4O"Wr7K!Ap=fAr!8>KIpY5]!
ak6UFo@a&o`nC%=qUt#biS+%\rn#0Bo@a&orRo?Hp"K8qbhDsJpY5]!`n9n9rRg,_jk9:[qq9!Cp=oW!
q:O!Fo%EuoaP$UHo\02q`nL.@s4>9Co%Euodb4<Ho\02qa4g4@s4?Mfhq7JPrRf0Do@a2trRo3Ep"KJu
cIhsFn_*oo`nBt;r7UDigtMGU!8#6Cn_*rp!8,<Eo@j,qdG"?Ko\0Ata4Tn7rn-Gfi7[\TrRo3Eo\0H!
f\"<unCdioc.VsHo%O,r`nBq:jOiMFnCdioa4^":s4IA)ak?4<b1Q^Gn(I`na4^":s4HGdj4WtVa4Tk6
r7K6Gn(@]nb1ZaHn_2%9n(H^Qk1K.U!8,?FnCmclcIhR<aOoq6!8,?FnCljQlIWApmb%Tmqq96InCl%:
rn+[3c.V=6n(Pt:j4Mc3Ze5?4nCl(;ak5q3Ze=g$pt+$IZe560\Cp<(hUh5JZe49jdb4'Bbh)[C]@cK'
aP$"8cI`*JZe3^Zin<bRbh)+3bh0DXrRpSlc.C7nk1I#nmFqTlce#PV!8+X2mFp[Rl.<;pkLn,5m+Tb:
rn+[3c.V:5m+Tb:jOhi3Ze=^!cI^4klI`Jsle;9ge(:tZrRn[5le:@Mmanetj4Vi5le9\:qUiC3l.P%J
mF^[Vce%+-e_'*=cIi!Hn(H(>k1JVDn^k,"kh5d`f[o9<d+A$E^"DQ%hq.GNk1J&4h:U?3kh4D8o[gn1
_q=P4kLn;7g=P*2Ze5!)o%DLCj4D]1Ze,92kh4G9ak,k1Ze4Ho!7oZNZe,0.\Cfrsk18tO[+F<idb*^8
eCOHI]@Y-Vm+CIReCNO/e^q.[r7UDheCMUjn(4r!jk9U`f[dF]pt373jk8\Fo@C8"hUpE3jk828p"-t1
`7XS3jk828gXk-1Ze5'+mb-.A_:S;1[+OHmqUXHQ[+Fs&^t@`$i7@YRZe*p`g=YK>f%0BC_q2]Vo[r6X
f%/I)h:LZ=eCX9Dn^uFD^"<&2iRl]4iRmnUiRZo<f@KBA`n02%f@Jj2f@K`K][u,pkLK1SZe"!bf%8m5
g"#cH^Xg?TnCQXOg""j.g"*O^pXnc`g"!pio[^A#i7S%Zgsrd_o[gn1i7R,@pXQV$g=P'1i7Qc6n^bV/
^t851i7Qc6f@Jd/Ze+j%mF^.C^"2r/[+F3fqpjWT[+=`u`7No!iRRhUZe!^ZhUgZ;gXY]Ba4@oTpt+EU
gXXd(iRY?enC[6_gXWjcqpr+*hq7_SjOLTfmFTG2hUp]8rmeC,db!L1hUpT5lIO/0gt131hUpW6o@Cb/
_UnA1hUpW6g"+p/Ze+p'l.FeA^Xi)/gt192gt2SVhUU?2gstrG_q*Vpjja.VZdm[Yh:CB5hULuD`mqcR
pt"3OhUL'*i753cnCR$YhUK-eqpi%(gXlAQj4(HdmFK>/gXkH7rm\:)e(3L/gXk?4lIF&-\^pZ/gXk?4
d+.4-Ze"Nqn(6IH[akB-Ze!m_q:+TWZdn?lbLYD!hpf!_d+7=0g=P63kLIi-[atK0g=P63c.2%.Ze"Bm
o%2dKf@Aa.Ze"a"kh"bB][cf-Ze!j^!7]uWZdnQr`7EYok1':XZdmXXhU^E4i7./Ea47iRpt"0Ni7-6+
iRP9cnCR!Xi7,<fqpi()g"62PjOCNdmFLXThUU90j4+(Xf%&^.dFI:-f[f'2kg[i+\(1H-f[f'2cID"+
[+4HmmagCH[+#**[+3dZqU=]XZde3hc.1Fsim[qW[FELPkLJ28im[#=d+#DPf@Js1bLGh,Zdn6in^c^K
[+,**[aj!\pXAKX[++0ed+-b!j3t?ama]>-f@K-6rR8+&eCEL-f@K!2ldX&+]%-Z-f@K!2dF@4+ZdnKp
lIP"E\((B+Zdm[YrmU#YZde<kajo"ojO4+XZddCQj42c4j4!5Abga,PrRKNNj3u<'k1$`fldkISj3tBb
!7\@*f@KiJl-lugkgdo-f@K!2s4"I+cIM(-f@K'3j3uE)Zd]!*f%&m1aj]S)Zde-fnC?XKZd\m&\(&sY
psSTYZd[sadF?^sjjO"S]$ndNldXJ8jjN)9eC2mriRHE.jjNGCb1!oNqpa0HjjMN)jO:HbmFCIOjjLTd
rmS4'e^a]JkL-]clI<u+e^`d0Zd[:NjOD`1jjN>@c-s,Nrm]KKjjME&kL6celIG7Oj3tEcs4"C*f@KlK
kgQlfl.*u-f@K!2!7\C*cdh.-f@K!2k1%]+[FP<-f@Jp1cIM(-[+=Non(6OJ[+,0,[+<m]q:+ZYZdn9j
c.:P!iRInX[FNRRk185;hppo@c.9>Ts4>uWhpp!&kLR#ll.GRZhpp?0h:Asbo@W9ZhpoEkpXZ_'g=QDV
hU]'co%:h3gtCi@psue'g">*4gtCN7nCPV1^Y&84gtCH6gXuMWhUf-eo%E?^gXj0lpXlh*hV.q[hq,3e
o%Cq6hV.#Aq:Dt*f\,*6hV-Z8n_*<_g"=$lpY"EWg"=p0hV#6ho@r]fg"=!kpXuq-i7n+\i7PBhn_1q8
i7m2Cpt=QYf@ed0hV-oBf@fZI`7hu\p=nT^f@ea/hV,?ko%`cjf@dgjptE+0inX:^hqI&De_9NI`7s>-
e_7@ar7nj<jPB"Qn(P,&inVu;jk\J@q:iO9aP?.;jk\D?j4s[he_@Fcr8$Yoe(_pumG,&(kMH3mf%[Od
qq\g=kMG:SnCt;)iSDu=kMFVAqVCModG2dumG6s^dG3[9eD7IfrSR#"dG2atmbP5+l/2Boe_TEFce\HS
]&)]/iSEtYkMFP@i82u?l/0eBqVJj@aPZ@Alep(Ei83#@Zet]=nDMOIlJLLUmbY>.leqQpe_]TKbhi3R
]&2l4hVR_XZesd#e)9WPbhi0Q]AMu5aPcLFcJSTXm,6%Dm,.m$khtIYmbu=Gm,.m$bMV[E!8l)[r8@#%
b2;RD!8lttj5B@arntoWnDaK*bhqdF!8l&ZrS[,&rntoWnDXH*k2>=Ymbn0'al)UGrntoWnDXH*bi&HX
n)49(aPcOGrnutuj5KLe!8klUn)=9(!9))ZnDaB)cf4i]o&B`-aPcOGrnuqtj5KOfr8GcWo&K`-s5D,Z
n`'Q+bi/NZn`'K*aPugOrSZhsjPfXgrSYfVn`'K*!92,[oAff-bi/Q[n`'K*aPugOqVp`!iT'UlrSYfV
n`'H)!92/\oAf],cK"f^p#Q#/al;pPqr-\sjPodkq;TNVp#Q#/s5M2\o],i-bi8T\o],c,alE'Tqr-Yr
jPoglq;TNVp#Po.!9;2^pZ;;2bMrN\o],c,aQ*!TpZ(JuioKjqq;TKUp>l&/s5V8^p>ku.cK+l`puV>2
aQ*!Tq;TKUp>ku.f];S`puV;1alE*UpZ(f)f];hhp#O3UqW7e;q;TKUpZ2&.f];VapuV20aQ<9\p>b](
f];kip>a6Tq;qY;p>j?WqW@M3fAuM`q;q>1aQ30Yo]5T)fB)nlp>a6Tq;qV:pZ0EWqr[J2g?.kdrTEn7
aQ30Yo]5Q(f]E"mo&[sTrTF.?puKNXqr[P3fB)Sbqr[J2aQEHaoAoH'g#`+noAn$Tqr[h<pZ9KYrTEe5
fB)Sbr9!S3aQEHanE0?*f'!(sn`@jSroa1?pZ9KYro`e5g#qhe!9it7aQEKbn`B<'f]N1rn)h^S!9j:@
puTTZro`h5fB2Ydro`b4aQEQen`B9&g#i:sn)h^S!9j7Ap#jH\n)i9cnE99&ZfgrDfBDYbaQN?\pZAjG
g$%timcMURmcO'&_ro2+pZD85Zfg$*gZZlGm,uOTm-!EmdHJg=m-"<1cfj`Yalr'Sbj"KWiooXjm,t_=
rTV\nlfZCRlfb_?jm)-rl0-CVl0/*1\*;6(roi_4c0=KVj6=tUcg'cYr9;Yol0-7Rlfla\kih'kdcn+'
s6J/"k3:7Xr9<P3[-Hc=mH`p!d-BcXrT^lWdd-epm-2m^k3:pkdH]0Gk3;g/\E_9'l0HjcjQbgln*B'"
Zg7YXf'MG^e*HhplftkCjm;L'j6G+Zj6HU/\*MT2q!.52Zg6`>cg99NiTpL0f^.S_bO"K[fBqM^jm;R)
i9St\hsAt^i9Tjukj76n]^5F[f^7V_ea22[ZgI>Ol0dEpf^7hfq<YHTg@#"-hsB%`h<aXu`U2CIjm;g0
g$RV^f'V>]g[<h`na>`2g[2`Cp?pc*g[3b`rU&M0ZgRDQm-iZqh!X4iq!GHVh=(:/hsK4eg?nCt`9uLN
ipQR/hXB+bf^IVai:,CenaGo7f^?KBp@$r/fC%PbqX35.Zg[MTn*nrshs]Lkq!PKWiUH[2hsTCjfC&.s
`:)[ShsU:-i:#7bfC.PaipbOenF,o9f'^6?p[@,2f'_Jbp[6u-Zg[GRo'h/~>

%%EndBinary
grestore % PSGState
newpath % image
211.68 279.84 mo
211.68 313.92 li
354.72 313.92 li
354.72 279.84 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[143.04 0 0 34.08 211.68 262.084 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 298 
/Height 71 
/ImageMatrix[298 0 0 -71 0 71 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 298 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 298 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 298 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
K'7gMe`a1#K'@mOK'@mOr99"#K':SFZg!)+K'@mOK'E$oN9GlWbNQJ#K'@mOK'@mOo');#K':5<^$1.5
K'@mOK'D[eQKWqa_<?L8K'@mOK'B9!g?=.PK'<-rLZsETK'@mOV!6e#K'7gMK'7gMbNQJ#K'AoljQM3Z
K'7gMK':5<^$1.5Rd')#K'7gMK'7gM_<?L8K'ChMY3:K$K'7gMK'<-rLZsETd-7n#K'7gMK'7gMpZRS#
K'CJC\EJP.K'7gMK';dhOm.J^`p(2#K'7gMK'7gMmHBl#K'C,9K'7gMK'7gMWT`(#K'@mOr99"#K'7gM
K'9#ohs#aWK'E$oN9GlWK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7gM_<?L7K'7gMK'7gMK'7gMK'7gM
K'7gMV!-_!K'.aKpZIM!K'7gMK'8ijjQD-XK'2^fOm%D\K'7gMRcs#!K'.aKmH9f!K':&7K'7gMe`a1!
K'0,rg?=.PK'7gMK':SFZfcr'V!$Y!K'7gMK'7gMbNQJ!K'/chjQM3ZK'7gMK':5<^#t"1Rcir!K'7gM
K'7gM_<?L6K'1\IY3:K$K'7gMK'<-rLZa9Pd-%b!K'7gMK'7gMpZRS!K'.aKK'/chjQM3ZK';dhOlq>Z
K'.aKRcir!K'7gMmHBl!K'0u5K'.aKe`X+!K'92tg?4(NK'.aKK'1MDZfm#)V!-_!K'.aKK'.aKbNHD!
K'8ijjQD-XK'.aKK'1/:^$((3Rcs#!K'.aKK'.aK_<6F6K':bKY31E"K'.aKK'3'pLZj?Rd-.h!K'.aK
K'.aKpZIM!K':DA\EAJ,K'.aKK'2^fOm%D\`ot,!K'.aKK'.aKK'.aK_<6F5K'.aKK'.aKK'.aKr9&jt
K'(GBZfcr'K'.aKK'2mkN95`SbN?=tK'.aKK'.aKo&l.tK'()8^#t"1K'.aKK'2OaQKEe]_<-@4K'.aK
K'0,rg?+"LK'*!nLZa9PK'.aKV!$XtK'%[IpZ@FtK'.aKK'/chjQ;'VK')XdOlq>ZK'.aKRciqtK'%[I
mH0_tK'0u5K'.aKe`X*tK''&pg?4(NK'.aKK'1MDZfZl%UupRtK'.aKK'.aKbNHCtK'%[IK'%[Io&c(t
K'1/:^#jq/K'%[IK')I_QKNk__<6F4K'%[IK''&pg?4(NK'3'pLZX3NK'%[IUupRtK'.aKpZILtK'%[I
K'&]fjQD-XK'2^fOlh8XK'%[IRc`ktK'.aKmH9etK''o3K'%[Ie`O$tK'0,rg?+"LK'%[IK'(GBZfcr'
V!$XtK'%[IK'%[IbN?=tK'/chjQ;'VK'%[IK'()8^#t"1RciqtK'%[IK'%[I_<-@3K'(VGY2t8sWTDjr
K'%[IK'%[Id,q[rK&rfihr]OQK'%[IK'(8=\E/>(TB5.rK'%[IK'%[I`oatrK&rH_l/mT[K'%[IK''o3
K&qUGe`EsrK'%[IK'%[Ir8rdrK&tA@ZfZl%K'%[IK')giN9,ZQbN67rK'%[IK'%[Io&c(rK&t#6^#jq/
K'%[IK')I_QK<_[_<$:2K'%[IK''&pg?!qJK&uplLZX3NK'%[IUum1~>

%%EndBinary
grestore % PSGState
newpath % image
282.72 312.48 mo
282.72 576.48 li
354.72 576.48 li
354.72 312.48 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[72 0 0 264 282.72 -.476071 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 150 
/Height 550 
/ImageMatrix[150 0 0 -550 0 550 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 150 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 150 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 150 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
K&u:ZRHB+`]]R8rV<-RrK'%[Ip?%@rhrUZrK''?#dcHqZl/mT[K')C]R,rq]^#d8rVWQ^rK&qUGpZ7@r
i9$frK&s<"dH6q\kiIEXK&u@\Qfci\Y2t8sVrc^rOQM/VK&tJCYi`U\a5qp7NofrrK')dhNTGcRaQ:%r
Z0'KrK&qXH!9SmqlfOSrK&s]-`oa/\h;s7MK&uagN99'\UZBPX]&eP*S)rkpK]N0pK&qUGe`Esp^?!8p
K&r*UK&l4XRH9%^]]I2pV<$LpK&qUGp>q:phrLTpK&s9!dc?kXl/dNYK&u=[R,lcXYN:AtVWHXpO6#rp
K&qUGi8p`palL%pK&rK`ki@EXs5ejoK&tPEY2k2qVrZXpOQD)TK&kDAYiWOZa5hj5No]lpK&u^fNT>]P
aQ0tpZ/sEpK&hRF!9JgolfFMpK&jW+`oX)Zh;j1KK&l[eN90!ZUZ@$fZK0EpS)rkpK&hOEm,XMpe`Esp
K&iijguXXZK&c.VRH2iXYiWOZa5a#VhW0:LK&lXdNT8pVUu[-gZ/j?nRcEYnK&hOElf=GneDmanK&ifi
h;aRVo]1VbK&kkNUZ9JV]&\J(S)ienK]E*nK&hOEe`<mn^>m2nK&i$SK&c.VRH/t\]]@,nV;pFnK&hOE
p>h4nhrCNnK&j2tdc5r>KAusmK&l7YR,`eY^#R,nVW?RnK&_ICpZ%4ni8gZnK&a/sdH$eXki79TK&c4X
QfQ]XY2b,oVrQRnOQ;#RK&b>?YiNIXa5_d3NoTfnK&lXdNT5WNaQ'nnZ/j?nK&_LD!9Aamlf=GmeDd[l
^#R,nVW?RmO5fflK&cUcN9&pXUZ0DT]&SD&S)`_lK]<$lK&_ICe`3gl^>d,lK&_sQK&Z(TRH&nZ]]7&l
V;g@lK&_ICp>_.lhr:HlK&a,rdc-_Tl/RBUK&c1WR,ZWTYN(5pVW6LlO5fflK&_ICi8^Tlal9nlK&`?\
ki.3RK&Z.VQfHWVY2Y&mVrHLlOQ1rPK&Y8=YiECVa5V^1NoK`lK&cRbNT,QLaPshlYiF3lRc4>-lJdHU
!98[kki8/leDgJfZJrRW`oEcQio6$Yr8[V4K&ZOa!9B."g#K*lal<0W_;_c[roDShS)a2$o\kJ^s5X":
LuRd\r8aC.e`68\]]$T`pZ'TZVrIR6j5Z6]o&>ejlJ_ErV;ft`q;f'G]]8M@f\r[coAf2sNoK`ls5Sdl
j5Q`jhr4.dZf9'co&ImPSDr_jRc3brqVm.e!9<V0P2b$OY2Rmhmc21D^#JJ?g#A%Op#1tjo],c-MW4Bi
m,Of!a5Xbjal2RGd,M@jlf70fK&ZgiL>i0mlf4Alm,I9iYN!(ObMg1oki:OZVrHq#p#;(mj5Q`jlJ^mc
[,TQok2XYESDr_jV;^Lqqr3Xqp#GQ%PN(-PY2S9si8V`7aPl1>g#A%Op#2@ul/MErNo9uuio?`la5Xbj
eD]6Ce)A"!i8a"[K&ZgiOl>rlki/)jpYjuhYN!+Pb2LJ$g>_)MZJjX"p#:S_n`#els5MblWT!4&gZ-!,
X5_dj^>[]'n):2'guJFpP2b$OY2S[)e`+R,e)As>g#A(Po\lY*hW":hR,R_uj5Zflp>XEW^Yn#-dc/a7
aPk\0kMic+dc(/`T&Akml/J2k!9;ViY2\d,c/Hn)eDS^5i8MB.e)U)[VW-Fjn)9tuo]"WbW8[L0dGqn!
i8Vo<g>L*2c/S0MZJj3jrSiRjio-Zjs5M;_[c-T3bMpe*S)NSh^>R/nr8FR4gu@e^U>a,N^#826al:_,
e)AF.ki%-Ps5Bm6hW!h[V;_+,e)IUj\DbWhhr)N6hr2Z8`o?^NK&Q7YWo3.$h;Y?k!92#X^#?$Nf\k9;
`8^.B^#?ujs5J^jj5I,uo]"3V[,Lc<_W&btS`/_hal'nlrSY!>dGj]UP2Y!NYMfH>^Z!,hm,5\=f\qqN
oAI@@`SpUNYi+<rj5R6#]A^ihlJT;5hr)uA^#J\CK&Q=[Zf'^!gu5Ttp#='P]A]mNf&5HD\Dci5aPa\i
K&PkN[G^<.cf):i!91WMaPifNj5AGF[c.)@^#6oioA[.9h;HlB]&3/=_Vr>hpY`O?f&>QGZ/G62aks\g
qVf!CdGj<J[c-H.al'hhs5C?Dcf"0J[Gp6*e`![h^>HogmGY\8gu@#H\DaRJf&,cMYi4m*e)7Rlro(NK
a5H+<^u+#-dc%mtp#3OAaP``Lj58bOY2T-5aPa\ho\kkhg#0a)l/BV?^Yf+NY2RphPMkrfeDIIgrSbTN
`o6(=S`%`M`8C4G\)GQhpY`(1j5>[MrSP`S]&E/;_r/r$g#9j,!9*2#^Ym,hs5C!:g#25TW8[7(e_pGc
Z/GE8a5=kpj5Iu8gu6K9`Sg^RVr6LjlJDU$Vr@:+e)15cZ/PH9`o-aQc/@C8b2<*TjP\#8b2<3Xpu/L:
dbsiWqVeC2mGHgYqVeL5rntuWrSkTNlJ]hBpu0uccf!%)pu1f%\DYTg!93q9WSuamleqNrWSmX1eDL#Z
\`!#9c/8BWc/IL;b2DsOl/9G:cJS<R!8sp9f\cG\pu8=4m,6g[o\m%4qr#fXo\mjKjP\AApYsrdd,E4,
o&9?$[G]Ehs5EV/X5N*sm,.KqX5Wm4_Vi8fm,-:Kn_r$VfAP'6o]#,o_r8o!mGP)'le^p`nDUG+!8l8_
oA[LCmbt_7h;?W;e_]`Qn_h(<e)0iXrSjp;gYguIXl&p1hqmbZ\D[&<eDKcTbi.O>\_uc1`8B2'lf%m%
YMdsg!93J,Xl8L%dGV=frSQ8alJ]b@kht%LmGcjYeD[pqptrR<g"uA[p>N.3iSXCem,G/+p#*dH^YeP<
g>;#OeDT*>f\blNleo_>f\boNr8=d9gYVthki&`'mGI9fk2EW(rnuGdio&)=j58YKjl,1Vcf!L6jl-!m
\DZ&tiS^oso\Slij5IK*qV^)bj5J;Aj5AYKhr*bVaPYk2io0jo[,B]rp#5>tYi+[$p>=`bYi"?piSh`5
mGQdWiSiPLf&5?@h;J"a]\hW'l/DErYi+?p!9)nqYi,-1legLU^#/M?i838IeDK-?i83>Ll/9\AhV[/I
s5:0>iSO4bkhr`'le_Bmh;PWs!8l_lg#1'2khkCVg#1lIdGNs?gu7tb]\q`*khu!hZJX^!s5;VhZJYH6
m,$LU^#8SAiSW8Ff\bH@jPJMHn))(@jPJ\Ns5C6@inr>FZJYT:lJC+M`8C%@jkeYKg#1WCinr;EoA@@@
k2+tQpu&I8k2,dij5I?&mbd`qe)7jqqVUGle)8[3j59"Uf&>cLcJZ+fs510>lJ:^_lJT&,kM?3tf&<sn
qqnsAb22I@lJ9kGhr!#BkhahJoAIIC_Van@[GL6*o\eQ`[,:K3pYOBX]&<GCZJX<khVRVTcf"0IakuC?
dbt2a[,B9fjPRB%mG7g#d,;:g!8d)!d,E((mbkA-jkeDAmbQ.Gq;8jBm,$OVo\m49l/0V?]&*AAn(l4G
cJRjCm,$%Hj5ADEZ/5Q<\)-T0hVdh[[GUB.p#4T_[G^c9]\gcdnD<Zjb2D%3gY_GUb2DjJ`8C">dbj`T
[bgQ1l/:LX[bpQ1!8tuW]&3JDn(u%@eDB6Bo%h@El/0eDnD;4D!8k9CnD<!Ykhii*oA0&se)7^mqVLu'
`o+npn_`im_r'G0fA?,T`SgII_Van?dGX]U\)6`4khk.P\)-c5s5:oT^#/_Eo%q=CeDK?Eo%q4?mbZ+C
p"dUFs5:BDoA89\khrr-oA7:?_qt(Cp>*OAg>:]Cp>*UDn))7Eo\RXGq;8^=p>+T_inq9&p>,E"c/?+h
s5*J+^>I;ol/)0j^>J,1dba`S^u5.J^#/M>dbjEK\DI#:l/1%K\DI#:!8tZN_r(1Fp>3I>h;6rDq;&^@
o\RRDq;''Kq;Ad?pYO``hqu!$q;(]#aPXVds5*S-^#78plJJc$m+otCr7nm@\_d2=dGXBL\_l<$d,)=h
rS7G1]AL]do%s9"]\qT&h;>Blq;&mCrnPKMo\[49r8$/di8D-&qVJX:cJ@jCs4k*@j5/GFr8"sBpYWmG
^u"M9]&!DAhV[#D]&*DAp#*gI^>JkGXkqggi8"Cg[GUK1bMN6S]AW\H\_kZgiSM0%l/0bC\_[DDh;Gg$
bMVgHXPW0seD7Lhr8,3Fs4t]Qn_h"9g"t68]\W5;^u*&dptc#,[G]]pj59jms51-=o\IXF]&3>@]&(il
inq?(rnm%uaPOVds510?d,+-GZ/=a$e_^8^ZJN=O!8tlSm,,J4!8u\je_e$rr84g:f%oWIrnt*>le^+I
rnt-?!8kKHqqoZTk2*o0rSZ\mdGM[prS[M/]&1Wdp>5W&Zej`uhqe4gZetN6aPQjQ^u+eA^>AYBgYUW?
_VP"Eo%q7?_VG4Mr8=p=e_]WKpYW@7n(lLLpYWO<r8,<HqV]WUkMO)3p>>)jc/-@op>>o,[bf9bpYGZ'
Zesd!i84.a[,1`:akcXI`np1@`811GgY^`B_VXqBp"mL@`SLROp><76g>2,Op>E=8n(uUOo&%.;q;0-I
o&%sRinh]2p#,&kcJQOrn(tJ.i8!VQn_^b2p"e*Qo\dF?q;8I6g>1Q?b1uLDn(u.Ba5-FHs5:<Bd,*d=
[b^<*hq[\X[bf*]o&.[Jm,,))kM=M@bM;OCr8,'BakZsTo&-q5h;6]=[b^c7eD0HK_qt%Bb2)RFfAGND
Yho$._qiSmo\]K%\),WjpYG;r[bp?+a54JbrS>`Rleg(GkhaM=mGR*`e).Cd!8b6AcJ8HWm,,;/iSEkV
m,5A1p>3C;akcIBceRdBh;6oCc/%^Do&%IEbMM@;\D??'lJ1U\\DI,=e(s<Ia5?IFY286qf%n^.kMQ'k
_;<Jnp#,N$\DPopf\X0poA&6Yk23r1qVKQSk24bHj5/,<inj4]akbD#l/2Hs\DGTg!8lqr\DHB(leURW
\D7/?eD0-BbhhdEd,!d?j5/DEd,![;rS>0Ce(jTQnDCe5gYMV[j57E(o%i6[i82E.p>+6RinrGGiSN#=
ins7^b21S&khc*k\_Yfks5)_k\_ZQ+m+gRW\_dABe_T*=dG=*De_K$<khX_De_K*?rSG9Fe(rj:]%uc/
lJ14P^"r\Df%f0?dba6FeD8p:m+p"DfA,6>s5(?CfA-&VlJK20i8++_gYTQuq:sl_gYU*/o%hpQh;@,H
h;6]<g>;Y]_qiu#l/)!f]A;,p!8lVi]ADo1_;2u`qV9i[g"t?:jk\VFgu%GSd,)+bqVAd=gtVJXjkdW*
jP9LbgY]X"pt`=5ceRsDgtUH;jPAMFg>(E>ptisG^YS;5]\M>ts5)Gc]A;u3m+g:O^Y\qGX52RdiS<;E
f&#oPbh_(0gu&(f]\_>te(q[lp"Scde_\:$pta`\fAG<=j5-imp>!^DhqR#EpYNR=h;%\\inqE*k2"&5
^"`VCi7l`;dbX9Gh;$T=k2+_HXPNp4^"hQ#l/(^^^"qQ#!8lAb]\`58\_YE`o\AE[db`j:hqd2FeDKlS
b20\boA.+8iS4"]hVPs%l.l$ge).jqrnX^4f%fKEinMi:leU%Gi7u`:!8bEFi8!PPk2!`+j4jUjdGDRm
p>##icece"p"eT^bh_=7gt^rEcJJ?Pa5,_0gtqYZ^>7c'bMBnfqqLDjcJHe$o%i<\cJIU;gYLlEbME-P
_VF5,hVRbY^>7f(p"nBY^>823p>!gH`8(7FjkIr6gYClFjkJ#9nD2FHj4r)=pt`[>k1f.ViSD6'k1]mm
bhg(iqV:DlaPG8!n(d'[aPH(8f\GWDbMN0Q_qjD/h;.GR^>.o+o\J'R^>/85pY3jI_qk7HjkRo4h;%&G
kM+&5o\@[GkM+D@q;/mBbhV%0^YA&-s4tcP^YJeBm+]V<d,"3IW8-aoeD'<C`SJ;al.b"MmG>S5kM3u1
^tSkDle9>6e_KKGl.a88lJ:%IXk`j0^YA,/hVIAN^YJ,/p"n-R^YSM:[bT-^o\8`d_qj>-hq[MO`SU@F
b2'V`n(b_5mFpg\gYKX"le;Er`nnJds4jX0g"Y`FmFoG5mbH:HleBG9s5(QI`SBM/^t\;2o\IgK^teY<
pY3UBb2)gJVqgFhgtV8N_;4tCa5$%9dGFKO^tmDnfA+0rn(Rft_VN&`!8Qtr_VWl"leSJoo%VOGn(Pb:
qq]'Cmb?ORk2*o0m+f8/a4pLGnCkV4gt_&Imb>S7nD2LJZJ>0/^t\D5hVI/H^teD5p"mpL^tne@Yh[^^
n([Bd^"qo-g>)/O^"r_D_qa_8!8Z,Zl.j,0o%N?ae_S$rnCms!^>6c`r7pers4t?ChqR2Go%Lb4o\@aI
nCtt=pYE[@nD!rui8!/D_;"S8!8dD)aPF\fqqLl"!8bBEdbO?In_=#u^"hr.fA#oNrS>3C!8PEFo@j6$
e(s?G_;+S8r8$bqdG2Rmo\0?$rnY9CakQXGo\0?%]\VH"jP9=\qq\s@ptO!Ho\02ubM;^E_V=_:rncPg
hVH'(o%X&t^"gidp=o8oqq\s@j4iJGp"KB$^"rJ=b1uUCqVBHPnD(n8p"K8ujkSPE_V=b;r8.;+`8/;c
rnI/$pY<I:gY1oGpY#Au^>/23e(aTMqqf0FrnYEGo\9)ph:prD_V4e<ptbMrc.p1jp=]N'qqf'CbM;mJ
o\9&o^>%i)h:hYWpYER=r7f9HpY,K#c/%pG_VFh=o\A`df%\'qq:YMurnP?F_V=h=q;/jAfA,`Jp"T,o
^>&85dG"ELp>*^CqV9!CpY,E!g>1lH_VFk>oA'&ob1jeeqUto)pYEU>cJ/$HptGK!^YRr*i8"%\o%_"7
s4YHGqUtMsdbO9G_qXt?pYP&gg"jR$p=o,m^Y@8lnCmcmo\I7:l.atIq:bQ!^>8eD`n^=Cn_DaNl.a,0
qq:Ssm+g+G_qY"@p"mI>`7t@JpY52m^Y@]#jP'Obo%h(9p"RgIqV(SuaPHXI_qb%An(d!Yh:oj$r7UVr
q:s'H_qY%A!8dD*^YR8lo\B5rn(b\4m+U+GrRp_s^YH`]qqCYueD9KI_qb(BmbI<ddG)RmrRpi!rS>9E
a4pRIqqCVt^tmf$khQ!gmG,M3ptF!HrRpYqbhVmH_qY+Cn(m$ZhV?$'r7^MmrS,<G_qP+Cs5!5$^tdDn
n_<uqn(ke7lJ(%Ir7^Mm_qY1F`7k4DmbQONl.j53r7^Spn(c@H`7t4DleK>2f\5]Gs4Qeq_;+G4fA$8X
mG5_9rnPEGrS$PlhV7,G`7k7ElJ2'ec.g1js4R)$q;&jAbM2mJrS$Pl_;"&)i7\1alJ051qqB0G!86_p
d+n3I_qY1El.kRYf\=?u!86Vl_:uo^!SQ;qh8.mug[<hqg?@>/g[NqIg&TgigrS7IgVheGg$@JLgudD1
g]#phg\BLFg;_h<h"BI=gWnOIg?RM1guI/Kg]-!hgVV\Dfu_q1gsk*IgVhh1h<E_Kgr.tIg?@;igVV[b
g&Kjlgqhb!g?dPXh8.n8gXb*Zg>q#3gA'CBg#h)JgZ.&-g?@Acgs4]ngAosfgVV\%g$78Pgqqh<g=+d=
h9+OKgr8"Jg>grLg>:Q)g#_#cgWA3ig@a:nh87sngXk2sg?[GLg#Ur*gAosKg?.5Bh!Nmng[a(Hg<&%4
h##mEgW/"Jh<3V2gtUT,gVV\=g!n^8gs+UIgW8+1h;[5Kgnid)g;_jhg%=(ggr%mpg@s=^h8A%2gV;L]
g&TjLg#Cf?gZmP8g>q)Xgst2_g\BO@g<81LguI2-gYUZNg>h#,h"0:,gX+[Hg<81.gu[;JgWA10h>5pK
grS7,gV_b*g$78Kgr%nAg=+d8h9XmLgnicjg=k9)g#(QbgVqpig@a:hh8J*tgX=iog@*_Pg#(T)g]#sN
g>C]AgZR>7g>(HWg<SEsg$.;cgr.sjg&Tpcgr.t+g?[JJgVhhBg!n^3gsXsJgW\C.h!*SJgW\C-g]-$H
g<SCDgZ[D1g=Y*Qg"kH%g[3_Qg=tB(gAK[Mg"Y9>g?%&6g"kHVgX+^!g?@;_gVhglg&Kg^gVhh,g$IDI
gr.tCg8s#[g$[P@f\5*Hg=b3+g"bB$gWeI(g;Vb/f]q,BgVhhFg!eX/gt(6KgSEQng!n^'f\YB\gVhgm
g%F.`gr.t#g<83hg%<qSf\"s'gA0ILg"P6@gZ7+agAT^Gg!eU<g[Nt9g<nRRgtUW&gZ@/(g;V_Ff[SR*
gY(<Jg<nU,h!WqLgT0'(g;Vaof_!qZgVqn$g%X1Qgr.t;g9]M[g%O+Kf[eg=g>Uc6g">*VgW\E]g?mV5
g!n[SgXt9"g?7/Ug">*!g\fd(g=t<Hg!n[)g[X"Jg=+a1h#,sHgX4a(g;Vb3f]q,>gVqmqg"5$5g[*[i
g@a.Hg""a3g\BOBg=+aJgu@,/gYCN'g;_h?f\b?2gX4aJg=4g,gudALgS<KAg"+g?g[*\6g=4dUgt1?#
gZ[A'g;qtIg"+g)gYLTKg=4g+h"'4MgTK9'g;_gsf_!qVgVqn(g%X1Mgr8%?g9B;[g%3nKf[AO=g>:Q6
g!ngVgWA3]g?I>2g"4mVgXOutg?RAXg!\Wpg==m'g>CTIg"4m)g[s4Jg=Fs4g\9IAg=Fs'g;_h7f]q,8
g<81Ig"=s)gYgfKg=Fs'gA0FIg"=s6g@Et;g"=sMgYLW(g>U`Yg!ABlg%s@Yf[&:&g%!bJf[/C>g=t>[
g&'IBf\>$Bg?.,/g"G!XgX4cqg?mS%g!/1Gf\>$'g>^fIg"G$)g\9FKg9]K%fuD\!fC[eNg;hn,f_=%E
gW%tCfrE`Yf^IJIf?N%;g"G'4f[8IRgW%s^g#Ui+f\G*Yg<\Kmg$dS[fZr6ogA]g"g#^lHf\G*&gA9LJ
g"P*6g[j1?g=Y*$fuMb:fBUu3g<SCIg"Y0)gZ.#Kg7m:"fZDe%fA>6Mg;_h#f_+"PgW/%/ftQ.[f`0R\
f?;n%g$[PJfZi1>g=b2[g%a7@f\P0Dg>go-g"Y-ZgWnQng@3e%g!JCHf\P0%g?.)Jg"b6(g\]^Lg:#]$
fuMb%fC[eKg;hn/f_=%BgW/%Ffr*NYf^.8If?2h;g"4p4f[8IOgW/$ag#:W)f\Y6[g<83kg%!_]fZW$o
gABTtg$%)Hf\b<&gAT^Jg"k<9g[Nt<g=t<$fuMb=fBUu0g<nUJg"k<(gZI5Lg7d3?f\b<;g?dP6g"k<R
gXb-#g?.)#fuVh'f>u\%g$IDJfZ;e=g""d3f[AIGfuMb'fBM#Ig;hn'fDsXIg;hn=f^%20g!eUHf\kB$
g$75Hf\kB&gAfjJg"tB;g$782f\kBRg!eWpf]q)_f>lUdg&K^_fDsUCf\tHGfAbB#g%O(If\kB/g@s=B
g"tB]g$75FfZ;\(f)OFDfuVh=fBh,0g<nUJg#(H^fu;V1fA5'<f#?=_f\tH;g?[J6g#(H^fu;UafD=(`
f#67mf^mbSf>cP1g"tE>f`'RHf_jCCfAkE^g>CTHfuVh)fCdkGg;qt4f_3tsfu;UffDX=]ec=FCg#:TI
f\tH%g@j4Jg#1N^g""aFfZ;\)f)OIig"b9$f](K_g;_jfg%O(af_sLCf[naFfAtN_g;Vb4f\G-=f>cME
g;qt*f_sL^f]Cc,fAtN_g@j4HfuVh4fD!n9g;qt*f_sLBf]1TGfAtN^g;_h@f[8@2f)XRRg@a1@g#1N\
g$RGGfZ;\*f)OG(g;_gef_="af)XREg=4gKg#:T]fuD\4fA"p<f)FCEg&B[Gf]1Q`gYLTJg;qt+f_jFA
fZ;\Bf':icg;Vatf^[VSfDjUFg?mSKg#:T\g!/1GfZ;\+f)==^g#^o.f]1T`g\9FKg;qt6f_3tpfuD[i
fDF1]f)==Bg#L`If]1T`gVqnBg!SL3f_a@Sf^IJ6fB(T^g?mSHfu_n,f)XS*gW%sgg%a4cf_a@@f\4sH
fB(T]g;_h7f\5!=fDaOHgA]gIg#CZ\g#UfGfZDb,f)47tg!89lf^@AcfDaOEg</+Kg#CZ\fuD\+fAtQG
f)47Ag%s@If]:Z`gXOsKg;qt,f_X:if\"itfB1ZagATaGfuVhAfBh,dg;hmuf^d\UfD4+?f^RMGfB1Z[
g!/1HfZ;\,f)+1\g#^o/f]:ZYfZ2Ubf)O:cebRn<f\G*HfB1Z]g;_h9f\+p<fD!qFfCmh<f'(Z[g#grG
fZDb-f)+1ug!&-jf^RMdfD!q;f@&7Ff'(Z[fuD\-fAkKFf)"+@g&0LIf]C`Zf\G*Ef?)V-ebIhgf[e]r
fB:]bgABUEfuVhCfB_&^fZ2V"f'LuPebIh<f^dYGfB:`]g<J=Ifu_n.fCmk\fAP9%f'1`[g&9RGfZDb8
f([blg;_gkf_jC`fCmk;fBCfEf'1`[fuD\Df?Dk0f)"+Qg$dV9f]C`Yf^m_Ef?)V.ec4>!fuD[dfDO4d
f(n%?g"G$Jf]C`YfZ)P8f%/F:eb@bCf_O1AfB:`\g>prJfuVh.fCde:f?)SDe`t]ZfuMb$fBq2Qf(n%?
g%*eIf]LfYf[JIFf?)V.eb@b\f\kE'fBCf]gAT^Ifu_n:fCmhhfZ2Umf([b[eb@b:f]h#HfBCf\g;hnG
fZ`"1fCdeQfBUu/f':fZg%<qHfZDb/ec=G"g;hmgf_j@efCde9fAG0Ff':fZfuMb;f@JR;f(dtFg%j=C
f]LfXf]q)Ff?)V/eb7\rfZDdffCIMef(dt>g!A=Jf]LfXfZ2V/f&5-Eeb7\:f`0RHfBCf\g=k6Jfu_n/
fC[_gf@/?nf':fcg%a7@fZDbDf'Lu_g;hn#f^IJUfC[_9fCd_Ff':fZg!JCHfZDb/f([n\g#C],f]UlY
fZ2Ucf':fYfuVh&fBh,Qf([n=g%<qJf]UlYf[SOFf?)V/eb.V\f\Y9&fBLl\gAfjJfu_n;fCmhffZ;[o
f(R\[eb.V9f]q)HfBLlZfuMaefBLlXf\kBFf?)V0eaqGff?r3lf'Cidg%O+>fZDbFf'CoWf>uP%e`kWN
eFV>5fD!kFf'ClZg!\OHfZDb0f(%AZf%\cuea1fXfDsREf?)V:eb@VefuManfD*t^f(%A4f'V#Dea:lX
fZ;YEf?)V0eb.VOf^%23fBLlVfD*qDf#cJ0eGn1ofZ2Ucec=7eeb%P9f\P0HfBLlVf>lJ;e^E"8eFV>A
fCdb;f'ClYg$./IfZDb0f(%A4f$)\Dea:lWfZ;\'f'1cOeb%P9f_3qHfBLlVf@SUDf#cJ0eFM8ZfA,!"
f'ClZf`9^GfZMh<f(R\bf>lIoeaq>YeFM85fBh)Ff'ClYfuVeGfZMh1f'q;Of&kQ*ea:lWf_F(Gf?)V0
eH":qfuMaffDjFff'q;4f&G6Dea:lWfZ;\=f$i49eb%PDf_*n=fBUrVfC%5Ef#cJ0eF_DnfZ2Udf(ISf
eb%P8f[JIHfBUrVf>uP1e_SdCeFM86fDjIFf'ClYg"tBHfZDb1f'q;ef$N!iea:ldf_!h:f?2YEea1iY
fuMb%fBh,Sf'q;4f(deDea:lWf[SOFf?2\1eb%PZf\b?'fBUrVf>lIeec++deFM84fAbBFf'LrYfuVh?
f@/@:f'q;Df'q85ea:lWf^7;Ff?)V1eb.VqfuVgffCd_gf'q;3f%AOEea:lWfZ2V2f%npDeaqJ9fDsRG
fBUrVfAkHDf#lP1eFM8ef?i-kf'Loeg%<t=fZD_Ff'CoVf>lJ&e`bQNeFD24fD*qFf'LrYg!n[IfZDb1
f'q;Zf%S]tea:lYf`'OEf?)V;eb@VcfuVgpfD!n^f'q;3f'_)Eea:lVfZMhGf?)V1eaqJOf]q,2f@SUN
e]lXeeF1ldfCIP6f#uSDea:lVfZ;\&f':iQeaD#/ebdkCeF1lUf@JODf#lP1eFD2XfA5'#f'LrTf#Q=e
eGRhbe*tu0f&YBEea:lVfZ;\?f$W(8eaD#BeaCu1eF1lUfC.;Df#cJ1eFhJmfZ;[df([_geaD#/e_8OC
eF1lUf>lJ2e_AXBeFD27fDaCDf'LrTf&bHBe]QD1e*tucf$;jgeaCoef^d\9f?2YEf'LrTf#Q>&eE59L
e*tu0f)!qDeaCrWf[e[Gf?)V1eaD#Xe_&EpeF1lYfDX=Af#cJ;eG%J_fZ;[pf(IV\eaD#/eaV)CeF1lU
f?;bDf#cJ1eFD2MfBCi.f'LrTf)+"Be]QD1e,S%jf>lIcec41feFD24fAP6Ff'LrTf#Q><eBl_6e*tu?
f(.D7ea:lVf^.5Gf?)V1eaD#/e^)bCeF1lUf>lJ'e`YKMeFD24fD4"Ff'LrTf%S[Be]QD1e*tuXf%JWs
ea:lZf_sIDf?)V<eb7P_f>lIpeaq>YeFD24fBq/Ff'LrYfu_kHfZDb1f'q;Of&bK*ea:lVf_O.Gf?)V1
eH":pfuVgff)XCff'q;3f&P<Eea:lVfZ;\>f$`.9eaqJDf_*n=fBUrVfC%5Df#lP1eF_DnfZ2Ucf(RYg
eaqJ8f[JIHfBUrXfZ2V1f&#!EeaqJ8fZDb1f(IbQg$ID6f]^rXf_="Ff?)V1ec4=qfuVgffDjFgf(Ib<
g"b6Jf]^rXfZ2V<f$i4:eaqJCf_3t>fBUr[g?@5Kfu_n1fCIS7f?;_Ff'ClYfuMb'fBUuQf(Ib<g%F"J
f]^rZg!n[HfZDb1f(Ib^g#(K)f]^r]g]-!Mg<&%<f_3tifuMapfCmh]f(Ib<g$./Jf]^r]gW8+Jg!&.3
f_!kSf]h&1fBUr[g@a.Kfu_n1f)XS#gW8*jg&0Lgf_!k;f\b<HfBUr\g;hn=f[e^=fD"%HgA0IEg#gr\
g?@5Jfu_n1fD"&!g<83lg$mYgf_O=DgWeINg>pr\g;hn1f](QIfD++@gAT^Lg#gr_gtCHOgWA11g%O.k
g""ctf]^reg\T[Fg<&%Ff^.8dgrS7&g@EtYg%a=Bg@<kLg#gr^gWnOLg<&%1f_O=`gZ@23g>pr^gW/$i
g&9Rgf_XCDgY1BNg>prah8nC?gY:KBgA'FLgA'CDg#gr`gu[;NgWA11g&'V&gs4]sg[3_ggA'FCg<eOL
g#gr`grJ12g?%&Lg&0[Hh"odPgZ$r`gtCHNgWA11g%sLngXt9&g>poeh>Q0Mgr\=Gg?[JhgrJ1&g@<nX
g&0[Hh!WqPgZ$rdhT=URh9"I1g\T^dgZ7,2g>prbh>,jPgr\=;g@s>#hT+Hogu-r`grS71g?72Mg&0[H
h"f^PgZ$rdhULBRh9"I1g\fmpgtUW+gZ$reh>Z6Ngr\=Fg?dPmhT+I%h"KO]g\fmKh!EePgYplchT4LQ
h9"I1gAp-ehWs%?h;6rch8e<mg\BLfgA]sLh:CBRgu-oehoFU>h;@&Fh#6'Ph#6$MgYpldhVd5Rh8nC0
gAp.)hU:9&h<E_gh#H6Oh9"I0g]--Nh;I)Rgu$l+hY,dTh;6rehULBRh9"I0gZdSPhT4O0g]66RhoXaG
h<WnshT+I%h"KO\gW/18h;R2GgrSCQhTOd2h>c?hh<Eb;gu$lYhULE(h<3Sfgr\HphYl9gh8eC.h<j%S
grJ:Dh:CE<gsP$ThoXa0h<<_RhT=U0h#H9ThoXaEh<`t@i6C0Whk8iih;[8Hgr\IPhTap3h;$rXi5sm0
hT4Qph=TLfgr\I$hYH$_h94a=hrN\JhT=[ThTOd1h;7&UhoXa0h=]^Xi5sm;hY,gKhoO[Qh;@&3i7d)X
hq?l2iU>^Zi2GQ/hoO[/h<EkYi5jg/h>lN[iQ:$Fhs91Di6C0Whq?l1i8ieWhq?l3iVDEYi7HlBi:,[G
hq?lYi7[&0hrESfhTk*$i:u3fhot$2ht#[WhTk*Ii8!8BhpLE`ilL)ki8rn=hq6fciR$Q*i9T:ehpCB(
iRQl3iSi_Zi7?f2iV;?Zi7?f@iq;<PiRQl4iQ0sEhs0+FiQL0Yi7?f4io/k\iRHf3iVDEYi7?fBiq26O
iRHfYj5/h<in`S3iQ0sPhr!>=imcr[iRHf7j6>R]imQf6iW.uZiRHfMip#IDiRHccj4*,1ioo@eiR-Z+
iRHf5inr_[iRHf7j7M?]imQfAiq;<QiR?`Wj5At=inWMeiRR#1j72-6imQf[iR?`6j65L^imH`8jSe,_
j3ZfLj6bmJimH`bj4<83io]4diR[)1j8@oeimd#CipPgRiRHoYin*2;iS<MkjN-B-imd#0ioo@diR[)2
j8Iudin3AGjRD6'j7M?]imH`AjS@lXj3Q`XjlGOEjOiMdj4EA4j72-din*8:j8.f^in3ARjQ5IIj4EAi
j3?W0ip#OmjN-B,iW/)oji?HBj6PaWjN-BYimcu@jk&SajNQZ=k3V3bjeq2:jN-B,iq2?pjiHN6j7hTg
k/cZMjP]+Pjic`ajNQZ;jl5@ajNQZ=k4ducjiZZJjn%TSjNQZajkSt<jPf.cj4re;jn@ccjP&_GjR_HV
j4re^jkf+AjPK)"k/lc,jkAh;jPo4bj4re;jnRocjPK(Kk4RlXjkT"bjk]%?jPK&!k/cZ+jRq^$kK)f6
jn@flk/ZTLjPT%Sk/cWajiQT@kM>:dk/cWajPAtljjN84jQYk%kJu`+jT4H+ionGGgZIqdroMtuaQ<*U
eE#NMdH:2caQ3E_iTTFeioeDFroN)$roVAca5m<^o]PW)a6(b1puMM:iTS>Fk2t^droN)$a6*B_bN8cb
i9/kWmH2LOs5`2'nE8Hea6*B_ki_d)a6(J)s5a4DjQOYIg#hedrT3,)a6;sSg?8CriTJMKq<#c[s5`2'
jQGUeaQEH_jQZL(cfiI5qrZr&`ol+=mcOK0j64MGo&eQdrT3/*binrfaQNH_j65Ufj6+JFrT3)'r9);e
a6*?^p$)#2a6:b1r9*t>jQOVHjlYUcrT3/*a6<B_cKG)ekN^U^oBF<Zq<-o)mHE9faQNE^l0833`otM,
qW7eCl0?:Qe`cVgq<-o)`oujRgZSFqk3:%PrTM>cqW@#,hs'@haQWE^kNVa)d-/O5qW@G7o]aBZb3/ce
qW@#,a6DLFl0.p*kNU"Mpug#eqW@&-dcpGha6<<]lg*a!i9JAIp?:c+!9qPga6<<]s6Aq8`p(t9p#u26
lg)RUkiq$ip?:f,`TbJ-pZLi,h!++gaQWB]m-F3,e`t3>p?:f,`p)":o]Z&4lKZCRlfd0gpZLo/`p*Qg
aQ`B]lK[6jl067PpZLo/oBOija6E9\p$DPA`p:\1ros.@mH_aVh<F7ip#tf/`Tm*[eEQYin*J<bq<Q)d
oBGZ.k3Cpj`p*0[mHa`9b3I"2p#lDBnEe-[cg(>koBG]/`TlXNiT^!umd%jWroqSio]Yf2fB_nka6N6[
md'B-f':<?o]Yr6rTqMha6NTepZ_>;_sH"@na#]0nEe0\n*8Qjo',Z1bNo)l`p3-Zo^1N%k3U.SnETQ1
q!65k`p3-Zs6T@D`Ttb5qs*b:p$KZ`iToXlnETQ1`U!BccKarana+flna"6\n`f`6kj7*ka6W3Zo'F?]
c0G/jn`fc7_X-=Kjm2C#q!Q#dq!?AomHaK5dd6Pk`p<*Yp?h,2g[)rGn*9]9rp@_m`pEKdp?VJ?_X,k>
na#Z/p[,iamH`Kln*9`:_sIHk`pE*Yp[-c&kj6=TmcsQ6oBalk`p<'X!:K^O_X5G2!:9(<q!Grbi9TRl
mcsZ:_X7$_dd6>dr9qhsq!Q/hlKnB8jR(jl`pE'XqX47JaR."6p?VJ=r9qMjd-^SplKnE9_X6RRhsB[p
qsM>gs6Rhnlg+N<eaDhm`pN'XqsNn>ea:BClg+T=rU.Pi`p<]km-FW=_X?.FmHs0)r9hDgoBaunlg+Q=
aR8om`pN$W!:\h5jmU4WkO&9;_X>D1!:9";rpR_lg[4=ol0JE>_XI!^f'__gs6n(tq<l8ikj8?<i9oUm
`pN!Vp$^/o`pWBap?hnK_X>_:q!I;3s6mhmjmD$okj6.SqsM\rk3W0;e*c\m`U2mUl0m?p`U;mU!:[ts
`UEZklgDXYfC&.rjmBqRmdAcrjmC(Ws7""rjR1jmkO6CXjmD^/d-nsAn*Tl:`ULt;rpSn8_scRPjmM6t
_sdBgcL0f]dI?hu`UDjTkj[L!`:)aSs7",!`:*Khm-_padI?huiU=eUl0mHsipOhU!:RqripPUlmIA0b
i:"\T`UEWjlL)[]eF2tsipOnXl1!Nui:"_U`UDdRhXKh"`UDdRp$pT&`:3*]p@$,n`UMdRamn0UlL<^"
bOY2nea_Jbddd/'`:2[Ql1*d'`:2[Q!:nD*`:<HglgW'ecg^\uhXAVWk4%<uhXA\Zqshi!h=07jn+"?c
hXC+,f^ZoLkjS97c18gCrUAb7bOO9Tm-rm#bOP)keaVGadIR8,`:;XPkjdd)`:2UOs7+D)`:3?dm-i6j
b45B!g[NGWj7)'th=&SXqXD\th='.ioCBiig[NJX`:3BelL3!fc1(Mth!`S[ipl(!g@0U~>

%%EndBinary
grestore % PSGState
newpath % image
353.28 345.12 mo
353.28 576.48 li
390.24 576.48 li
390.24 345.12 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[36.96 0 0 231.36 353.28 -.476079 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 77 
/Height 482 
/ImageMatrix[77 0 0 -482 0 482 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
[,TElRH*SlbMp%lYiF3lQ/_5la5ahlXQ%jlhW(Hl_rAJlp#D(lg>]L"p>U\`n`$q9hr9LPqW#3JaPrlP
j5\SJZ/W7Pbi@sJRc;WP[Gq8I[,KBkjl3Z-lf$"F\`3PH[,]ZpiSh0'n)MFJ^#AbFMrNRP[,LW9K&ZF^
[,Kg"N8jTj^>[&jnD^h7cf+$FS`7iP\DdDFL>q4P[,LH4K&ZUc[,KWrOlGrj_r8DjW8cRjg>T$j^Z*2j
UuC4jf&Egj]A^ijmGaGjdc%Rmro&Ifl/B#/kM_$O!9(<Ed,CANlf-(H\`'aNeDfHHU>a,N^#JhHMrELN
[,U]8_Vi8ho\m1:gu-lD[,Lc=^>d,inDL\4cf4*H[,C6.bMftjrSk3Be)?SNmbl.D]]#sNfAPNDV;]>N
^u4nDNoA^N[,CZ:K&Q7Y[,Bj#M;e<h]AUchT]+qhdbqCh\)GQhl/8#hcJc1hZf'3hjl)fhb2Bhhr8EFh
iS_*%n)/fUpu&O<f\hkLoARRF_;M6Lgu6rFWo1VL`Sp=FK&GeL[,L<-bMThfrSY'Ae)00B[,CB2a5O\g
q;8R;fAYTF[,:H4_r/>hp#3:8gYgfD[,L`9^YcufUu:.ff&*Uf]AUcfmGF5fdbqLirnrCdl/8r+kMUsM
!8t6Ad,:;LlefkB\_s[LeDK6BU>X&L^#/VBMr<FLVVf8J_;OtDO5JXJ[,C]9K&?(T[,B9fRG[;fbM]nf
Yi!pfio$Nfa5=Pfq;@.fhVY]uo%q:@^u+hB[,B]qg>93op>E^D`8:%@[,9d!f&3plqVSpBaPcID[,0j#
dbhFirnb-@bhq[B[,C-(cJGtd!8k0Ad,*m@T&7]J\_d8@LYq(J[,19/K&?@\[,0HmOPfZd_VW,dVr-:d
g"rad^>HodnD8cSk22`dbMKbdrSN@dinh'"mbWQPq;/L9fA;YHo&%@B^tu$HgY^`BWSYDH`8C+BP2=dH
[,:`:K&5nO[,9p"dbV:ernk3Bbh_O>[,1!'cJQ%c!8Y$=d,3sB[,(')b20\dr84m;eDB0@[,:?.`ne>b
ptiC8f\PB>[,1E3_V`2co\Hn2gu$fB[,(K5K&6"R[,''bRGR5bbMB\bYhmjbin^<ba54Jbq;$qbhVPWq
o%nuTp"m(3gYRqHp>(>Vn_LS/hqa.FqVJj@aPENFj5/5@Z/)nFbhhU@Rbc9F[GCo?KAGYF[,1-(b1sP`
r8"a:eD0$<[,(3-`nnDaptW74f\YH@!8Y'<oA.:>_;=h@!8Y'<gtgZ>[,1i=q:r^>`SL%>[,1f<dbO!?
!8b->lJB_@rnY3ArS.D0[GB<ginjXi\D7,@nD2.@]\`J@r8"p=rncAbhVJ1fZJG91_qb7J_qk"Arnap9
iS</BrSG'?rSID,\D>?`n_F'!\_[2?jPA,;]\NGAs4t<Cr8,]Sjk[T)qqgSndbXfW\)$r;^"iD=e_KEE
qVJL5n_DFFpYEU>!8RG-Z/+-hjkTUd^>/P@oA.1;`8(:Gp>*L=ptji_e_S$rp"fN#`n^@G`ng";^teV=
jP8SHpYNX?o@s?$_qXh>cJ8'Ip>3R?n_EKcg"Z/T_;+eA!8bKHn_D[LnD!Qj_VFh@gYM#JnD)";o%j,s
bM;aH`SLLKnD)";o%i<\inX1__;4S8!8GQKn_MFEq:tSu_VOY8lJ(1MnD2(=o%q:?mbH:Gp"Sul`SC%@
lJ:1MmG,e;p>,T$`n^+@eD9ZNmG,e;n(mNhf%ffP`81:FoA%IBmbQXQmG.3f`SKk8q:j?PmG5k=rn[)"
ZJ=Hol.bU]aP?1=qqS[9bhE-Pm+oe=m+pdYcJ6Utm+hZsb1u@>cJ7L9bhMI>lJ1@RleT)+qV9?MkhObD
ptP)iZJ>!)h:q/Kc.hjGpt`41gY;ATkM4A;l.u!e^YI,hpY>;ocJ.U>h;%MTk1n;;k1o7Vk1f+U[bUi:
ceIU;e(aiUkhXM=j4j+XinEMLd+e!EqVBHPj4i;Aq:aobdG*g>o%`*WinMr9o%`ildG*g>gYDJWiS2l9
j4sIbg=t`Fd+n?Lm+^%Dj4rYKn_<0]d+mR6!8?#XinW#;qVCJndG3[7l.YOYinW#;jP9gkdbNa7f%U,Y
jP88>j5'"Ul.k1Nf%T<BqqT]Uj5&2>!8QGcf@o0<n_<0[in`)=leD'df@o0<g=uP[in`)=h:q_YiS*2E
f%]ZKn_CG)iS+(\hqZf;hq\(_\D,]joA&]ffA#0;jP/#8g"P<<s4c5]hV?B1jkJMCh;%8LnCudSZJ5'+
k1\SEg=kiIo\?_+hqJ%_g=tB9gt_\Z]A))omb@-`gY1H<iS2c7gtLH9s4Z>`gYC!,khFnHg"Y`Ep"J0U
g=tB9r7^&]f\>69p>"cbgY:<5n(I6af\>69hq\.bgY:94i7[t]hV6o@g"c)OmG$1Fi7[/Fp"S?Wg"bB;
rn>uXiRuf:pY+lcf\G<;kM#@XiRuf:i7\1bf\G<;eCslSjk82=i7dMPmG-RQe(X!<r7TWTi7cf<rnHDd
e(Wg7n([$[i7cc;khGmedb<a7f\?AZiS)l<hqRbVi7d5EeD'EFo\.mOhqQr?p=eT\e(`m9pY=Z]i7lZ5
p"Aife(`m9e_L&Vk1e8:jk8qRl.b7PdbEs=bhD13e(XlWj4_r9d+[O6jk8&9m+V9hdG)7dq:auadG*a9
o%W*WZJ+m&p"@[Fk1SMDpY2t,kLoR_g"PWBd+e6I^=qc'hqISRkLn5:hV-K5kh457r7UJjceHOple:RU
c._C7rnGlUk1\&4!86Yic._C7kM,7Uk1[u2m+;<jbhD=7d+eTTkM")3le(OWinEYMcJ.^>r7]<Hle'_@
ptG#dc.hI9n(HIKm+BM8o@`olc.hI9f\,iKm+BM8lIkd`gY:rGaP$FBo[q=?le1(Jn_<<^aP#t5pY+-N
le0M:qV(GmaP#t5ceA9Mm+KS:lItOVhV%>LakH7;rRoBKlIs_?p"AccakH+7mb?UQlIs;3p=T2naP-%7
fA#rPle9A3n(@3bf@oWFb1l[Ep"IF=n(?CKmb7']aP,Y,d+Rp@a4gOGn_(t:bh;14nCYe8mb.HjcJ%^>
!8>QJrn6ena4ft7j4`VKmb%To`S'e6!nu>\a4^"8bhDsJn(I`p`nBn7s4Z_jhV%GO`nKq8!nl;]`nBn7
s4YoSp"Alf`S0h7s4Zkng"GrKs4YHFpXoDr`S0Y2g">`Fo[j)r`nBq8!8I"sf@oQD`n:7Apt,N!`nBq8
!8H2\mFpp[`Rsk8rS%#!d+S$Cs4bQIrn6_m`n9t9rS$2_kLoIZs4bQIle26hb1QC=rS#BHrn6nqs4bNH
le0kAn_!Qer7]0Do[s/tmFp:Jle0;1qUb\tr7]0Do[s/tf%TZJle0;1p=K5ro@_XHo[s,s`nL=Cn_(q7
pXf;rh:_)Hp"95t`nKb3qUj'FpXf;r`nC%;rS,?Gle1=NjOj4YqV'!Cp"92sqqB9Jle0P8qq1YpqV&sB
p=T;tjP&YJle0;1pt,Ar`nC(<r7fKMqV(5fa4U1=q:b/fh:_MSqqK0Fn_*cla4U1=q:a?Oo@`ljqqK-E
le1g\f%BfMq:`jApt,T!q:`jApXo2mgXtoGq:GDqa4^4>ptGAneCjTKp=[L=rn%)"ptEdApXo8ph:_,I
pXo2m`n:.>p=];pc.MmEptEa@pt58ma4U7?p"AEYjOj=\pY*[@pt58ms4GHGqUbDnc.MpGqUbJqa4]b1
lIXnEr7:Poa4U7?pY*X?le'\<o[j&mo\%:;qq(Pqg=boIlIa//rRUVopXmmGqq(Pqa4^FDmb#S3rRUVo
i7R8Gqq(Pqa4]b1rR]6ErRUSnb1Q^Gr7CVqa4]b1kL\\Ermp\oa4U=Ap"KDub1Z(4d+A'Ermp\oa4U=A
p"JT^iS!MKa4L=Ap=]DtaOpFBo\.^GpY"iaaOgFBo%EH`g=ZAUo\.@=o[roja4L@Bo%DXIn_!flo\.@=
lIba\eCX`Oo%D(9rR_&&p=dU@l.FkEldu0fn_)"9rR^Ypp"@gIlIa20!7h/$n_(t8rn$bqhV%2IlIa//
!7p\nqq00Grn$bqa4]b1a4C=BnCcpUjOjI`o%M1<lIZ*haO^FCnCc+>qq1o"o%M.;lIbFShU_bYnCbk7
s4?kr!8>KHlIaV<o[iTca4UFDnCd3]gXuPXmF]M3pY#AqaOpOEn(H=Fo%<uomF]M3mF^INk1B(TaOpOE
mF_EibLc.6bh)gFn(Gb6!8$VjkL\_FmF]M3mb,\6lIXJ8q:=obak,t6lIb"Hl.=,0o%<ilak,t6e(FBH
l.=,0m+CgZg=PcGaOp1;p".C<m+C"Cn^m0]aOoe0p=@gGle'A3qUtMoaOob/i7@;Hle'A3mFh6ddb*g9
bgudGmb#\6mFgFMl.G7Pbgu+4rR]?Hm+KP6!8-Pfbgu(3kL\hIm+KM5ldu-fc.;14d+A3Im+KM5kh#4Q
iR[;HbLc49rn5EGkh"D:pt"`_bLc+6mF^7Ikh")1o@WijbLc(5f@]`Jkh")1l.GX[g"5QCb1QI?n^l(;
l.FhDnCR!Zb1Pn/l.5"Jl.F53le)9jbLl"0danBJl.F53lIkITin3GGcIVF9qq00Fkh+G;hUg*)kh,CV
hUguD^=W&0cdq71gXc&Kkh*2mp=@sKk1@r1p=Suhc.D%-iRRJKk1@r1kh,[^f%9!6dFJ*FmFT\8kLeeG
mFUFMdFI@1s45WLkLe)3rmp8`dFI@1kgo"LkLe)3kLTU_dadI2dFJ<KkLe)3j4<YKjjiJEd+7O8rRfEI
j4;i4r70o\d+7@3n(6OMj4;Z/n(7<cd+7@3f[ooMj4;Z/jOa(Uh:C`@ce%d>nCH(=jO`8>o[`0Wce%1-
qpjBMjO_f1pXnufce%1-jONbMjO_f1k1JtNk1AVDe(*a8qq'6Hjk/)7rR^&[e(*O2nCHUMjk.r3mah'^
e(*L1g=H)Njk.r3iR[bRhUUZ<dan!Ao[qOBiRZr;p!r*SdamO4pXe-NiRZN/p=J`adamO4i7IMNiRZN/
j4F7\f%/s8d+A-Fkgn86j4EGEmFL=L[+>9.eCEO/eCFQMk1A&4hpq/El."\CeCEa6r7BEKhpp?.!7]rX
e^`[2n(-UOhpp<-ldkd\e^`[2f[fuOhUU6-i7@SOiRQr>e(4!<nC?.?i7?c8psnBUe(3C+qpaHOi7?H/
o@NK`e(3C+jOEhOi7?H/in+(Yg",$1f@9QGlIOM9iRd2BnCHIHf@8a0nC?[OiRcT1lIGRXf@8a0g"$&O
iRcT1hUV>Limcl:f%'3?o[hUDhUUN5q:+<Qf%&a2pX\3Ph::0-o%*6[f%&a2i7@SPh::0-hq%bVg=>06
eCO?Dkge>8hq$r?n^ZUMeCNO-s4,cOhq$B/qUar_eCNI+m*tFPhq$B/j4F=_eCNI+f[ToOimu]2i7IAI
l.4\@f[T*8q:=-Ii7HQ2!7ouVf[Sg0o$ujPi7HN1ldbUWf[Sd/gsu>QhU]$`pse9Ph::0-n(.!Zf@AX*
j4!ePh::0-hU_SSh::90g=,ZDlIFS;hU^c<o[V^Gg=+j-g!nm0f@BWFjj`#5gst]>nC6=Gf@AX*p!`'P
gst*-lIPXZf@AU)hp_PQgst*-hU_DNimlc4gXGT@n($+@hU^T7q:43KgXFs.r7'TQhU^</o$lpRgXFs.
jj`tQhU^</gXH5QgXFs.g!o`Hl.4J:g=5H;n^H:Dg!np1!7ocPg=4m+qUOWVg!nm0ldbCQg=4m+j44"V
g!nm0f@BlMh:13.gstrEl."S@f@B'6o[MXEgst-.!7]lVf@AU)pXA6Qgst*-ldk^Zf@AU)i7%VQgst*-
h:DAOiRQZ3gXGWAma^"?h:CQ8psn*JgXFs.rRBZQh:C6/o@3!RgXFs.k1'%Qh:C6/gslARgXFs.g!ocI
kLS;9f[K9:nC$%?gXFs.o[N$Qf[J[)lI>@RgXFs.h:2DQf[J[)g=5uJimZ]5g!oH=ldO\<g=503q:"-L
g!n['!7K`Pg=4m+o%!'Vg!n['l-f7Qg=4m+gslDSg=4d(h9u#Hjj`&6gstZ=n^Q4?h9t31r7'KMgst*-
qU=?Nh9t$,n'g[Qgst*-j4!_Nh9t$,gXH/PhppE0f[KNAl-e;8gXG?9p=7jGf[J^*!7KTNgXFs.p!i*Q
f[J[)ldYFRgXFs.hUL**gXFs.q:+BQh:C6/n'p^RgXFs.imdbQh:C6/g=6/Oh:(00g!oWEldj_=g=5?8
o[DUGg!nj/!7eI,g!ocIkLS;9hq.&BnCHCFg!nm0o$umQhq-H1lIGLVg!nm0gXZ8Qhq-H1gsu2Limci9
f@B<@o%15!hpqPQhq-H1iRmnVhUgW8f@BHDmap%@iRm)?p"/'Of@Ad1rRT]RiRlZ3p=AKZf@Ad1k19(R
iRkKg!7o`PiRlZ3qUt/edb*L0l.57QiRlZ3j4Vl5i7HN1rn-;aeCWa6lIa52eCWm9qq0EMj4Vo6iRlW2
j4WkQjk/\Kd+Ra;pt4'Ij4W&:r7L,bd+RF2o@MsQj4Vl5n(RNiZJ"!bpt4W[db*[8o\%%5dFe'Eo@hRE
kM+bFo\/BZdFdR7pt=?RkM+;9pY"ufdFdR7iS!_RkM*>slIk=Qk1\/7lJ)<mZeEm]rRpAgcJ%O<leCFR
k1\/7mb@TmcJ%O<eD'fRk1\/7khGU\hV.5L^"`;9c._C9g"Q,Ql.iW"o\/$Ql.jM;p>,Gub1u48h:hDQ
lJ0S;leV6hf%fKDc.`$Ln_D=BleUFQf%eI'lJ26jdbF-E`n]t:bM2C>iS<\QmG>t@l.l9mcJ.^Ab1m!P
mG?"AkhP@UjkK.XakZ=@rnYfSs4ltscJ8?Qm+oe=mb[-_j5'ajm+oe=n(n'$akd!PnDDOJr8-YnakZ=@
leUISs4m,$akm!PoA9E%akd!PmbZILp>,c(nDD@ErS?nun(laSs4m&!akd!PpYYi)akm!PmbZUPo%j?$
nDD@ErS@&&hV[\Wl/'M;s4m,$qqfZUrS@&&al!-TrSI&$akm!PnDE<`k2-'mo&.XIqqgl#rnbiTrS@#$
bhi<TrS@&&al!!Pn_`Ndj50^io&.XIqqgu(s5;)Yl/0kEqVM/+oAI^Iqqgu(khtIYq;:f%akusOp>Gr.
akusOp#49Uq;D)+oAIaJqVLi%mGHaWqVLo(aPcmOqV_5.akusOp#4EYp>G`'pYs9Ql/;*hg#)Y_p#4$N
ptu)1qVoTTpYb`'f\l>Ypttc'al)sOpYt`%g#;Y_p#4$Nq;220p#4$Nptti*g>VP[p>GW&al)sOpYtl)
e`$5[q;]TVq;Ll&aPcjNpYt&gm,@Zrq;]TVo\oT)pu0WZp>G`*aPm0Wpu(u.al;sOpu:8kki)6npu9BR
p>Gf-qVoi\o\oT)b2E?Zp#,],aPujNr8chski:peal2pNqW%S7bMr0Qr8c#\s5W\0qW#]WoATQ+f&H>]
oATW.aQ)jNqW%,*g#DV^qW#]WpYl)0r8bu[n`'H+g#DM\oATW.alDpNroN\2f];>XaQ!*Uq;M84alDpN
roMkpnDs&urT)&[n`'N.p>aW^n`'Q0alN?Zp#H#3aQ)gMrT)krlJqEos5h>_n)OB-qW#o^n`'T1aQ3B]
n`.^Pl/^mbkMu'ks5h>_n)O9+cfOQTs5hDa!9ES.s5hA`mc3?hk2l!k!9M;_mc+B1jQ+JEmc2OQroNM-
!9M;_mc3Klj5oXgb3&'Ps5h>_mc2[UqW7))bN@=9hrX4calW'Rr8c&`^#etLm,Z:Mm,[Wth<)$)p#Po/
bNA*Of]VtkZKCH6oB+`glK-:Rp#a$Ol/g^_n`K)tc0*sGf&l5Ybi\c`nE%sY[H@JNl/g4RkN;'nkNK57
lfS0.cKFBQe*-epZKLE5mcWQlkN:.TmH;OQk2t:Yq<-o&d-0'DhWO%`dHL)_p#jcf^$,4SjQFqSjQH7$
hW_?0o]Pc-dHKZShs'guZKUB4qWQSqjQG"Vp?96Sj6,Ien`f&se`tuTfBM8XeEQeml0-[_`p)pUiTSeU
iogC+f'9R*rTNA,eEPrUlg!j%ZK^N8r92_shs&eZrT^iVhs'Upkj%'if^%\bcKa9Nf]iJ%hW`\Ycg'WW
hW`YWlfn'+g$?-4r9E/'g$@GYp[%#.ZKpoCnES]mh!3Y\p$9?Xh!41jnE\lpg[*e_f'D)Ug?\V#ip,=c
`p<$XgZmS\iTp=*hX.W8r9N5*h!E_[o'Pi3ZL$]=p$:E"g$@M^rp7)[f^&7tkj6sfhsKRmc0X*KhsK"]
iU4tXk3^adhsK^qmHig"[dF%\f'M;]f'ND(jR0AAmHj*(i9f(]kO/99e*Z/_eEm8'ipP:_jR;L(`pV=C
lgFQ9e*Z5bf'_A^e*Z/_oBkN(jR9kOp$U8qj6k[hq!I23d-g#ao^:Q'jmURaoC2GBZL?W;o^:i0d-g)d
p@#`acgLPrnF+]kkO@BtnF,N.cgKralL*g&kjZ%LrU8)#k3pderU/n=Zg[;LipQ!ucL1,iqs^r\f'`A%
kO6^al1"01`:)">o'c;@cL0rdf^JM%J,~>

%%EndBinary
grestore % PSGState
newpath % image
34.56 410.88 mo
34.56 576.48 li
71.52 576.48 li
71.52 410.88 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[36.96 0 0 165.6 34.56 -.476064 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 77 
/Height 345 
/ImageMatrix[77 0 0 -345 0 345 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
bh_O?ce\TVZ/4j)lJ:LVl/'Y?mG>k>leg1HrnOd7e_]0>lJKtDmG5e<^#&J>l/0nDe_T*<ZJP62p#"3Q
^"rD<Z/4^%p>"N[Z/,*0^>A&1hq[n[ZJF?nf&#QHeD0`Q^>6cbmb['_e_K!:f%mXgr86brf%e7#mbP/)
jkg'qf%dRerSG!>j591XmG,#'jke;>inrDDrS=p<hqmhXkhY.Qg"b]Fc/%:6f\QS`hqm&AcJ@U<hVQl?
le_9jg>'-mrS?;df\PB?pY=lcZJFp)nD;jSgtpf@p"ecdgYB^&nD2mVgt^`ArS?8aZJGB6iniMHf\PuN
nD(>*injLfhV?`=hV@t`\D>lqo%`WffA5<=j5&)<g"tWArS?2`hqZE2khXnJinNMKd+kt`!8Z8`inM]4
kM3B!le_$cj4grrs4jp9f&$D\kM*;tleTY<e_]KDrnFa6eD9$<e_]EBm+fY:]\W><eDB?BeD/s:ZJG-/
iSN_O^"i>:ZJF<mptk2gZJ>*.^YR>po@runZJ=6kf%nd2khGdc^>-]`mbQ:Il.b%LnD*3^cJ@[=l.tLX
l.`W$rnPfTkM4MArS?bnZJ=g&in`hRc/%gBrnFa6eD9rVl.jM=leCg^`n\eoo%a#qbh_X?e_KiQm+\i$
o%i$Um+]Y;p=o>rZJ=3jn_NTeaP?1;oA%.:b2)pKp"ROBmb?LOf\FU)mb@HjdbO9F`8'h:akcL@gtUH8
ZJ>?5cJA$E`S9h8ZJ=Nsjk]L]ZJ5<4\(o3`r8$qtZJ4KrcJ6Iro@j/t[bK'^k1mu4o\/E]cJ,b^rnPKK
o\.UFjkI)rmG6IOp"Hk/rS+X5e_T`Np"H_+h;$T:`81.@p"R^F!8R5$`SBn:_qk%?hV7,Gs4m8$ZJ>E7
a5-LD`nUCFs4m;%ZJ=QthVIq[_;"tEp"TK$`7t@KoA%XIp"fDs_;"qDp=n`bgt_qcp=mF=s5!J(s4bHG
rS7,$ceS-Is5!D'_;,(Hq:b#dgY;Y]pY3O>rn[G*rnG9Ern[D(d+e0HqqUr#_VG+GpY5)jf%g5[qV&d?
qqV2)rS#*BqqUu$e_KQIrS@>(_V=qBqV(Ale_BrUptN[@rS7J0qqAm@qV:u%f%]QGqV:o$_;+tEqqCSp
dbFTQqqApArnRG,q:idAqq_2(g"YfHptYf$_V=k@qV1`!c.r0Orn50Bs4d>'r7]$BptY`#hq[;JqVD2)
_V4\;rS%##bhMmIqqK0Hr7q,(s4P9Cp"TH!i7m;HpY>Z#_VFtC!87/$bM)UCrn>HJqqLi"r7f*DptYr'
d+\-Go@s8u_qXk>r7g\qe_KoT_V4b=rS.A+_V=b=rS,rZm+h?k_qO\9s4ZtseD'WNrS,6Frn[D+_qO\9
!8?)[leD'ernG<Fp>,;ne(X?H!8>?Fs4m;&rnG?Gp"eBVlIrPuoA'B#ptX'Jp"dU@!8Fj7o%a9"iS<JK
o\IO@khF;8n_=-!akZdKoA.F?dG*[8n_=-!_qak>rn>NK\_Hu8nD)";nD*3\iS(Tln_=-"`S9n;d+\<L
ZJ4j'leC4Ln(c"<o%V"8n(cFIo@r`hakH+9n(QOMZJ5-/ptX!Fm+^1Ho%LD(mbIEff\5ZGb1cXF]A)`.
gtM5NleBS9iS2f8mG,t>q:b>lbM'J\qqLJmc.ULuinC]mnD*utcIob^qV&70leLp]iRtNjn_:q8leL+F
q:W(-g"Y68lJ0_=o%Lq6_V=V8lJ0_=gY1?7ZJ531n_DLE_qOV6ZJ4X!qUsKRZJ,31\_H?'j4WnSZJ+?n
d+dd>dFnHO\(]'\kM,4Udb3^8ce>b\s4c_ldb2n!k1[,qm+hNoe(M._rn=[4k1oFYjk6rnmG#Y8k1nVB
r7SF1j4j1Zi7d5GeCj9D`S0A,gtMMVj4i):f@o$6j4i#9o\8lie_/m7e_0iR\D#rslIkOWi7c`7jP%r6
inN&;rn?Acf%J:$kM"nLf\#<=cIoVZrn?>cf\"L&jk6rnmG%<gg"<adrRnL1i7mtXjOgckmb5Y6i7m/A
qq/4-f@o'7hqQl;n(GY4^Y8>6hqQl;f\,$4ZJ,'-l.aqE_:eG5ZJ+3j!8H8\ZJ#$,]@u,rle(a[ZJ"3j
db<R4gt;GU]%P3ZlIt(Kgt:W>dFkhZh:p`;bLu+4ZeFZuo\83SZe5?3ZJ+*gpXnZ]ZJ"QtnClRLgtUZ;
o@^q4_qOY7gY:T;gY(64ZJ,00inN>B`7aV4g"P67iS++]hUo-er7^#]gtCB7o%<B_f%Js5in;`4f\568
rRooXhq6-*kh4VBhq7)En_)gP[+YK4f\5<9c.M43ZJ"QtmFpRO[FkK2ZJ!j`rn$8`ZInQt`nAttkL]X`
ZIma]hV$K6j4E_O`RqoXp"@pMj4Do8gt8pcp=eKZj4D*!o@UD&hV.bYj4CWipY!44e_9WHo%12"i7ZT4
e_9*9q:N:2ak>t4e_9*9in3bQin1Tjn(QpXjk%&qqUi+,f\6;Xjk$fjn_(e4eCs?Bpt)h(g=b04eCs$9
o@Un3_V+J4e(Ws9gXt02ZJ#*.g=k]@`7XP2ZJ"9ln_3-WZIo*.f%K-:dFnBJmFS\sjOrqRjk.r5kL][b
db*a7bLl%2d+RU6k1JqNkL[)ns4G]Ol.4,2k1?okm+LLRl.3;prR\@-e_0lRl.3/lmb#P3ce7d<qpr+*
f%Ag2ce7U7n(5M0^Y&22ce7U7f[nm0ZInp)g"GZA_:S80Ze40gnCd*XZe+Bmbh14oldc'fZe*RVj4MZ1
ldk=Pb1F2VqUj*HldjM9iRbBfn_)dPldi]"pt)k)g"H&OldiDoo%:e2c.VgApXZY%gXt02c.VI7o[gk0
`7XP2c.VI7h:L60ZIo*.db4!<`n0V0Ze4?ll.PFSZIf*.[b/jX!86_iZe+?lc.L7nmFM<h[+EXVr7L>e
b1Q+4kh"eFmFJ_trR]3En(#b8qUY\umFJSpmb$@Jn(#M1s4?knqprm@!8-Vhf@]`Jn(#P2rn$PgnCQCG
!8-Vhb1QI=q:3U<rn$Pgg"5cG!8-Yiak6(4iR[8Ern$ShaO^FEm+;9ibLl:6b16RDrn$ShaO^FEm+:IR
in3bNaO^@BmafM3s4H\idFe9InC>V2rn$ShlIXtGs4H\iak617s4,6BrR^Jge(=?Gs4H\iak6+5m+1%E
rR^Jgak-RFp=K&jak6+5e^jEErR^Jgak-RFmFUs^f%BKBak$FBqUY>jak-RFmFU.GmaqNmnC>Y3rR^Mh
p".^Fs4H_jak-UHrmgVjak$FBn(-@Im+;6hmFTJ4!86nmpX[gEr7CDgak-RF!8-\jak-UHn^ZRKlIPmb
n(,V4rn-Vis4GNI!86nmak$CAn(,V4rn-Vikh+nI!86nmak$CAn(,V4rn-VidFe9I!86nmak$CAn(-dU
i7It\maoS5s4R"os4,6Br7CDge(=?Grn-Yjak6XHn^[!WhU_VVn(,Y5rRgkqq:<^?rRgYje^jEEr7CJh
ak$CAnCHOLlIZ!eo@1n4qUY2eqUX$Er7CGhak-LDo@1n4qUY2ej4<GFqq(>gak-LDo@3]gcIMdBo$tq7
s47)!nCG_5rRg_kjjiMDq:>,eak$@@o%*ilak-LDo@2(9rRL_po$tk5qq(>gm+:+GrRgblajp4<p=9,l
ak$@@nCH.Ap"0/po[M"5q:>,emag1Eqq(>gak-LDqUGDlajp4<o$u@Co@EfjnCG_5rRgblnC?7Cq:>,e
ak$@@rmp\lak-LDo[MREn^[Hdo$tk5qq(>gpt+!Hr7LYkajp7=!7p_kak$@@nCHRMlIYsdo[M"5q:>,e
qUX$Eqq(>gb1HRDo[M"5q:>,ej4<DEqq(>gb1HRDo[NfhcIMaAo$tt8s47%un^bh6r7LYkjjiJCq:>,e
b1?F@o@Ermak-ICo[M1:r71Voo$tn6qUb8gm+:+Gr7LYkajp4<pXT2lb1?F@n^c7Bp"0,oo[M"5q:>,e
hU_)FqUb8gak-ICo[NWce(+9Fo$tn6rn%,#n^bh6r7LYki77/Dpt##db1?F@n^d]kbh)dFo[M%6!7pts
o$tn6qUb8gkL\bGr7L_lajg(8o[NokbglL>o@;.;r7:_rp=%.5pXSockge_Dpt#&eak$=?p=%.5pXSoc
dFJ*Dpt#&eak$=?p=&<Vi7.MOo[M%6pt#;lqUN^=qUbGie("-ApXSocb16:<o@<B^g"-#Op=%.5pXT8m
pXI@9pt#&eg=GcEqUbGiajg(8o[NN`f@BZIo@:t6qpti"p=%.5pXSoch::rDpt#&eak$=?p=&`beC=6C
o[M%6rRUnto@:t6qUbGihpguApXSocb16:<o@<fjc.;aCp=%.5!7gkpo[M%6pt#&ek18VEqUbGiajg(8
o[ElkbLQC=o@;1<qptVqp=%.5pXSocl.+eDpt#&eak$=?pXK2lb16:<o$u7@pX]2mn^bh6r7LYkgstlD
pt##db1?F@n^dQgd+A3Jo[M"5rRUquo$tn6qUb8gj4EJGr7LYkajp4<o%!]icIVjDn^bq9rn%)#o$tn6
qUb8gkL\bGr7LJiak6UGo$tn6qUb8gd+A-Gr7LJiak6UGo%!$ViR[kWn^bh6r7L_pqU`jArn6kme(4<F
qUb8gak-ICn(7*^g"?;WnCGb6r7Lktp=IF=rn6\kgtD,K!8?qnb1HRDn(76be_'lSmF]P6!8@G'o@D(9
r7LJihUq2Irn6\kak6[JnCIBde(=NMn(5\6s4ID*mF]P6!8?nnin3JIrn6\kak6[Jle0G7mao\8s4I>(
mF]P6!8?bllIt4NmaoV6rn6bms4GHH!8?ble(XTNmF]P6!8?hmm+L7K!8?blb1cI>qUisD!8?blf@o$6
bhML:n_)XL!8?bl^tSD6bhML:g=buKle/StkM,.Rle0G7le)9lZeEd\rS-VjZeFa"aP5"qmb.QlZeEp`
hqQH3lIkUZ`S/&\p=mmJkh=_Ep"S]aZeP0.g>(oG_V=Y9ZJ=Bon_NE_ZJ562]%kZgqV(DlZJ4EpdG3+)
k1fmjdbO!>bhVC:dG<s>kM4;:\)%#=dba-@d+m[:ZJG!+jkf.S\_R&:ZJF0ir8-MidG<m=n_M(<e)'QK
p=ut0gtpZ>e_fHCp"d@<`SU%>e_fHChVH`<ZJPQ;g#(fFe)'iTm+nu(k25[cin^osnDD.@fAPrMpt`:5
g#(N@fAPQCp#"cdhql9.n__sVhqm5Iq;:)dZetW;hVd;Ja5?7@Zf's(p#4fbZJY]?[,BZsp>>)kf\kTC
khsYBg>UrHs52Jeh;?W<io&PLh;@SWa5FVhpYjoeh;?c@hVb]uo]#,pgYgfEkMZ$kZJjX!!92_jgYplE
pYigEgu@YXnDLV2io8DGhW*>Jqr,'DbMqdGhW*8Ik2Q0qf\s3ss5Mqrf\tZGoASijZJt62o]+T_\DmDF
ZK'p)pYk)iZf:K7nDi$YiT/PKqr?i!e`+^2lf6sbe`,ZMrSuGfZK's*e`+j6k2Wc.m,e')e`+$trSt3E
jQ5smioB%Ze)TlW`T6+AgZ/+iioJSKfAt`JjQ4hMoAmaK_WC=Lk2t+PguR)JZfV&GmH2dVjlPO`mc:\8
kN;d)e)]WPd,b/e[cQ]7kN(phZK:<4bNA'Pd,Y2fZK9Nsio]Lgc/n?Tr8u8c]B8nNlK?FRkiV?qhrV0+
oB5o3c/l_&o]EIBm-+'&g?#['pZK3Pm-*6en)is!b3%[Ge*$)]b3&WbnE7sV\``hPmHD^TeE>`PmH=Q5
a6<-ZrTVDdmHE$^p?1i,s6%Jen*09'g?7nfa630[q<7kAaQW*WfB;\emc_^Smca]6o]XfgnEJ!VqWRV9
s6%GdnEKo8hs'Cio'65;aQW-Xroa+@d-0u`rTM>e!9s(>ro_>cn`g&9iooOgn`fu8a6E3\roa7DbNSK\
ro_JgrTNe9r922coBQ><k31ggn`fu8a6E3\rosCGa6N?`r92Pmp?D57r92/bo]l;;mcrNkp$;M=a6E9^
!:'IFa6E6]qWZVsnET`5qrl)bo]l>;n`eZio]l8:a6NQfr9O7D`p*0]q<?]"m-=<1pZffbq!@h@pZg,j
pZqY>`p*Qiq!7\>`p<Heq!$c&kN_g-q!#iapZqS=rThVlq<[n@b3JukpZqV=a6NEbp?Li,iTp=+q!#f`
q!7\>!:%SiqX!k?dd6Ynr9a4C`p<Kfp?LAtmHaW8o]sN`r9a1Bp?U/mqX!n?a6W`krTs1B`pEWjp$1H#
kj/-4p$0Q_qs<q?r9VVnrU':CaQrllqs<q?`pEZkna,H+i9gR4oBXE_rU'4B!:7bmrU'.Ad-^Sps6fID
`pE]lo'>T-h<b..nEe0^!:KRHrThJirpB:Be*Q_nrpB4A`pEcoo'>`1f^/Y*nEdmVp$Kffn*JcqmHsB/
ZgIJSddHSj`pNclo'E[Li9ojtn*J']n*Kl;]'[W-!:K:AZgHiAcgJsEm-Of@b3nW`cL0f^bO=fbl0dNu
m-V:Mr9hbsm-W6hq!RM9ZL72Mh='UrbjY/kp[5?Ug[Ok)l0cdal0e34^[KJ;p[7Y@bjXfah='k%kO6^c
kjI['k3qO%[dX1`cg^)ce+!>*k3oVFnF>N.k3pXcmdKu?ZLHQ;q=3S8d.$/coC0Qbddcnso^C/rjmV!o
fC75YjR;m5g@41l`piEcddcDeiUHC,jR9DDrpeS0jR:LcqX<b=ZLI&ImIB6*ddZ;cZLHB6J,~>

%%EndBinary
grestore % PSGState
newpath % image
247.2 410.88 mo
247.2 576.48 li
284.16 576.48 li
284.16 410.88 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[36.96 0 0 165.6 247.2 -.476064 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 77 
/Height 345 
/ImageMatrix[77 0 0 -345 0 345 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 77 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
K&>_J[,C6,K&?Oa[,BEiinh'"mbl.D]\`J@[,9KnhVbcto&%@B^u4nD!8k3@gY^`B[,Cr@q;/mC`8C+B
[,Co?j5/AD!8t9BqV]!Dqqo]UmG@j#\)66(dbsrY]\`YGs5:HF!9)2\l/;<n^>AbFmGH4Hro(BF!9!P-
^u"nFf\bfJr8G3Eo\]H#b22mN_r(CLqr,-Eo&&KaiSO7c^u+hCqqng=cJJ?Qo\dRCo\eigbMU=roABW,
_r(%Cd,3d=aPQFEmGHUSnDLq9p>=!Kn)2gTnDE]mYM\L!k2,C\bMMXErnk'>d,+`Xl/0_Am,7*baPY;"
mbdlucJIjEe)0$>cedgAo%r6[l/984oA@sPjPSeMp"nliYi#95g>:lIdba]Un_haNhVRGOn_N0]eDB9E
r86)_h;6f?qVUJne_]?Ek25R`gtp`?j59gmf&#EEe)1/]h;6oBh;@_Yl/(@Ve_fQHoA89Ygu$iB!8cVk
f&,-:q;(/ggY^`AleqEnfAG3:j5'Xhg#(TAgu/"ciSW2Bi8*kZlJLFSgYh,LptsTXiSE/D!8lYig>L`C
oA8H_in`2Cm,%Bkf\kTCgtqe^j5&5BiSO=eiS`SMdGFQPnD2RNini/ArSFp<k2#=[l/1OXdbj6Eb22=;
e)12_jPJ;AdGEg<khXVCmG@Zqd,2Ilp>5&icemmAo&&<]Yho*0p"dgJlJ:4PoA?h0leV9ke_]WJbhr6Q
\_c]/hqm\Um+okBj5/,=mG5k?mG5qBc/.R=mbPq?mbRm"bhqdDbh`'Mo%_7An(m0ains.[_VOk>!8PNL
n_MRLpttMr_;4b=le^=Oo%h=Co\TN&^tn\=eDBZNoA.CCnD<WidG=NO_;>.Hpt`mGn_VpSkM>mf^u"b?
oA@sQo%q4=rS@8(^u"b?gu%;PoA7.9q:t`$aklaI`S^XOo\R49qV9ERnD<oq^u+hAlJ9kDqqSmAr8%>-
^YebAe(s3Cr7nsAq;(JrdGO]T]\WPBrS5$AqVBc\kMQ'k\D@,=o%qLFqq]'FrSRG-\)%&=gYUiEr8"p?
n_M%;s4kQLp"oZ'\DGurfA-G^\).,?qVJsC`SKq;[bh&?j5/;BYMH\DbhhXARGH0E[GHMkjk[<#leR0K
r8"a:eD6AFn(u(@s4tHFptW74f\YH@rS>!=!8dA(_VN&bo\TN%\_R5AhVHl@[,1]9rS5-Brnb`PnD+*%
[GL`8fA,NDr8,!?s532"bMN$M_;,"Eqqep?rnl;`injFc^>/SAp"d[Er85?Iq;1i$^YJV@i8*8Gqqo!A
o\KQ&_qb"Cb2)aHqVSpAoA/Zdg>)DY^YS_CrnbEHo%hdMn_Efo^tnbBl/("Jn_M.=qVM,+_;4hBe)'KK
nD2(=o%rrndbXTR^u#(Ho%h=@n_W'Wl.tmdZ/,93cJ7pG`n^XNnD:G+jP8kPn(u(?n)"$![GB-`r7p_s
a5-1?kM=>;b1uIArS>WOmG?7HiSD]4lJ:pah;%AR]A<2:c.qO=g>)>Ule\l%p>"?VkM=G=pYPQ!bMD77
inNtWkM=G=l/(UZk2#(QdbF'CrS>fTkha_CrS?Jge(a!?n(cpXkMFM?mbIHieD''?g"cDYk2+G?i8"+^
hV7)HdbOEMo\RsNhq[5Gp"SK^e(j$@ptaZ[hqZf;p>,)keD0*@ina.\hV?`;i8"Cgf%f9Ae(slUjP8DB
hqdSQmG-[WeD90?qV9cYhVHf=rnc_meD8m7o%WE`h;-`=kMH'le_Ss7gtMh`h;-`=hqmq[jk\YGgY;&M
o%i!ShVR&Dr8$&]gtUT>qV:&bh;6f?n(d3`h:pZ>jP9Ocgtp`?f\?J^hV6`>gt_MWkM<Dum+_0eg"kH=
gthtcZ/"6kpYFibh;$Z=mbI<ee_K*;e_L&Vk1eMDa5$"9iS2l;jkKagf%mUdinMr;inNnWl.t7PdG+$A
q:a<QinN)@s4uVgd+d[9o%`3Zj4i)>mG.BiceIU9gYDPYjP//>inX7^g"Y]DdG4BKn_;OKinWGGnD!-[
d+ma;qVBi\j4qo6r7^PlceR[;j5'1[jP7u6l.Z-ldbO!>dG=`Ul.jM;l.Y=UkhP@Ud,!j>!8PcPlIsV?
rnQ_lce[a=leCCQlIsM<mG%Qnce[a=eD'`Ple9S<l.b[_i8*SOakQLBptEpHlJ'tIp>+rfakQ19oA&$S
lJ'S>p"]2paP6+9gt_ARleBY>l.l$fdG+*CakZjLnCu1Cl.jV>q:k>kakZ7;lJ:IUlJ0D6o@j/saP?1;
e(sfTleKM7n(R3bgYD2NaP?IC^"`&1fA,oOmb>e;hqQZ8nCkk9r7^hta5"bjlJ(j_`7sh9p>"'NZJ4p'
`7sh9hq[GNn(Y\4o\')qb1lL@aP?dMnCte5o\&9Zi7mkW`8'n;rn>9Dp"@RDpY5;n`8'n;kM"YDp"@19
p"BE"_qae:dG"*Dp=[::o\/Wdg"c)O_:ne>r7Sm?p"IpNn(dHf^tSP9n(Z:Fp"I:<r7go!_:nY:!8Q8^
l.bmb_;+P7pY*gEpt>]&_qY4Gp=d@<nCumTinF1\s4kHFp=f8rb1uL@b1cXEq:Yc&_;"_<!8Z#Wo%`]g
_V4h=rS6hqe_BiPs4tQIq:kVt_V4k>rS6#ZleD3gs4tNHn([NhcJ&-Jr7o0D!8@8&rnYHHmb?XQjP'La
qqT'Cq:bf'p>!pJmb>k;qqCr#qqT'Cq:bf'hq[;Jmb>Y5qq:i$rS,?HqV(l'akZaJmb>Y5r7Uo$kM+hI
qV(c#_qY%AqV2#(_qP%Aq:s?Oo\95rq:rmBqV(Ytmb67GrRpo!_qP(BrnRD+_qY(Bp"S-QmFqNlp"RF=
rRpr#n_;RJmFoM3!8%;(p"RF=rRpr#g=toImFoM3!8-quptF!Hrn7##`7s\5`7Y.Co\8?YjP'Udp>!U@
m+VKma4UIFo@qIBqqD&&p"[L?mFpdWh:_DS`7k7Ep"]T%`nTk6db49Go%V.;s4R&"l.b%Km+TG3pY5W#
`7b4Eo\@mLo@s8un(Pe7n_;sTkLophoA%=>m+VBjbLuF?aP-XI!86u!`S9_4k1SbInCtq9o%a2uakQ19
ce8-InCtq9o%`B^i7mSOaP$.=rnGHHn_DLGpY5#faP$%:mFp:Jn_D+<p"K/oak?+:f@ocKnD)%<le;!a
f%KKGa4gCFpY<dCle:1JmFgp^a4g";p"RpLle9M7rnHqsaP-+<hV7;Lle9M7mG%NlcJ%aBa4gUKlIsG7
m+^XUjkB.Xa4oq6!8>WLm+]h>r7^MlZJ+WtiS!MMbLu@=rnGQKkLnJ>pt4ibbh;=:mb6LNkLn/5o@irm
bh;=:f@olNkLn/5l.Yd_g"GZFbM)^DnCc.?kh=nHnCd*]bM)+3lIb7Okh=;7lJ'M9k1S59rRg>fc.V@9
le:@Pjk8#5mb7NkcIqI:eCs`Pjk8#5kM#IZhV%/JbhDX@o\%UDkM"YCp"AQ`c._:4pXn3Pk1\/7p=o2n
c._73iRm\Qk1\/7khGmdf%T3<dFe<LmFon>khG(MmFpXSdFdU8rn5`QkM+;9rn6Gedb*[8kh54RkM+;9
kLogedb*[8dFeNQkM+;9j4WkQjk/\Kd+Ra>rS,WOj4W&:r7L,bd+RR9n(QaSj4Vl5n(RKhdFm[:f\6,S
in;f5jP':[h:^rFceA!DnCc:CjP&JDo\&B]ce@C3qq0TSjP&#7pY,&hZJ"<knCZaRe(E^7mFgXTi7QT3
lIksceC`g8f%L#Ti7QT3iS!hTin3;Fdb4'@o%;OFiS!#=q:O`]db3O1q:FKTiRu`5o%NZgdb3O1in*kT
iRu`5j4a=^g=bB9f%9WKm+Kn@inEGGn_)gPf%8j5!8,lTinDl7qUjr_f%8j5l.GCUinDl7j4O:^f@Ss6
e_'lTjkA2:hUq;Kl.=kHe_''=r7]WQhUpK4!8$/^e_&m8n(HgUhUpH3le2!be_&m8f\-2UhUpH3i7[eU
iRm,CeCj<CnCZ@Ei7Zu>pt4QZeCi^2qq'ZUi7ZZ5o@iZeeCi^2jOa%Uhq?T5iS+4_g"G67f@TcMl.OY?
iS*DHnCc[Nf@Sp5n_!!ViS)f7lIba]f[o$6g=ZAViS)f7h:VJRin*)@f%BEEo\.gJh:UZ;q:FNWf%As8
pY"EVgt161o%<<]f[o$6in3qVgt161h:VbZg=P68f%B]JkL\D<h:UrCn^l[Of%Am3rR]cSh:UB3qUt#a
f%Aa/magdVh:UB3j4XCaf%Aa/g=H8Ui7Q]6hq@GMl.FbBg=GH>pXn-Mhq?W6!8-&Xg=G*4o[i3Vhq?T5
ldt[Yg=G*4h:MSVhq?T5gXl;QiRZi;f[oTFn_)LGgt1Q:pt"9Rf[o$6qUjWVgt161o@WB]f[o$6j4O"V
gt161h:M_Zg"5-7bh2+2f[o$6kLf:ViS)f7h:V>Nk1AMDf%B9AptF6Nh:UN7rR]r[f%As8o@`-VhUpH3
mb.0af%As8gtC<4f%As8pY"EVj4i#9o%EHaf%As8i7[eVj4i#9i7\%\g=YB<eCjQMmb?1Di7[5En^ugS
eCim:rS"^6eCj]QlJ'b@jkSqOmG$XSe(Nd9db<g<d+eQRjkA2:j4ikQl.Y7Sd+da;r7]WQjP/,:!8?Pi
ZeOm$jkAhOd+dmBrS>cSjP/8>r7^;gceIX=mbHdVjP/)9n(d]nceIX=fA,3;ceIU;o@r*UkhX#/o\@dI
khXtJo\A`gbMD=9pY4BUkhXM=pYPQ!bMD=9i7mbUkhXM=lJC[Zc/$Y"lJ;Krc.qU@ce[^=bhVL?lJ:IU
m,,qAmbRfsbhVO@dbX`Tm,,qAl.tg`hV@GRb2)XGr84g:f%p#Tle]e?mGIBh`88Ymp>>Z&aPQCDf&-)V
l/'S=mGINlf&#lRaPZdLoA7UFmGH^UmbRs"n)2:Es5*2$p>49T!8[)#aPHpQro!D+aP[!RmbcpYlJ;Ns
nDMCFrnd5)p>FBWlJK\>!8[/&aP[!Ro&8KalJUsba5-gPnDO6%c/8NWo&7[Jr87&&a5?mQn_iKcjPTsn
o&7[Jr87&&s51uVrSI/)bM`?Wr872,a5Q=Akhk@VrSI/)aPcsQp#?#1al2RDd,4WUrSI/)aPcsQp#>2o
iSjUjo\mjKqqq/,ro(oUqqq,,d,FcYq;Co(a5HjPp>Xfbmc"!"puBESlJ_KqdGXoZp>X-OrS[Y4puBES
pYkl+h;RYXq;D#,`o6aOpuD,.dGjoZpYs6P!9!\2pYs6Ppu(u.hr<n[p>Pc*a5QgOq;_>2cJnQVqrGfX
!93A)`o6^NqW$Spjl6!mr8blXo]#`-rSkuZp>Pl.bMrHZp>Pr1`oH^NqW$_tio9XiqW#WUp#5i0s5V2\
o]#c.cJnZZp#5l1`oH[Ms5iA'ioKFc`o?[Mro=(?`oH[Ms5hPeq;h)+roD&YoA]c1lJp[[oATc3`T6UM
!9=(>`oHXLroDPgo],N%!9M2\n`0Z1mGlm[o&@XLp#Gu1a5u[Kf&Q8[o&@XLnDj!!g#]O#q;_81`T6OK
f]DVaZfLT8oAnE^n)MLNqW,3Jn)N3bmH*`rb3&$OpZ0]^n)MLNroES0b3$7rqrR2*alVmMlK7*gZK:T:
rT))^m,ZXXq<#!Em,[TshWF+bc0+TYq<#i]lf?[[p?(W$cKEjBgZIb^bi\T[p#XK^_<1=Nl/g.Ol/hX%
g#o^(puV&-cfaHQhrs[qjQFeMkiM[(f&u2XdHLAg]]\D=j6,jnjlXtSiTJ\QjlXqQrT<A,dceg9lK@9k
dcfcT!9_kriTS\P!9WD*e*,fSlfma"ZKUK7r9)PmioekV!9gfRiTK[nk31def'2D^bNRpJf]iG#hrr_X
h<FOpj65FafBMVbo]Xun\*<hThWWSUhWX_!j6Eu8mca0(f]h5Ug?SCr^$4A:lK[p)gZdMZh<NVWg?IAW
q<?o'h<W&FmcrNjgZme_q<?`$Zg.JQhW`h\g$/(nmH_(CjluI&hWreYi9^C-\Eh`2p?V#0f';5\jQk.X
f';/Yf';5\c0OQYe`u)Yl0@[$ip=)=s6J2"j6Y4[rpAq:ZL$lBl0IBrdd-)`s6[/Zdd$o!jQt:[k3_L$
am@C?lg4N8d-Kl^e*Q#Zd-Kl^md/p!l0c.MqX)Pokj?sfq!@;6ZgI8Kh<aCnbj=rhq<kQUg$J@tl0Z^]
lgF?2_X5P5p[7bCamJNbf^A7smI&'_mI'$%k3_X+ZgReZbO+`cbO,8qnF*[Nk3_0qmdA-_naHJF[I2?-
q<d_@`:!9ejR:F`_s[*a_s[0dc0sia_X@$al0d9np$fBXs6melo^C2qna?,?Zg[5Jf'`;%^@1pg!:dem
s6oaPdI6Jkq!bucqXNk?eF<M,q=))d!:KjUr:%Dg!:KaSddZVmrpT[P^$bshq=*kAcgLl%r:.Ghs6fsV
qXD2es6fjUeF;_lrU9dW]^bmgrpfFGcg^l$rpdYjr9jXV]^bjfs7+\0k4&<;s7*_jr9s+Ec11Z"s7*kn
rp]gRs7*bkqsW2-jmi09]^bgeoC9unq=)5krpmDcq!d)/iplg5^[ga]aRT#o`UWfpp[Guh_t!6dp[Goe
p[IJ=fCJV)_=IBkrUI_po^UE%naj*XoC;8>eai>%`:Nfq](5I_fCJ;!oC9cjiptOgo'sWgrpf[O`Uh7C
lLOK8`:EHgp@H]'ZL[PU`:EHght-+(ZL[MTqXVl$nF=Tk!;!Pfn+#H/jRVd0aRefiJ,~>

%%EndBinary
grestore % PSGState
newpath % image
70.08 444 mo
70.08 576.48 li
248.64 576.48 li
248.64 444 li
cp
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[178.56 0 0 132.48 70.08 -.476052 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 372 
/Height 276 
/ImageMatrix[372 0 0 -276 0 276 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 372 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 372 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 372 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
aP4>^p=tY`Mr"0`cJ5h`r8!.bQ/:rbe_RFc!8iCcU#5h*k1eqNZ/"j)K&*<[h;%;NYheU$K&3]feD9ZN
YMS?tK&=/ss5(rRs4ag6eD5`4_;3/er8"g;c/+'/b21+np"m@<a5;L+eDC8_b1l+7bhT\`K&,5<aP>_0
dbV1bK&5VG`SJ8bo\PYdMr4<aeD%:arnW1^Phkf`g>'!iptgVZS_iMbiSCcqo&#&VVVg4an(Y2(in]4B
YMI^`p=ut0gtmY>\DGEbrS=d9e_bu9_;EJkpY<I;`nc7&b2(4qnD2%=^YXS!e)&1%l/'S>\_i"rgu$B2
gYCK;Wni9_jk\,8\D@)=LYdsGptaBSZJGT=K&;gMn(ZdT[+t0,K&*!Rk1o+S[,($(K&3B]h;.JSZejd#
K&<cheD'lT[G99fK&*rmbhN3S[GB-bK&4?#b2)mM]ACWdK&=`.ceId@bM9V`K&+o3c.qC9dG;+bK&5;>
bMD"2f\W[dK&>\Id+bt`s4r:_Mr"0`fA*ahq;-_[Phtlai7t]qnD8cRS_iM`leAl'j5#=CVVU(`o%^\0
gtmY>YMRdaqqSX9e)#]5\DGWfqqSj>a5)@'_;3Gmo\IF@^ts\"b21J"leTe@\))_ne)&O-hqZl>X5/B`
gtg?4f\PH@Uu$^[jkeA>[b^r>K&2FBptOQX\(pQ1K&)[In(ZpX\(p6(K&*!Rk1o:X\)$'#K&3B]h:q\Y
\(oQjYMJO$lJ8Z"eCsuX\(o6a\D?K-iSD$"dG4WT^"p]bK&4?#eD'HIakXJ`e(r^6f\O^+eD'-@dbM+`
gtgZ?ce[(+dbNa9g"i[bK&5;>eD&L.jkQH`o\IdK_qjG1eD%Lgpt_Cpl/(OYVqq.'gYB<pn_TVhm,.Zs
S)3Vfl.W]&inV'!bMDL?ZeX]tnCtJ.gtfQtaklpOXPM^fpY<:7e_[jnf&-/WYMRpcrS,$?`n]/#YMK66
\D5Zip>!R@^tm]"]AE&5_;3Vrn(l.B\_c&sbMV46b21e)inN/@Wnd7%WSQame(iO/gYC]AUtte$[,0Kl
gtgK8eD99CS_j2!_V`Jljke\E\_H]1YM@X`d+u@iptO`]\_QN,Zea!bhVP`tn(d*]\_Z?'[GK3dmGG2*
k1]L^\_G]jc.ob`khX#/h:qh]]%kWfdG;+bp>3C:e_C/\]A:QbeD@OhrSG'@g=l,PakOD^lJ.f`!8YNI
f\>`Id+kt`n(j\oo\I[Gf%f?BfA3Obo%pM+jkeJCgY165jkHWeqV@Url.k(Lg"Xj.m+e>kp>2b)gYLuI
fA*snoA6V+f&+p5]&*59jP%6#jkR`._;3Gn`n^%;leB&,hVH6.]\_H#_VOA0o%^h4f\Xg.\DQT/^#%T!
!8>'>akYe/Utt7jaP>M(qqT$C_VO;/TAK7t`80)$o\IRD]\_o0S)45&_;<u$kM+SBXk`j0LYVsdbM:h+
i8!,CVqmBip"e*Qf\G09j5$Qgr84%%kMG"Nh:g',o%U/!l.qfal.kCUgY9?qmbPM2aPOhkakcaIinV0%
kMF#2_r&hu`SU(;nCkM/g"b'3YhdX]ceR[;pY3=8dbWU4WnuOfbMD"0rnP-AbMM+4V;LOpa55\,pY3^B
^"i,4PMPKZd+mF2nD):D[b^Z5NSa?bc/%+/l.skFYMT05M;J<ib22%0gY:`BXk`U*KA?O_e(id6eD0<D
X53:%O5BNbgtg`?c/%mFWo!$uSDWMdjkenK^"_c+a5">`\D>ZiptOrc^"hT&bh]bb`SSttn(d<c]\V?!
db_7ddGN4*k1]^d^"^cdj4p<`dG<C/hV/%c^"gW`l.qfbhVQ]:hV7e[`n\8`o%fGbkMFYCi7dPPdbD%^
!8N4_leU1JhV7/Ig"`der8*%^pYOEUhV6i@inU`noA5)U!8c5]iS)Z5mb>#%jkYXHrnQ;ahqQ9.p"Zb,
i80UQo%iE`hqPj"khX>9]AC!Qf%p,TlIru,gt^K9XkgVFg>)/No@gq5e(ij9UtruFg>(iFqV/a>bh_C:
T&.iNfA5H?r7f-D^teP:OPSFBgt^oCo@qLD\(po:LY^eBgt^iBm+g(FZ/#E:K&5bKg"kZAiS35DZeY0.
K&,kNh;%#Df\>TDZeXj%K&-1Wh;$uDd+n'EZJFTuK\labgth)F_qP%B[G00cL"u[^jkJhL^>%]'dbM+`
XkhmiptP)g^>.N"f\NUb\_c,tn(IHg^Y6ufkhDT^]A2H$k1]gg^Y?fambF)`a5,\/inOCd_q`&`o\GSb
e)&p:k1T4WdFu"_rnN+\e_K6?jP&hPf\<dgpt^PXi8*DJinNGIhV>Koo%nuTm,$XUk1S8<m+So&inT.@
mbHsZjP%l5o@p_/gYIJ;qVC2ej4hQ.qV8L7e_Z)<r8$JjkLmW(hV6c=WSF?*kM,dcmb5G1fA,<>UYW32
jP94Yp"R7:d,!j?S_h':iSE\M!8>9C_V=e=NSM;(khG4Qq:j!F]A3>>LY^/0jkSqOn_DIG[G:i>K&5)8
j5&qPjP&DC\D-N.K&#&7l.b@Sh:puE\(p9)K&,MDkM5.Qf%fQG\)$*$K&6"RjPB%QakHOD\D,NgK&#tQ
lJ(IT_V>+F\D5?bK&-F^khP7R^tdl(f\NUbVr$Okpt>5k^tR5kkM)N^WSHjpn(RTk^t[&fmbF)`[GC*&
k1]mj^tclao\GSb_;=>1l.Pa`bhBV^s4i4]_qaY6kM#@Ye(_Fgpt^PXce[mAjkJtRg>'3oo%nuTgYV,L
lIjkEkh<W&inT.@h;%GQkh=J>n(YD.gtdS<l.t[\k1e)7p>!16f%u#8o\SiglIj#-rnG-@`nZ1$pY>5l
kh<i,gt^fBUtq^"m+hBjn(YY5e_TBDS_gF(lJ:p^rRo!?a4p:ANngemnD!3]rnG?F^tehBLu#YumG-mZ
pY<pH]%mACK&4K'leUm[lIsnE]A)l2K&"H&n_<<^j4iJG]%lW-K&+r4mbI![gt_&I]%uH(K&5DAm+q!\
ceA!E]\CulK&#A@o%WH`a4pIF]A1`gK&,kNn(d-]^tcQXaPMO*q;1Mpm+K5/fA#HBS_TXgo@s&oo@h%8
d+n!CQeeLonD*KeqV/jAakcREOP[4umbR6_qqB*E^"WPBK&!]fo\8Zbo\7[G]\NA>K&+2tn_E?_mG-7I
]\W29K&4Z,n(mBahqI,E^"_W'K&"W+p"Sfdf\>]G]\MB"K&,,9o%`QbceJ'G]\M&nK&,GBo%`Wc`7k7F
^"^W`K&#PEp=noe_V>"D_;)o`K&-%SoA&Zc_V<\tk1lN`RGIJipt>Ao_V35go%T;^T%s(pn(I`o_V2o^
qqHq^Vqh%$m+V?ka4n;_!8W7_Zeb9/mb.*`e(VLio\>&R\D6l6mb-dWgtKHrleI*I_;+h?m+UCPj4h9&
jP>FDc/&'Jmb-.Emb5D0f\D)6e(j`Qmb,h<pY*@9ceO--gt_\Zm+TG5rnG0BaPDI(kM>jen^t_3p=dXB
]%_hklJ)6jn(GS3e(a6DQe[e[q:k\up=dC<bhVgFOPQMapY>;ks4P?D^Y4:oU>,V"n(IKibM'_cqV6\X
Xk`d-mFq*bdbDOloA,#S\D?r8n^upUi7Ym!jkGCA]\ED=n(HONkM!]*hV<_<a5$RHmb64Gmb>M3fA2&7
dbX`So%;%:qq8d=akMF%f%^2XnCb\4!8G?E_VBauiS=@cmb5P4q:s$G]\S1qm+qNno%:k5ce@sDQJ;>m
ptV1is4[8$q:W[>aP6LEMqj]TrS-ep!8>?F_;,(GK\`H[qV:Yop"@[E^tSJ9WnZRhpY2V#!8?trmFp.F
^t\;4K&!]frS-epk1e_H^te,/K&+/sqqUeqg"G]E^tRJrb1kV)iS26(!8?trdb=9G^t[;makZ:>cJ6\"
rnHnqbM2jI^td,hK&,)8r7pnr_qFtA`nJ,\l.aV@b1k_+n_(h6p"RaG[bU0'iSD'"kM6*ln(P\6dbO<H
PhhDVrS72#r7Js@`7k4EVq^+amG+Ypo%F#r`nJ5_rnOF,gthnaUYGk(nCmWkc.g%hpYDb'l/)'gWnmX/
o[rH^g=a<rl.a)0`SCFHYM8X$j4`JG_;!u)`SAhrn(bJ/!8I"sgtV&I_;*f$a5,V/hqc6,rnR.uce8$F
_:m/gi7l$%jkIr4o%D+<rS#*B`n]Y1akbS(e(jHH`7t:H`8&,`kM=\FaPG_/s4m8!`7a\7db:t\rS+s>
bhM76o@_%8cJ/$HWnc^li8(KiptGSu_qW5eqqS.+iSO%[Vqh@.p"9/pak=Pbq:iC5bhVR?ZJ5!(o\.^H
_;"P9]\LQ`q;&4/n_3Bbf\=6tleTA4aklpNYh]<7p"83Ujk7N)h:pH6ZeYN6\D-W.g"PfH_V<Ysg"a3q
nD(k8n_2FGo@q.;ce[I6_qsG0b2)aC`Rt7E_qMr]n_:8&jP//<o\%.9qqK6I]%m#7[b]Tkgt_JS`7sn=
cePn`qq]$Db2)18p=R=:b1c[FZeO-feD.Rgpt>W!`7i,`!8Fd6e(rs<[G:?,rnGKJ_VG%E[GB-bmG>,(
p=SogeChanmG#_:]A2f/]%cl1lIt"H_qX>/c.ob`q;&O8o%N-YinMB+hqcc;[GLi;\D?l2f%KQG_qNMm
jP-Kcr7f'Bp"@XEpY*L=bM;C<X537"b1u[C`S(=G_V;r_oA$D&k1nG@pXmF;pY*mG[bIM2inN8Cp"@:;
nCuII[G:Z8XkhR`jkTO^`7iDhq:i=4f%nd1]%m)5!8,6C`7k1E]A(E^f%e$ppXo;pbh9qgo\7==^YI`%
^YAG7o%MUI_qXS6akXJ`leT5/pXnZ^hq>p$inN)>XPE=#^t\V9hV%,G_qNeui7k$^q:rd?p"@sNn(P\6
dbO!?U##\&_;+k<b1QXE`7`)_p=b_bqqB3Hpt3O<s4YKH^"`J>R,%2ce(aTL`7k"@c.f__!8X:'jP8PG
qU`[<le1"F]%ZZ.U"eS\jkBL^`S&;crS"j;c.pFr_qXt>s4PBF_qY1G]\LQ`e_S$rqUbGnd+H:inCl+?
\(fNha4g=@n(H=G`7jJ1dbD%^j4qT-p=\Z`hV,p&inW2AX537#_;+n=gXtiE`S&bpkh;N\n_;.=pt4*L
o%D"9c.h[@Q/)>n`S:.?bhDmH`S8Dfo\>bgqV96KqU`^=r7T6G]\<A>N8+*\e(XWM`S'n;dFu4eptV4k
m+^=MpY!O>mG$:J]A2r4UYXk`jkTab`Rr/_!8>-?`nSAbb1c[D!85BF`S1.B_qVu^c.pCppY#Arc.^.k
o%_CC\_Yrp`SC@Bm+C%E`S'A,g"NI\gtU$+q:Of^iRu3(hV6uCUYP%fakQRChV.2I`S9#"k1lN`oA.FA
qq'6Jp=R@;akHFANna9^bhDmFb1ZaH`S/2`r7d"^b1l^E`S1=GaP4A_!8W[kp"\$Or7Ap?n_)IG^=r,3
Ok]H\gtMVW`S'P1gtKKslJ.obkM,+Qpt<X?a4pXK^"g]b`8/Mir7Co"ak4Vdp"IRB\_G0ZcJ&-Ip=[gG
`nKk8dG(t^dbN($pt>,if\4=!kM4\EXPMahakZgGin3>E`nB)"k1ZB\iS2]4qUjQUm+KA3e(a9EQJCi^
c.i$HeCsNJ`S8VloA#G`pta*Jr7B!A!8,9D^tJeCK%p1Wd+\?K`nC7CbhBhdq:pb\r7f]Tq:Wa@o\7jL
^>/>9PMP``gt_hZ`n9J-i7Yp"jP-!TmFp[Uqq/m@`nLII_V;o^^"grgq:Pc%`nJGeptWsG]A:TbbhW0K
o@VOE`nB\3f@m=\bhLS"qq18ggY'R"jP/MFVVKeYd+eBLjkA_J`nT;(jP6B`j5%u8rR]]Sn(>Y5ceA!E
OPApPe(X]OdFn6H`nJMgq:ge^o%_UHq:WpErS#9G_;#%GKAHL^cJ8BM`n:(>ce6.go\4uP!8H#Wqq/pA
n_2RJ_;"A4NSO6^gtV\Y`S0V3h:od$k1uE\leLUWrR]'Aa4^@Da4e2\\D,Ner7Lu$ak=_go\7[G[G8[T
dbFWOp=dpJ`nTn9e_I=`cJ?k&rn$DehUoj$i7d5FT\IoLe_9rRin<GH`nK,#lJ%`^h;$K6qUsWWm+TJ6
dbO?IPMPHYdG4`QcIhsF`nA>bs4W.\m+^+Fr7K'C!85BG_V>%EK&$+UeD'iQ`nL=Ec.g(ip>(DXs4l)Y
rn#0Bmb-=I_V45.Lthg\gtM\Y`nBP/iS)0'iS9XPnD!'Zr7K$Ba4gIGa4n8^\D5Tgrn%&"bh0thn_2IG
YhQnHf@p5Uo%;LFa4]\1gtJ[\a4o5"r7L>gh:]g%iS3DIT\RuNe_:)ThUh#Da4Snpn_')Zf%Sj2rn#cS
n^tk7c._sHMqd4Ff\6;Vce8*Ha4eMes4`4^m+g1H!7o3BrRf<G_qFb;K%f_JgY)VY`n:"<db2Oln(WHK
qqKfXrRf-Cn(QIK_qXD1Ltqm^gtTj#in3DG`7`kuN8"$Zjk9[c`n8>bq:a'H\(e7Dg"QDWr7T9Ha4g+=
e(_+^^>.>pn(64Da4TM,iRssZ_V3eus4?Jehq6$'h:h)HS(l3Bg=lMXiS!DIa4f,!n(X)^f\G-6eCX<D
aOnVfr7QkZh:gZ;s4>NJqq/sB`7k7GK%oMDg=lMXa4UIHaP+SeptUJVoA&!Qa4Kq8e_%jolIpjDpY+HV
s4><Dm+L1I`S0A,KA-C[gtMb[`nBJ-j4_K,gt[qFp"ST_a4JAap=[gGZeDV:h:Ve[q:O!FaP$"8f@m=\
\_Gonrn-epe_/$tkM+kJV;0#Eg=tcAin)9(g=biGQeKR8hUqn\hUq)FaP#%ro@f;\eD&d4rn,iUnCbn:
bhN!KM;7"Dg=sg&rR]-C`S(.BK%f8=hq8"]`n::DbLskgo\4uPmb?ROrn,9Ep=dsK`S9e8K&$1WgY9d#
lIb"H`nB8'K%g4Xhq8"]a4TD)k1Rc.f\;;<q:ararn,9EaP-FDcJ,b^Z/"*gpt*pFaOoh3gY&OZ[G'Ql
!8$_mf\"9ujP&VIU"dB;hV.t]l.OtIaP,J)l._Z^bM:n-h:M#FaOnkmpXtMZd+[F2!8#cRo@V.;akHaJ
L"kA:hV/"^c.VsHaP+YgrS3"[k1nbHaOg=AcIg.inCkb5qqK0Fle::M!8#9Do\%dJ`nK\3K%otQhqJ+_
a4]h5gtKd&inT.@!8QDbaOfA&l.F&0eCrs:n(Y;)rRp;c`n8Ddp"IjJZ.lD8hqJ+_qUs0IaP-(:g"WO^
\D5opn(6:Fak5S*k1R<!khH*j^"VGuk1J\GaP#;$mFnr%pY>/jaP5V+s4H5^l.O/3e(aNLO5/1=hV6Q3
p=IC<a4UIH]\;E#jkA>?in;N-rRf3Ea4g@D^t\83fA#<>i7e4`a4^IGbM("ko%\iPmG-RQak-(8f\"6t
jkADAhqQB/o%N*Va4T\1hq?'(hV6oAkM3i,rS-8as4GBFj4`YLa4o5$iS=%\\(pi7jkIo/aOp+;e_.^k
nD!<a^=qW#pt3sGaP#q6gtKHrleM<k]\DE!s4Hkpf@e:"jP/bM\_QQ-r7o'BhqR;FjO_N+f@f]I^Y7>p
rS#3Dj4W8@le'>4d+\9K^>%Q#nCu:DiS":ae_0QIaP+bjs4b3AkM>1Rg>(T?bLcdGak4Yep=daEe_B-<
hqI,Da4U=CcIp7ln(Z:FgYCE8lJ(:O!8,?Fo\.jLa4oh5fA,BAbM;aFi7lB*kh+nIa4]5$kh=M?akHRE
jOqW,i7[AJaP,+tmb?CL_;"tCjk@f.aP$4>e_7gnn(d3`_;!u'pt+!HaOob1i7Z!$inNqV_qO2)n(6@H
aOoG(l.Nr-g"Z;V_qO2)k1J_HaP#8#nCkb6e_L/Y`S9D+h:D&Gak+bhrRf'AakHXFb1Yq0eCXHHaOnSe
rn>EHc.haAe_9*;bLlgHak=_gpY3sIe(j$=i7m8FbguO?dauRmlIjtGa4fM*jk8eKb1H.8g=XI!j4`PI
bM1V%n(QmVaOob1iRu<+gY:uIdG2n!qV1&abgtS$mFTG3ce8*H`S/Acs4QSfb1Fbfn_)RJ`S0M0j4hQ,
jk9F]dFcRolIt.L`7s8+n(bk9j4`tQhU]g#h:V)H`nAeoo%M+:kLeqKjk%W,f%KZJ`S/PjrS,?Gjk8JB
m+BG5ceA6L`S8Ymq:j0Kj4`#6q:<[>aOpCCbh9kep=[mIkLdu0!8#?FaP$4>e(VjslIt(Jjk7`-qq9<K
aP-%9g=sg+hqR>KjP%i/map7GaOoG(kh3f+gY(uIkLdr/kLehIaP#8#n(Pb8d+\6Jk1Rl/hq@;JakG.s
p=m^E`nLLIjk@r0ak-"6gXsR"inE8Ca4]\/pt+!Hak5h1in;B+gY:uIa4f\/n(?CIak>V+l.X24eD0]O
a4o\/k18_Hak,%pp=RF=a4g=BaP#e0h:M,IaOnbjrRo6F_V>+Eb1c"2eCaKIak=bhrnGTM`n^4@e_B0=
bgldGb1Fbfn_)RJ^"Vr.g=b]BbLcOAdb)XolIt.L_;"&)jkAkMak6.:g"FI#j4i_N`SB/$n(ZsXbgtn-
jk%W,f%K]K]@tfgp"AQ]bLbS&mF]M5ceA9M^Y?obs4ZYhak4_go%MaMaP5e2i7uE.jkBL\f%.spjk/YH
ak>;"jk@f/l.GIVh:Kd$hV%8KaP,"qnCu%<kLo"MjOhT-f@oiMaP4hlqqT9IjkAPAn^bh6b1H^Hak=;[
s4YTJl.FM;pt*X?ak?RFce?(eptF0MkLn&2s4GHHakHCAf%\$rmG$IOjk@u1p=IgGak5e0j4Uuskh4tK
l.F22n(?CIak>V+lIrr+h:h8MkLmu0kh4tKakGG&n_:n8dbFQOjk@u1gXkoGak4hjrn4g8cIr0Ll.F22
ak6+9g=aX&i7m&Ab1c%3pt4$Iak>q4iS)H/g"bcGakPt3n(-CIak,>#mb#\8bhDF;b1Z%3k1AbIak5.s
p"@LA`S:.Ab1c%3h:V,Ib1Y%nr7]<J^YAhDb1l(4eCOKIak+Yeq:X3L\(^`4d+R[9bLakgak?7=g"O'm
nClUMkh4)1qUs9LakH%7i7l!$k1f"Pk1\)2mFU1Gak5J'mFer%iS!PMl.F22k1JbIb1YA"p"Ht2f%TfN
kh4)1hq@ALakG(qr7ep?bM*$Ok1\)2ak,t5gt9g'h:gQ9b1Z(4pt+$Ib1Pk0jOq]0f%]9?b1c(4n(?FJ
ak>S*le9M9ceS!Eb1l(4k18bIak,"opXm[B_V4Y9b1Z(4h:M,Ib1Onjs4PQK]A*A?b1c(4eCaNJak=ei
r7fQP]\N>;e(a$=c.;pHbLanhn(HLL[G(6*f\,QBbLcOAe(Ddqkh>(N\D-9%j4`_Mb1Q4:g=aU%iS3\Q
]A28tmb?mXc.:t-k1@c.eCjTL[+a3do@`E]bLbS&mb#Y7c.`3O\(f3^rn?Shb1Ohhn_2[MbM1t1gt^*-
k1]U\f[\*pj4EJGbLk7rhq?3*m+:^Whq#p$gt;)JbLt%llIsG7lIb7Nk1@c.eCjQKbM'kgp"R[Dkh4eB
o@:t6b1H[Gbh0DXqUs'Em+9b<qUWg@ak6CAeCh1^rRoNMlIa;3b1Ohhn_2aO\(gK-g=kcDcdh[=f%/!q
jOi\KYM&<qhq7;Ic.;:6hUfm%h:_8MZeFEllIkITbLbn/jk.].f%TiO\(fNgp"JW_cdg_"n^bk7bLljJ
Z.[RXqUk/dc.:%hmF^7IbLt\)f\4O%lIbm`eCVjqk1ShKbM(M$j4hc2kh5FTiRQ'$g=PlHbLjnhkh4/3
m+:CNkgmo.db+?IbLs_co@hC@lIaqEnCPe7bLupKbM'P^rnGWMkh4J9r7/p?b1H@>f%@1Zs4GTKm+9M5
s4>KHak6(8h:]-go\%mMlIa>4pXmsIak>n3jP%)tl.Y1Okh4;4ldjtEb1GD#n^t%ujOi\Km+9M5jO`SH
ak5+rpt<"-g"GuMlIa>4gt;&Iak=qms4Xs:cJ&9Okh4;4ak#h1hq-'(g=b'1bLl15pt"$Ib1G_,k1Il1
e(Wd7bLu15n(6FJak5G&mFf\:bhML=bM)15k1/bIak"kkqU`pC^Y//1bLl15h:D,Ib1FbfbLsDZr7]?I
lIaV<q:Ea@ak?OEdb;1bqqBHOkh4;4rRT6Eb1H%5hq5-cp=RsKm+9M5p=IjHak5b/k1R)ple17MlIa;3
n(?FJak>S*mFo&(i7dPOkh4;4in!>Eb1G(oqUi")gXu&Km+9M5gXkrHak4eiZeEdZr7UAfbLanhn(HIK
bM(h-g=sg)kh5a]f[\*pj4EMHb1P.qhq?3*m+:^Whq#s%gXtuIbLt%llIsG7lIb7Nk1@c.eCjQKbM'kg
p"R[Dkh4eBo@:t6ak$OFbh0DXqUs'Em+9b<qUWd?b1QLBeCh1^rRoNMlIa;3b1Ohhn_2aO\(gK-g=kcD
c.;U?eCVjqk1SkL[+aj!iS!MKbLc48gt9a%hqIJO\(fipm+U[Vb1Pn1j4VQ.f\?&Q]A1rkpY4iac.:Y$
n(5_7bLlmK[G&s[r7UAfbLanhn(HIKb1bb-g=sg)kh5a`e(Ddqkh>%MbM1Y(jkS&6k1]:Thq#p$gt;)J
b1Xtlle9M7lIb7Nk1@c.eCjQKb1aegp=maDkh4eEmb#Y7c.`-Mb1jVb!8PcPk1\>9qUWd?ak6FBe(M._
r7TELlIa;3b1Ohhn_2^N\_HZ.g=kcDb1QOCdFlXqlJ(:P^"hc)jkJqObLc48gXs[%hqIGN\_H#qm+U[V
ak5h1j4VQ.f\?#P^"h,lpY4iaaP#M*lIsA7dG4TR_;38h!8HVibLakgnCcOKb1be.gY9m)kh5a`db)^q
kh>%MakPM(k1n,6k1]:Wg=aU%iS3VOb1tD#n_M@CjP/hKk1@`-e_0WKb1ahhpY3jEkLn\DmF]S7c.`-M
akOSc!8GZNk1\><p"@I@akQgMbhU+lp"\*QjP.l0ak4_go%MdN]A)i/gY1iDak6ICd+QOpleC@P^YIr*
jkJqOaP$.<f\4I%j4rhQ_qj&%nD**Zak5h1in;H-g"Z&O_;*JnptOoaa4]G*lIs>6dbOWQ`SJVj!8HVi
s4PKIakQLDe_J7%kMG4Takbt3pt4$Iak>q4iS)E.g>(oIakPq2n(HCIakGb/khF57e(sWOakYq2s4QVi
iS)E.g>)/Pakb1trnb`PinWABmF]P6cJ&3MaP4VfrnGWNjkA5;o\%@?akQjNb1t%noA%pPj4jUec.`*L
akOnlpta?RbMMI=iSEJJak6ICd+QOpleC:N_qa;,k1f"Oa4^(<f@n@$jP8kPa5,D'n_E0Zs4PHHm+^CO
akY_.m+okAc/&<RiS;K,iS*PMakP8!p>!dGa5$^LjkKgga4eYip>"0Qa5-":jke&6iS=Ccr7fKNakZ=?
gYKp,ins7_a55_0n(HCIakGb/kM+&4f%p&U`n]V/s4QVii7c<-gYD8Q`nett`nfV/rS$5bkhF26eD9iS
`no2%p>43Rhqcf8o\%@?aP-^Ma5"npn_DaOinOLdc.`'KakOnlq;'?PdGF!@iSEJJrS#<H!8P`PakcLD
e_\j6g>;2Qhqe=ca4g4@e_A1#kM>%Odb`I/o\JH\s4PHHm+^COaP>Y.khX\Db2*$Pi8":ba4o_2jkRr5
fA>uQfAFO'qq^Ais4PHHakQOEe(hmtmG@'``SKJ-rS%2(bhL7pn(l^R`89Y6o\[UDhVJ(`p"\$Oakc1;
iSMK0i8=Un_r'8+s4QVii7c<-gYD5P_qir$rS>NMi8":biS3PMakYD%p"dLAgu%\Zdb`j:qqKi[mbGq?
c//BT_;F81k25"Pgtr%`cJ&0LaP4ekqVB<Mg"t]Dj5&VJrS#<H!8P`Pa5-@Dd,*[;e_]]MhVJ(`a5$LH
dG;n#leg:Njl"8<ptsl`rS#<HmbHRPaPGh3iSNPN_VP:Lh;/%`a4o_2jP7i4f\YoMiSVK.q;(/gqqK0H
akcgMcJH=npYbZ$^Ydf&r7_,(bhL4onD2dR^Y\>7qVT'Eh;.t_p"\$OaPH+;i82-(n)4'"_r'5*q:tDo
g>0m-iSWhUSD_]Ng#)_]inNYNaP>>%oA..;l/1g`e)&p:qqKi[mbGn>cJJHT\_m)<gu$uGgYVb]e(s]Q
aPP"q!8rIel/:7Pr7]3GakXqmo\R[Gn))CHn(ujUqqK0Hq;'ERa564@K&?F^g>;Y\a5-=CfA=R*k2:sO
rnlMgqV0'GkhY7Sa55S.NSjHdjkfjga5"emqqfTS[bnCJg>;Y\!8Y`PaPQRHeDIIf^#7Q#qV1`!dbMt#
l/(:RV;K5Kg>;Y\mbQUQaPPq6k22`fcf!I5pYG#hiSMZ5gYhJWQJpQVf&6DZgYD2OaPG2!q;."di8<5E
ptXBTo\IXGa56mSKAc(RfAH>Ybhi9SaPY"qqr*.cp>OQ[qV0'GqVBKRa567AK&?I_g"uMZa5-@Df&"I)
kMV-Rr86;epYEjGm,-[W`o,e6P2Yrhjl#pha5+hnrnkiT]&:$Tf&-8Xa5+hnp#"3TZ/ECTf&-2WqVKNS
aPZFDg#/mhb2Lk.ptY>og"ja+j58qTTA\,Tf&-2Wkhb7SaPYe2len/hgu6c@o\SQakMOA=e`$)XOlGQ`
dc'uVeD9cQaPP"qrniFfmGQOPp>+!MqqfEO`Sg^RK&QL`e)9lTa56mTal(.sp>U_a!9)DcptWmFo\S-T
`o$%=M;\6fgu%h]a561?gu$-0io--\n)3<co\RXGal!0W`SnSk]Ah5sptbu+`nneopu'HU[Gf$^dbsiT
qVKKRaPZIEfANahbi.".o\T2se_eF*ki(CWV;g+dd,F]Skhb4RaPYh3l/8#hhVlo@o\SQak248<f&?,W
PN(idd,FQQg>MDWa5PA(pYq.lo]+6Vp"dpMqVK<N`8L[SK&QRbdGXZR`o"kq`8ULNL>r0je)BlT`o-^P
cf)h%n`,blo&AHap"d[FmGH[U`8Kb9QJq5hjl#df`o"qsrnt`R_W&8gcf+ZVqqoEOaPm'VaPshlaQ(P)
oA9H'bMU@uo&8'VYi=$hcJeBOo\\0Ua5H4@gu50jg#C<9o&&flgYg-2io9"XT]>+nbi86NinrnUa5GS.
mGXAjm,H:Kn_`*ZmGQ%Dd,O]WO5oupbMr$Le)BrXa5Y5$qr<Oo!9;5^oA7OF!8kiT_r:LPLuS<je)BiS
a5HgQcJcY"o])1rn)E-^n)27FoA\<[_W1%ETB,(njl>mg`o,,#qr,HP`oFqrb2W3RqVT<Na5R$W`o=\l
bN$b)n)27F`o?aQbi?1nf&Xp4n_a&udGW((m,HXVXQ/0tal;jJmGQ^Va5Q(<i8UNlkMs\Dn)3?eiShi:
guISXSE08%a5c^IgYhGV`o5A*n`#_lqW#ZVn)2^SoARaLb2`9WO6$9"b2_mJc/STZa5b(uroB=*o&S9\
nDD:Eqr,cX_;b4LQfIGlgu@e\`o6RLe)J4(nDp>)iT'%[mGZ(EdGsr\_;rl&alUG$pu(o)`o4tt^uN>n
dH&7+n)+3(`o4ttpuBKV]&_T+`8g7DqVocZ`oHUMd,_OpjlOA?mbmTnfAXa/kMt:VWT<I-_rL1CkMb@X
`o>k8j5Zfnp>j-Om,?m^kMjMAfAu5XRH;9GmblXSo&7UJbiA?UQfRu&b2_jIcJnZZ`oG&!qrF7.mc;jX
lJfkE!9;)[^?)'NioT"X!9ES+`o6UMdGhq$o]2n1h;dVWm,>tDdc:#\^?!]'c/l_$pu:o)`oG8'r8bQQ
bN@L?^#]7Tn)=9)`T"ntr8bcV^uaM9^?"Y>qr5fY`oH[ObiH7pl/fY?lJhHre)SF.m,c[WZ0(`A^#f:T
m,@3gh;ZH7iT/eTVrdj<^#\P=i8WnY`oG_4jlE/trT(fUlJgLWmGl4IdH0`VVrmO2biSlclf$1Lpu99Q
a5lsTUugn&eDpVilJfkEs5V)Z^ubOVWTN(!hrXjuki9YCr8l)_]B9.VZ00QtlK8$+lf#kCe)U&[]B%Q)
dcJ+%!9<k6o&@[LbiJW]]&h<$hWDE2roEP.qW#QU`T=Ymb3/'Q\`WhOl/M^&aQ(8#pZ9?T^ZP(K]&inO
l/MBrdGr4,mcD^T[c[GK]&inOkMu!kg#U*5kN:7U[HIJM^?5=Sl/La`j5\,>gu[ARZKCiA`T@'Zl/LFW
m,Q(Ge)f`RZKCN8cK5#ckMt%PoAmmPbi\9S\`_l4g#i1nl/KeEro:rX_WCOR[H?-'iT:!ukMsPBrT2,^
]B9(S]B@E#m,n0+jlFDBg?._`[HHW7i97T3pu_A2n`%OJcK+c][cQ*&jQ<o4r8d>,q;]HT`o[6^[H>j!
nE74AqW6l#!9D,\`9.!\\ED'!rTLTNpu^`!puK`]`9$RP_rel"roU]Pq;pc!n)W*]`9$7GbiZh+p#a'P
q;p\ukiL[_`9-(BdHA^:ki^.PpZCVuh;mh]`9#V5gucZ?iTASNq;pc!eE$2]`9#;,jlXVHf]LrNq;p\u
c/nc__rf&'l0$FWbNJ$NpZCVu`8ps[`oXnrp#aH\`9-LMpuUSt`T>k:l/o/3mHEfuY35N@puUi'`TG\5
nE6e7lfn3/Wp'*<n)O0&`T5,%r8k-Eg#r1oY3,N@k2cR'`9"o!s6$NIh!"XuZKLoCioU+#al^M(punpF
lfm]u^$,(Nj5fdmeE+U1mH;.Fj65Uf`96gUj5fIdh;uQ:jQFMFj65:]c0+c^ioT.]jQ=ACh<9ISf]_qi
j5ehRmcD@Ke*#-An*%^Qi90apj5eMIpZ9<Tb3.LAn*%CHl0%^$iT8,BroV,]_ru^9o]Yl/j5e/?h<*k^
S`cC'o]Gr1lK,tHf&uG`QKY..n`TB'n`IdQcfk#bO6Nk4n*&oprT(rZ_WHI5[-.&CiT:%#aQCA&qWNOp
^Zb4NhraXqcf`..o]^tlb3ABYi8s=fg#g07l0*`_dcg2`i8s"]io\,@i95dVgZ\.ihWEVVl0#qIg$++Q
k3;<ti8rAKo]F!QcffuEmca-&i8r&BrT:rZ`or$<pZV)/hWDc>ioo=aUZnE8mHF?,l/fhFf]VP_RHUO3
n)s0%nE.XOdHL,aP3K::m-*TppZKKYam&TbMsA"@lKR3fs5q>`_<:d\K':)8mcWHhpZKfa_<CUWK'CPE
m-*6fnEABc_!1@RK'M"RlKR-ek3(Xb_!'nEK'D4Xlfd0eh<4"b_!'S<K'DOalfd*df')Sd_!0D7K'N!n
l07$dbNJ]a_!&u+K'E3tlKI'd_rp+Eh<:a#U?Ut,pug`$_s#q@jQW<%Xm5-7n)j'#`95S4mc]r#[HZr>
k3)I$_s#;.p$%M%_!:+Ih<=h$_s,,)r9B('bNn9TgueFqbNHY(qWWUrd-9fYg?8%jdceI1oBLqmh!4%d
f]_Ycg$-9:m-B8hkNh3og?7DXjQO>Bip)-\n*9$!g?7)OmHD:Kg$41Sq!-u*f]^]Ho]a*Tdd)SPs6A_2
g?6?:kip^`XQlbLjQZI&j6+;Chs'(`U[#,LjQZ-slKH+Lf]qYbSEmiRip,[ho]O-Uc0=c_P3TsMjQYLa
qrkr^`p3?aMsJ^TiTf"Ys6@Pf^[(pcK^@FZhs8nXp$'cd^$>FZK'VF^i9JqXm-3-d^$>+QK'Vagi9JkW
jm(^f^$FqLK'`3thWreWg?Ikd]^"D?K'WF%hs/hWdHU5d]^")6M!Os'jm(C\_WpOSd-J%)YO(*2pupW!
_Wg+Gg?P['\*Mo9n*'!!_Wfe>j6E<'_!BkBk3;@!_WoV9lKal)bO"$Mh<=_!_Wf/,o]hM'e*GiTeEOj8
_<^s`M<s*cg[!;QqWl8h]'P%9lL!6jeEQGee*=O1p[!Luna+uqeEQ,\h!2K:md,PlqWur%dd#`Uj6O;C
kO"&lr9W5*e*5EJmHV:Kh<^3ho]tW)e*4^6nE\9`\EpThf^&=tg?QN?l0QjbZ0f<nf'MkijlsVHhWrt_
VsMIjfB_S`mchRQea)>_T'XhjfB_8Xp$0BZcKsl`R-iYqea1fMs67Ab`9[-_NU5]lf'C]Jr9MAg^$P[`
L[FQte*PEHo^'ih\*X1`K'rL'dI#<GlKd*g\*WeTKC&[*e*PHHiToIg\*WJKN:$B+h!E>Pg?e"h\*`>G
R-s;-jmCF[_!CXZ`9b8+]C"#4q!-Pt_!C=Qc0Vn+`9kt=n*Aot_!L.Le*XC-d-f3Hk3D6s_!B_@h<_$+
f^7#Oh<OUs_!BD7k3SZ+iU+tXeEcts_!K52m-U/-mI&3ccg(Jp`9Y2)p[!k+o^0rjc0P)ibNub+rU#@-
!:J%tamAQbdI"=/s6ks9p?pDtbj4BWh!DB7p$S+5md8fsbj4'Njm9>@m-^J5jmD0sam?k2qX1o^b4!@=
`pWWfea(!:nEn0]^[BA7aR/H^hWqrCkO$O][dM`7aR/-Vj6XVLi9o%]Z1$]@`U;RJn*@aTf'V;\VXEa;
`pM:Aq!5]]c0aZ\SaQ+;`pLt9rp7Gf`pW3]QgatC_sY_6q!?)g]C#=ZP4&88b3d79oBjlk[-mk[RIBV4
e*b3Bm-`HmXm_tQipY[ka6_dPi9d]8p@"sKg[=1ka6^V/rU-uZdI5?K^[CmacL&F8p@#KZbja?U]C54T
f^-E@m-_aY_=-@O^$b%LiU"AIj6k+Y\F8_O^$a_Dkj?1Rh!`VYZgd_Y\aS&7oBa6ZddGlXW:0`S]C*l/
r9V2camS6XV=4<L_=#8/s6d_k_XHaXXmkcIb4!=9p$Kuj\*inVWUK$<e*b-@mdANkZ1%JVZgcZ:h!Y71
_X?UUg$bs1r:%DibOFW__sP8-!:H]Phsf@hZL@SUbjE15q<tHSf'q_hZL7e\nF"cn^@1[_Z1-33o'rgN
k3_!l^[C=S]^No1q!bKUh<j@l^[C"J`UCP1YODMYf'_qn^[KhEaRI@Bo'j0YbO,)l^@';8eF1BGlgM[Y
_X5)*`UDXO`UMmUb4#At_X@9h`UCP1hsf(ae*tiU!:7SinF"Wj[.!AMbOEdFh!b70_X?[Wf'fa1m-rg#
]^Y%PrU.Mj`pifnMXcVprpBUNaR6b1s6u<Cmd^5FRIL4Co'Xon^$k[aT()"7rU?BIr9in>f^HNCn*u#"
VXaZQi9oUm^$k(PK(,u5rpA>*lgDITh!fpb\FBFad-pPo^$sSBK(6\IrU%Vmr9h8ebOC,Qb4,As_=%9j
_=,81K(.7YqsM;hp@-/m]CCLCh!t@1_=$XXe*jO1K(.mkqsM;haRJllNq&%tq<n=Q_XPD3r:,R5Q1=qF
qX4(GbjW46r:,C/SalREmI/To]^YO_K(5`.q=!G7h!huHm.,c!Z1@qbqX3,,kO6%PiphWj\a][hqX2f#
nF+!Yg$s[a_XRWqq!ZDqp[Gfbddi"\c1:l(qX2/f]C<o3K(7@\!:]jQ_!h'f`:1P3K(7[e!:]dP_!pma
bON+5K(A0srUKXN_!oV=n*uY5ORi>>q!S4O_!o;4q!j:5RI^:Gp$hkK`ppb5rpkd7V"=HRp[@V@dI=a;
q=9..XRc8Yp[@;7g@2]DnFD2%[IX4bp$go0iUOJLlLTW!_"7Bmp@$T%lgVLUhsuBiaR]2tp@$8qo^KH^
f(+F`dIR/(o^Kljqsh5fd.;k\h=LC3p@#ccrUIVl`U\WOjRW-:p@#cco^Tul]^g[FmIL)Co^KWcdIQPm
Re)j:p@A"Jr:%MlaR\llP4P@<p%%_DrUIhr^[h6lM=[_<p%%\Dp%$;s\FT^lKClPCoCMSClg`Nq\FTCc
K(HYHo^_VCipkmq\FT(ZK(HtQo^_PBg[aIs\+AhUK(RF^o(2GAdIH\q\FSJIK(IXdoCDJAaRT&q\FS/@
K(IsmoCDGA_".Nr\+@o;K(SI&nFQ5?^[_*i_",D7K(JX+o()A@^[]eDjmo#7Re-+@q!n1M^[fV?lgpM9
VY'?KnaQSK_=>D5p%".7Xn2)RnaQ8Bb43%5rpkd7[e'%[nF>r;dIOa;rUb^6_Y!9fnaPW0g[V`CoCIS*
b4G)mnaP<'jRK\LlLTW!e+<&!n+"oulghITjRe&rhXp4,nF4Tjp@5Q]g%0gek4A$3nF49as7*Mfd.;k\
n+5u<n+"-_r:@Jjb4L;Xqt04GnF40^f(.biU[t,LmIL&Aq=),gc1:,iRe*KLmIK`9!:deo`q/ZjPk;?T
lLTN~>

%%EndBinary
grestore % PSGState
newpath % image
grestore % PSGState
389.511 494.019 mo
389.255 493.999 388.965 493.979 388.645 493.961 cv
388.93 490.555 389.138 487.133 389.27 483.687 cv
389.511 483.687 li
389.511 494.019 li
level3{
gsave
clp
[-1.99609e-5 -456.652 456.652 -1.99609e-5 305.858 576.004 ] concat
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.960784 .960784 .964706 ]
/C1 [.960784 .960784 .964706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.960784 .960784 .964706 ]
/C1 [.85098 .854902 .858824 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.85098 .854902 .858824 ]
/C1 [1 1 1 ]
/N 1 
>>
]
/Bounds [.00561798 .123596 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.99609e-5 -456.652 456.652 -1.99609e-5 305.858 576.004 ] concat
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~p%@tKo'u5<md9E.lg!`ukN:mej5T%Vi8<DIgtUQ9g"G'3g"G*5g=k97gY:K;gY:N=gt^]?h;-oCh;-rE
hVR,Ghr!>Khr*GNi8EPPiSibSiSrkVio8tXj5]1[j5f:^jQ,C`jlPUcjlY^fk2tghkND$kkNM-nkih6p
l07Hsl0@R!lK[^$lg*m&m-O**m-O-,mHs<.mdBN2mdBQ4n*f`6nF5r:nF5u<naZ/>o()ABo()DDoCMSF
o^qeJo_%nMp%A"Op@e4Rp@n=Up\4FWq"XXZq"aa]q>'j_qYL'bqYU0eqtp9gr;?Kjr;HTmrVc]orr2or
~>
<~p%@tKo'u5=n*]T0lg!`ukND!hjQ#7Yi8<GKh;$c=g=k97g=k<9gY:K;gt^]?gt^`Ah;-oChVR,GhVR/I
hr!>Khr*GNi8EPPiSibSiSrkVio8tXj5]1[j5f:^jQ,C`jlPUcjlY^fk2tghkND$kkNM-nkih6pl07Hs
l0@R!lK[[#lg*m&lg4!)m-O*+mHs<.mI'E1mdBN3n*f`6n*fc8nF5r:naZ/>naZ2@o()ABoCMSFoCMVH
o^qeJp%A"Np%A%Pp@e4Rp\4FVp\4IXq"XXZq>'j^q>'m`qYL'bqtp9fqtp<hr;?KjrVc]nrVc`prr2or
~>
<~p@e1OoCDGAnF,f4m-Es$kih3ljlGI]iS`YOhVHuAgY:K;gY:N=gt^]?gtgfBh;-oDhVR,GhV[5Jhr!>L
i8EPOi8ESQiSibSio8tWio9"Yj5]1[jQ,C_jQ,FajlPUcjlY^fk2tghkND$kkNM-nkih6pl07Hsl07Ku
lK[["lg*m&lg*p(m-O**mHs<.mHs</mdBN2mdKW5n*f`7nF5r:nF?&=naZ/?o()ABo()DDoCMSFo^qeJ
o^qhLp%A"Np@e4Rp@e4Sp\4FVp\=OYq"XX[q>'j^q>0saqYL'bqtp9fqtp<hr;?KjrVc]nrVc`prr2or
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
newpath
310.716 494.019 mo
310.716 483.687 li
333.441 483.687 li
318.213 446.211 li
263.091 446.211 li
268.517 443.01 273.605 439.556 278.312 435.879 cv
313.857 435.879 li
303.064 409.238 li
311.007 396.788 315.405 383.08 315.405 368.685 cv
315.405 368.685 li
315.405 364.027 314.945 359.443 314.052 354.948 cv
366.552 483.687 li
389.27 483.687 li
389.138 487.133 388.93 490.555 388.645 493.961 cv
381.412 493.542 358.484 493.542 351.081 493.542 cv
341.901 493.542 318.456 493.542 310.716 494.019 cv
260.694 494.019 mo
255.132 493.542 237.492 493.542 230.967 493.542 cv
223.947 493.542 209.457 493.542 203.166 494.019 cv
203.166 483.687 li
207.522 483.687 li
212.841 483.687 213.804 483.687 219.843 482.967 cv
226.611 482.247 226.611 481.77 228.303 477.918 cv
236.035 459.013 li
241.122 457.118 246.033 455.035 250.746 452.78 cv
240.633 477.441 li
240.147 478.404 240.147 478.881 239.418 481.041 cv
246.186 483.687 255.375 483.687 260.694 483.687 cv
260.694 494.019 li
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[187.2 0 0 140.64 202.56 81.1239 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 390 
/Height 293 
/ImageMatrix[390 0 0 -293 0 293 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 390 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 390 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 390 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
K'0T*c/sW?pu[Lu\*2'!K'2UcPj#:6e`VPIK'/QblK3]\h<(TuRcs#!K'1YHYNV,4o&kVfK'.aKr9&jt
_WJ\uK'<-rLZc52b34H@oB;;!K'.aKhrgftVriTp]BI?!K'2plMs.J1dH?,EK'/`gjlV0Wk2r5uT'5;!
K'1tQVWa</mcT2bK'.aK!9]!sbN?=tK'2mkN98">_<?L7pumY!K'.aKjQE/tYiaEtK'1nOW91#?K'9Z,
c0']AK'/lkiT>aSn)fktRHNktK')4XS`lO+l0!Z]K'.mOrT8^oeE3stK'3'pLZZeB\EJP.r9/q!K'.aK
ki\Gt\`V&tK'2%SUunoDe*)DIi96s!VrrZpVrujtK')jjMs$\pjlV0Wn)fkuT'5;!K'.aKMs'ltK'(nO
VWWQoK'(SFYNUT%K'.aKK'2OaQKH'H_<6F5jQE/t\`V&uK';:ZTBCghK'1PEZKA(IK'/oli9#XRpu[Lu
UZgY!K'2UcPidb`r8iOlk2i/sL?JNtK'(nOVW`curTAdqeE=$tK')=[RcV`S\EAJ,l0"Mt_WJ\uK';I_
Rch6Eb3"<<c/uIrYiX?sK'1DA[cXLMK'9/sgZO1OpudRtN99lrK&uI_Pimtfpu[1jk2r5uMs0s!K'1tQ
VWNKmn)fkreE*msK'2RbQ0-9P\EAJ,jl`5tK'%[IdcRgr\`LusK'1SFZ0&:Qe)u>Galg7tVriTnOll5r
K&udhMs$2boB(Yen)fktLZeTtK'%[IK')^fO6,3ZVWWQooB24teE3stK'2F^RHB+`K'(_JX6%4[_<6F5
fB96t\`V&tK'1GB[H<)'K'']-aQ9>]K'/H_mH0#_pu[LtNT^#tK'%[IK')mkMWO!^S`bUfpudRth<(Tt
K'2UcPidS[K'(nOVWH"_\EAJ,gukTt_WJ\tK'1VGYi^Q"K''o3_WA#`e)u>G^urVtVriToP3;AtK'%[I
K'**qK]V[aPidS[p?%@rk2i/sK'2giNokrUK')(TU#jecYNCH!g#f<rbN67sK'1eLX6,#rK'()8^#cfd
b3"<<^#m>rYiX?sK'0f0a6';^K'%dLroJanpuRFrK')smLun*ePimY]qWE^tK'%[IkiSArh;tNrK'(tQ
Uug+fYNLN#hWL`tK'%[IbiZCr_WAVrK''u5^u`,gb3+B>_WSbtK'%[IYiaErVr`NmK'%[HpuRFsK'*-s
KB@dJK')I_QK@8jS`YOdjQ<)rh;tNsK'21WT]XbdYN:Ata5stpbN-1qK'(/:]B-ok_<6F5a61+t\`V&r
K&s&pf]99te)l8EXQJ-rVr`NnL?JNtK')jjMrfQPl/eApn)T_qK')@\RH<SmS`bUfl0"Mth<(TrK&t8=
[cGs!YNCH!cK;OrbN67sK'1DA[cYHh_<$:1Z/sEp\`CoqK''B$dH.Uoe)u>GZ00QtVriTmK&uI_PiVW#
MroWRnE,qrn)]erK')7YSE5@aK&tJCYiOX$VWNKmeE3sreE*mrK'(8=\E/>(K&sK'biHY%_<-@3\E:ur
\`LurK''9!eE);DK&rK`kiAZ&K'%[Ip?%@rpuRFrK')I_QK<_[K&t\IWoW='S`YOdg?,Brh;tNrK'(JC
ZK6]"K&s]-`oP>(\E8D*^?3Dr_WAVrK''K'cK0Z>K&r]fioI?)e)l8EU?:FrVr`NmK')[eOQD)UK&tnO
Uu_"*PidS[i9$frk2i/rK'(\IXQ>&qK&so3^uX#+YNCH!`9+hrbN67rK'']-aQ8$8K&rolguQ$,b2n6:
T&o(pYiO9qK'&ZejlNE%K&qUGjlN)ppuI@pK&teLVr[=-PidS[gubNrK&qUGalU+ph;kHpK&sf0_rT>.
YNCH!^uiPrK&qUGXl\-p_W8PpK&rfihrM?/b3"<<UupRrK&qUGOlc/pVrWHkK&u"RU#c"0MroWRj6!#r
K&qUGcfMOpk2`)pK&t#6^#\#1VWNKma6(%rK&qUGZfTQpbN-1pK&s#og#U$2_<-@3X6/'r\`LupK&i$S
oAd(8e)c2CNofrpVrWHlK')=[RcX>+Mr]KNcK)Cnn)KYoK&t5<\)c]4S`YOdc/uIrh;tNpK&j5udGra:
YN:AtYiX?pbN-1qK''?#dcJ@-_;p4/QK7Gn\`:ioK&r6Yn)U_6e)l8EQ0.MrVr`NkK&kGBYN,E<MrfQP
dcIapn)T_qK'(PEYiY$/S`GC`\E(inh;bBoK&sH&c/dC8YNCH!\)torbN67pK&iK`k2X>=_<$:1S)rkp
\`CoqK'&QbkiK&1e)Z,AK&cpmW8iKkK&t\IWoWs9MrfQPd,hUpK&hOE^Z<>nk2W#oK&s]-`oPt:VWEEk
[,oWpK&hOEUZC@nbN$+oK&r]fioIu;_<$:1R-!YpK&hOELZJBnYiF3oK&q^JroC!<K&qUGf&a$pK&hOE
`T4bnn)KYoK&so3^uXY=S`PIb]&h&pK&hOEWT;dneDmaoK&rolguQZ>\E/>(T&o(pK&hOENo]ln\`:io
K&qpPpuJ[?e)c2CK&rokK&hOEbiH7npu@:nK&ji1^uOnDPi[MY_<&PpK&hOEYiO9nh;bBnK&iijguHoE
YN:AtV<-RpK&hOEPiV;n_W/JnK&hjNpuApFb2n6:M<4TpK&hOEK&l[eZ/^GsK&k&7]&WSGMrfQPa5stp
K&hOE[cG]nk2W#nK&j&pf&PTHVWEEkX6&!pK&hOES)ienbN$+nK&i*Un`.LH_<$:1O6-#pK&hOEK&lpl
ZfBNqK&hOEp#NI>K&qUGcK2IpK&hOE^#[2nn)KYnK&j<"cf=0JS`PIbZK9Kph;kHnK&`?\ki1+OYN1;r
R,mSnbN$+oK&r<[mGu.F_;g.-K&cjj]].)pK&hOEqrG3Ge)c2CK&ugiYN1;qK&aQ)`o?dQMr]KN]B%&n
n)KYoK&sN(bN.gHS`>=^U#Y.lh;Y<mK&iQbjQ"bMYN:AtSE8qpbN-1nK&_RFro1fS_;p4/KB*$m\`:io
K&qUG!9LKHe)Q&?K&c+U^Z'k+K&jc/_W1FOMrfQP^ZEDpn)T_nK&`figZ%ATS`GC`VW?Rnh;bBoK&rch
i8iDKYN(5pN8sZlbMp%mK&hgMq;]?P_<$:1LZSHp\`ConK&_ICn)M:Ee)Z,AK&l=[]AnM(K&j]-`8cI0
K&a&peDfrVPiRGWXQ8!nk2W#nK&i]fi8]FLK&`'TnD_sWYN1;rOQ?#nbN$+nK&h^Jr8WChK&_ICp>a*N
b2e08K&lRb^#RT&K&hOElf>b>K&_IC[c>Wlpu74mK&j9!d,XTTPiRGWWoVjnK&_ICRcEYlh;Y<mK&i9Z
m,QUUYN1;rNo]lnK&_ICK&cgi`o=hqK&hOEqrGNPb2e08K&lL`OlM&RK&bhMa5V^2K&a2td,Oi[Mr]KN
Z/j?nK&_ICU#Y.lk2MrlK&`6Ylf-a[VW<?iQ/qAnK&_ICL#`0lbMp%lK&_ICqr>cW_;p4/K&l^fMrTEL
K&c(Tal:e0K&_IChrDi<K&hOE\E(inpuD22PN.8TW8lXln)F0(SE#4]TB#"lk2MrmK&iH_kMtCYn`7.=
K&_gMpYs]^n`7IFK&_LD!922]\E&8&K&lsmO5ornK&VCAkMjtLlf@!aK&_ICk2XYEe)Z,AK&l"R`8eu"
]&J>$VW-Fjpu1>qVrNBhVW6Lln)BSmK&i]fi8^luf]%MBMW4Hjh;R;Qa5_d3MW=NleDd[mK&h^Jr8Wds
p>U\`K&Z4Xe`#<Ek2V'RK&c7Yc/SW^d,]f>K&l4XRH*_qQ/[DTdc/j:f]9*nK&`unf&HJaoAuD$K&irm
g#K-nf]%MBP2c#jk2FhNb2\*6OlQ#lh;[e_]B"S)No]lnNoTflK&VCAp#=T^dH'NOK&_ICo]+9WkN1IZ
K&hOEn`5knn)KYlK&YJCf\t<?qrERnK&bPEcf3sGU#^gdZ/j?nXlJ!lK&W3XlJ_3jb2gb+K&`6Ylf.'d
h;uK6K&i3Xmc0Ago\tJ^K&Z^fg#:!4l/RBUK&cagdGi4-o&G>^K&cF^dGi"&n`,elK&Y_Jg>U38qrERn
K&beLdGiX9o&PqnK&bJCdGh=he`)2?T]5"jpu0'MbN"37TB#"ln)D1EeDl/@QK.Alk2NK&o&>8\K]<$j
h;Q*/l/RBUKAuskeDe4'o&G>^K&c[ee)ImtoAbqlK&YtQgu6*1r8`XnK&c%Se)JO2oAl"nK&b_Je)Jj:
f&NmlK&Y#6gu5g)b2\*6VW6Llpu8jFe)Q&?S`Akln)C5)n)ArYMrONjk2E2tpu6nbK&YVF\)d&=K&_IC
!9;VhYN,?:NT,QLn)E0^\Duu:QK!MUk2P4U_;t7LO5kiPjl=nNb2_18WoAWie)K6Ce)Sg8Zf6Srb2V::
ZK0EnK&`Zehr=FjT]>CuK&VsQn_rrqT]>_)K&VXHqVgSqYiP64K&_^JqVp>jVW7L4MW06Ip>XugYN,-4
PN%2RmGd$^\E*DFN8oNMm,Q^W_;j>2VrE<fg>_&Lb2^t2Yi:8odGj*Ce)]3CWoJ]kd,Wd<OQ,ljK&MsQ
n)4!!RcEtuK&VpPo&9&rWT<F+K&_sQoAYA]o&>ejK&QI_kMW5toAbqlK&ZF^iSh!$q;dFnK&cI_OQ+jN
Xl4ljgYqAS_;j/-XQ"ikf](oLb2h@=VrNBhf]0$l\`1cjK&ON(khq`dmc&iXR,[Gjpu/"/l/RBUQfIGl
K&ZL`NT#KJro*,"S`BJ)N8fHKqr6YpVW@[9LZ=!HqW!Flg>]*jK&PbKl/9)3gZ,6lK&Y_Jj5Ii8i8gZn
K&bbKUuK)I`o2O.a5Q=Ae)S1&`SuL/`8]k:T&f"nK&`H_jl1mOqr3FjLZ/0hn)0Gjqr<LlK]<$jk2Dll
!9AdmKAuskK&YYHV;[$blJ_'eYN+O#UuI!ckMkU^\E)]2T]:Xak2W#l_W&DjK&P#6m,6%H_W/JlK&Xu5
k2FeM`oOhnK&b#6hVs.Hs5J^jNoBZhpu%(j!98^kMrONjn)9Voro8UjMW=NlK&YhMT](L]n_rlnVW6^s
T]1R_mc*EgYN+?sWT&Nhjl5I^\DkQg]]"J$f&?#S_;iSr]]+P&e)KQLb2^4r`SuL/b2VUCe)ICeg#7PA
]&E)8L#`0lK&VsQn_s9%MrX]pLuO9NqVgo%PiCodS)JtXq;Lc"S`AqoS)T%Zp>Y;pVW6RoUuI!cmGd?g
YN!ab\D`%uh;Rh\\Dtcm\Di,"g>_AU_;iDm_;^(+dGjELb2TVaeDZ#<_VstAe)I7ah;NtE\`*#8K&Zjk
KAr$Qo&9B&MrO-`QJmGS!9*G*PiCc`TAbC\pYkW"S`AbjT]1R_o]#/pVW-"_ZJgDojl,^eYN!X_]A\A#
gu7b\\DtWi]]+P&g#D;U_;_i]cf'K7al2dJb2TJ]f\qG@^u=hAe)RLhf]%MB^#JA:K&Z@\Ol;/UqV_/,
MrO!\Rc/kWs5EM+PiLufS)T%Zr8R&$S`85[Xl4ljm,@NnVW,k[[c)hsj5KReYN*je\)N#!i8UNjZ/O-h
K&FN(_;_`Zdc#f:aPl^Jb2]_de)Gu=`8\PjQ/V/hK&EQbK&Z4XQ/RMWr8@A.MrX6cQ/[JVs5ARge)@Oh
K&GeLS`8)WZ/L;nlf%HnVW6(aZJpJqkMi#j\)GQhK&Fi1\DjsVc/F95cf+NS_;hr`cJjH8bi6+jS)NSh
K&Elke)HhUl/@6Q[,LZ8K&cI_OQ)2Xpu-h`g#8shK&H+UPiC?TX5SZho&99"S`A>^XQ"ikn)BSj^#?uh
K&G/:YN!1RaPha0fAZD\\Dt0\al7p3e)IUjU#G"hK&F2tb2T&QjPb^L]A`JAe)R%[jl1mO\Dm#:K&PVG
Uu6j_pu%(ih;Y<jK&QRbp>D1qguG<lK&ZL`NT%e6^u0h&h;G0i_;`>jK&PSFpY`78^uN>lK&YPEW8XW4
h;EnC_Vi8iV;g@jK&OW+pYa3SUuU@lK&XQ)`8QU4q;?k_Vr30dj5Q`jK&QL_MrNIMWSrHfpu2#+Pi9^B
]AS;!k2;fia5XbjK&PkNpu&%/^>d,jK&PPEpu&@7XPqdhK&Fi1\DjRKf\qG@b2N0S_;_3KiSfCI_;Y4J
b2JH@oAG5YYi+!iO5ffjK&Nolq;?kai8UNjK&H^gq;@1icJc1hK&H+UPiBsI[c)hsmG[p"S`7TI^Yse'
jPfsnVW"i>dGTW7eDROhWSuRhK&Fi1\DjIHgYmbCal3*S_;U^=mGNTS\_tWhNT'ThK&Elke)H>GpYg__
Xl908K&P8=Y2Foipu%(hbi-%hK&H+UPiBjF\`&/!m,@j"S`.-<b2@m0h;G0hYi4'hK&G/:YMu_Ee_u,=
dGau\\Da";k2:jL_Vi8hPi;)hK&F2tb2STDn_o)Y[GfEhK&HI_MVk>hK&P/:Z/C5lpu%(id,MCjK&Q@\
O5RP+bMRp/k22`g[c,KhK&GJCVW+uBcf'K7f\rmhSD`SfK&=c/\D`n8l/70O_Vi8iR,[GjK&OE%`o)I,
s58RfYi!pgK&Q[eL>\ufK&YA@Xl4ljqr*@h^>QufK&?%SPi9:6a5DR-k2;fi]&LijK&PYHUYqm)iST7E
eDIIgT]+qhK&Fi1\Dj+>jl(gM`8SJhL>`$fK&=,rb2J$4s58LeYi+!iK&VC@WT!m8K&FW+^>FP"ptq"g
_Vr>hK&H+UPiBL<_r64+ki&#hWSlLfK&>DAVW"H3gu*eBeDROiUuL:jK&Or4\)<8(p>:JZ_V`2gMrFHh
K&F2tb2S9;qVd%bZ/O-hK&H.VPM`:qK&Oi1]&81upu%(ia5XbjK&Q1WPi/b'eDGl8k22`gXl7jhK&GJC
VW+Z9f\qG@eD[UhPi2#fK&=c/\D`S/o&,,X_Vi8iO5ffjK&O9!b2@m0pY_"fYi!pgK&Q@\O5QqoK&O`.
^#4M#K&F)qc/4-1n)'Ag[,K?hK&GeLS`-X.f\hA>K&E*Ul/.*MeDIIgR,RAhK&Fi1\D`M-o\b>ZK&D7=
rnrLf\_kQgK&QUcLu>Mqe)>o;o&5_hVr30b^#6ofK&?@\Mr:u#cej?3n)'AgZ/O-hK&D7=U#=qfK&>DA
VVmj"led<OeDIIgQJq5hK&D7=L#DsfK&=H&_;Kq'qr!:f\_kQgK&QOaMVs*EK&GnORbt%#K&F9!aPVU,
ptq"g\DbWhK&D7=W8QFfK&>_JS`$-ujPPRHh;>*gSDiYhK&G/:YMY#js5&@abMKbeKAZaeK&=H&_;U")
!9&Rg\_tWfK&>bKSDLL,e)5i9k2;ffVr**b^Z!,hK&HF^Mr1Dhh;3b?n(s;eVVp:fK&>_JS`-@&i8B4F
h;G0fMr4<dK&5#6YMb;rq;6e]bMThgLZ/0hK&FN(_;Bk%mba;d\_bKeK&H%SQJ\q(e)>o;lf"5hVr30a
Xl%^dK&6:ZMr:_qf&)):n)'AgWo;XhK&GeLS_oUfn_SlSh;5$eOl5ffK&>)8YMkN#p#(G[bM]nfK&?7Y
No%Y0_;Kq'o\bef\_kQgK&Q:ZOl3J%e),c7g#&gdVr!$`[,B9fK&?@\MrCr"dbo`8n)0GfRG[;dK&5YH
S`#mnled<Oh;>*gQ/V/hK&G/:YMXrhr83:dbMKbeK&HOaLu6),_;U")pu..h\_tWfK&>MDUY`63e)5i9
i8CBfVr**b\DbWhK&HF^Mr12bj5,CEn(s;eTA\efK&>_JS`-*tkMUsMh;G0fK\ugdK&5#6YMb&k!8iCc
bMThfK&HI_MVj$CK&>eLS)1^4b2@m0kMVlfYi!pfK&GMDV;J3.K&<K`gtmY>ptgqeVVp:fK&?%SPi/+j
k21dJK&;LDptgVZh;5$eMW"<fK&>)8YMb#j!8rLeK&;1;n)'Ad_VW,dK&>_JS_gp6b2@m0jku`fK&;1;
e).CdVr!$_V;L.dK&6:ZMr:Dhhqs%CK&;dLnD8cRk2)ZdMVn6dK&5>?VVm<hqVQn^K&;1;p>:kdbMKbd
K&>tQQJTL8_;Kq'm,45f\_kQdK&5#6YMHG=e),c7dGM7dVr!$`X5MXfK&?@\Mr']Tn(iTOn(j5cOl,`d
K&5YHS`#UfoA>/Wh;>*dK&67YN8<">YMXrho\Y_dbMKbeK&H7YOPdq4_;9e#gtnsb\_YEcK&>8=Wnsu:
e)5i9f\igfVr**_S)3AbK&-4XMr0oZle[6Mn(s;eQf.5fK&>_JS_etTs5&Fbh;+scK&?L`LYgP;YMb#j
qr!:fbMThdK&5PET\[K@_;Bk%i8:<d\_bKeK&GPEUu/E6e)#]5aPOPbVqls^T\nedK&6:ZMr:5cjPPRH
n)'AdLYhsbK&,SFS_o+Xs5&@ah;5$eKAZaeK&>)8YMOlfle\#bbMB\cK&>eLS)2$=_;Kq'k2;ff\_kQd
K&4i1[,%tBe),c7bhondVr!$`VVp:fK&?@\Mr'NOo\G,Tn(j5cN8OBdK&5YHS`#C`q;6e]h;>*dK&6(T
OknOCYMXrhn)'AdbMKbeK&H(TQ/BI9_;9e#fA<Ub\_YEcK&>)8YMQM?e)5i9dbqCfVr**_QJV#bK&-4X
Mr0`UnD8cRn(s;eP2PlfK&>_JS_etTqVI(bh;+scK&?=[N8E(@YMXrhmba;dK&2+9hVP*b_VN&cK&>>?
W8>)Ab27g.dbh=dK&2+9_qr2bVqls^S)<GdK&6:ZMr0]Tn_SlSK&2+9K&,SFS_etTptgqbh;+scK&?7Y
No#BEK&5YHS__KF\DDhoh;5$b_VN&cK&>;>WSW6`K&4]-\D=CFe)#]5_VW,bVqls^RG[;dK&6:ZMqs'B
s4i4]n(a/aK&-LaKAG\GS_o%VrSN@dh;5$bK&,YHS(uNKYMOlfjkcTbbMB\cK&>PEU>EcD_;0_!bh]b`
\_P?aK&4W+]%sUHe),c7`o"JdVr!$]N8=6`K&$.VMr'<IqV?bZn(j5cL#;mdK&5YHS_\nRnD0;`h;"ma
K&5kNQeg0IYMXrhl/.rdbMKbbK&+r4YM@"M_;9e#dGD1b\_YEcK&=l2[GJ.Ee(oW3\_YE`Vqcm\OP]Tb
K&-4XMr0NOp>1DXn(s;bK&-1WN83RNS_etTo\PYbh;+scK&?+UP2=^FYMFfdgtem`bM9VaK&52;WnkPJ
_;Bk%e_dOd\),?bK&+9!_VDBNe)#]5^#$cbVqls^Q/D#dK&6%SP21`Gs4r@`n(a/aK&6F^LY_+KS_o%V
ptq"de)%=bK&,MDTA7rOYMOlfi816bbMB\cK&>DAVV\`;cJ=*.aPFJ`\_P?aK&4K'^>6$Le),c7_V`2d
Vr$t#P21rMqqQeYptUeaL#2gbK&,nOPi%)M!8iFce)%=bK&,eLQe^EPVVZp]kh_fbeD7=cK&>\IT&-m3
cJ=*.d+u%`_VDuaK&4c/[b\LMb27g.aks\dR,7/bK&*ijcJ5>Qs5/LdNSaBbK&-4XMr0BKqVHh\e_[Ib
K&-(TO5/mQqqn1*K&6"RPMP'NqqnL3K&5\ISDD]Njke2:K&,)8X5(nRptrpEK&5&7Y2-tNpts6NK&4`.
\)"UNj50"UK&+,r`n[fRj50=^K&*ficePGRo\Y_dMr+6bK&-4XiSLWkK&-@\LYV@RiSLrtK&-%SOPK!R
o&$P*K&5tQPhk0OhqlH1K&,A@UYOAShqlc:K&,&7XPD"Sn)):EK&5#6YMGK"mbEEL^>-]^\_GutmG3BM
]\UW`Yh\X'kMCgI\DGEbVqohXYhXicr7m(^ptOT\Yhaoeqq[(`n(d6dWnr?apYLkb[b]3`K&#>?U>+MY
g>:*1K&,>?UtjJTkhjJ<K&5;>Vqmftl.gmG`n\8^_V<c#l.psI`8/2`\_Q?)jkbUG^tuubK&-C]L>8fa
g"WFZfA<UbK\c[`K&$.VjklumK&6OaK\a;sa4u:%l.h`^k1eJDaPDI(kM;Z`h;%&J`86+&jPHNbTAAS`
K&"Z,[G/mZe_]BCK&+Z,\(njUiSWVNK&4T*]A8+q!8N1]ZJ<j^YhRX`K&*]fdbLbUhqt6dLu/$bK&+9!
_VBaun_B;^n(Z:I_qfq#n(j5`k1nhN^ts\"m,")bV;:"`K&"r4XkV@[dGEd:K&+r4YM@=Vgu$rEK&4l2
Ze^JoqV6\X]%kE^\_GKfqqZk[\_YE`Yh\!jq;-_[[GK3bVqoDL]\J+oq:pk^ptO*N^>4CspYCe`n(cXS
]AA.ro\PYbX52F`K&#5<V;'h\c/.11K&,5<VqfeWf\b?<K&5/:X5/imo\>&R_q`&^_V<;kp>(>V_;2u`
\_Pfoo\P2V^#$cbK&-"ROkckigtSa]bMKbbK&-I_K\Z@Xf&*pmK&6F^LY]5kdbKH0k1lN^k1e&8eD5`4
jP?H`h;$N;e)#]5iSL<bQ/1l`K&"Q)\D,3]aklOCK&+Q)]%k0Xe)0WNK&4K'^>4Cspt^k`YM@X^YhRX`
p>1ebY2.X`VqfAM]A8(ps4r@`ptW[@bhRg*mbF)^n(Yn>cJ=*.m+n#`k1n#6fA2&7j5$B`h;#d$khLdF
e(h1^eD%aon_A`Ob1sP^bM1%noA,#SaPFJ`_VDu`rnW:`\D59^\_G9_p"bY`YM@X^YhRX`oA5SbXkhR`
Vqec:bhIa(n_95\ptEI<cJ4$,mG+#^n(Ye;dG9E1m+n#`S)!5^K%nl2XkMUb^"qu/K&"f0Z.md_`89k:
K&+f0ZeU/fs4i:^]A(E\_V2i^r8!.`\(o3^\_G9`qVI(b[GB-`K&#DAT\H*njP$Nc]A:Q`K&$(TNSF6_
_VWGkK&-(TO5-JbiS/t=hV4m\k1[E&jP5@Bg>&[^h:od&k1tXFg"i[`L>;a^K%n2t^tQuc]&!DAK&",r
`7r/`_;51KKAF5s`nZ1$lJ.f^W8$(\YhIR^kM;Z`Utjk^Vq]#D_qfq#r8!.`WSH4^K%oGBS_EPd\D>ur
K&#DAT\JV`^Y[l(K&,DAU>1a`p=k2RbM0P\eCqFgptUJVaP=D^bM0bfqqZk[`ne>`K&#nOP2!4qe(V@d
b2)LAQ/&IrfA!Oae)'EIR,+dug"`L\Yh[^^K%obKPhPod[b]NiK&#\IR+q)a^#%DtK&,\IRbX1`mb<?J
eD%1\h:f<nn_A`Od+kt^eD%Xmo\G,TcJ>n`K&$.VMqbbrbM'he_;4e?Nnh%tcJ,nab22^GOkmA"d+j6.
gt\g^S_N;\VqSN6ceO--o\>M^ptNF;dG9E1o%fG`SD<;^K%o)8VqU:e[,($&K&##6X4uIb]&)i1K&,#6
Xk\N`s4i:^_:ui\bM'J^r8!.`^"gW^_V;o`q;."b]A:Q`K&#GBTA-6th:f*ee(s!=U>2KuiS19b\_bKb
K&-:ZM;4l]i7ik<jP-<\n(P)'j4o7AiS:0^k1dE&k1tXFhqb*`Ltqm^K%nE%]%YZfZJGN8K&"B$^"^`b
\DDhn`8/2`K&#\IR+ndue_7Rfb2):;S(t%!g"Wace(rp;Uth[!inLBcX5)@^K%o\IQJ2,fX5)[gK%oA@
TA&bfZ/+KrK&#;>UYCUZqq?YUbhBPZh:\g`rS)qYakOD\eCq._!8N1]`SA2^K%oVGR+eh!db2Lj_;+>2
RG4n!e_7Rfb2)7:SD:."g"WacJ,~>

%%EndBinary
grestore % PSGState
newpath % image
gsave % PSGState
6.903 265.401 mo
315.405 265.401 li
315.405 471.978 li
6.903 471.978 li
6.903 265.401 li
clp
6.903 368.685 mo
6.903 368.685 li
6.903 311.643 75.969 265.401 161.154 265.401 cv
161.154 265.401 li
239.391 265.401 304.018 304.401 314.052 354.948 cv
314.052 354.948 li
304.018 304.401 239.391 265.401 161.154 265.401 cv
75.969 265.401 6.903 311.643 6.903 368.685 cv
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[308.64 0 0 105.12 6.24 206.404 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 643 
/Height 219 
/ImageMatrix[643 0 0 -219 0 219 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 643 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 643 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 643 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
K'@mOK'@mOK'@mOK'@mOK'@mOn`c5%K'IsQK'IsQl0=`%K'@mOK'@mOK'@mOK'@mOK'CtQWp53$K'IsQ
K'LbKK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mO
dHQ8IK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'C\I
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOdHQ8I
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'C\IK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOdHQ8IK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'C\IK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOdHQ8IK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'C\IK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOdHQ8IK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'C\IK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOdHQ8IK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'C\IK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOK'@mOdHQ8IK'@mOK'@mOK'@mOK'@mOK'@mO
K'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mOK'@mOK'@mOK'@mOK'C\IK'7gMK'7gMK'<$oMWo`WK'@mO
K'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mOK'@mOK'@mOK'@mOK'C\IK'7gMK'7gMK'<$oMWo`W
K'@mOK'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mOK'@mOK'@mOK'@mOK'C\IK'7gMK'7gMK'<$o
MWo`WK'@mOK'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mOK'@mOK'@mOK'@mOK'C\IK'7gMK'7gM
K'<$oMWo`WK'@mOK'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mOK'@mOK'@mOK'@mOK'C\IK'7gM
K'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mOl04Z#K'7gMK'7gMK'7gMK'7gMK':nOWp,-"K'@mOK'C\I
K'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mOl04Z#K'7gMK'7gMK'7gMK'7gMK':nOWp,-"K'@mO
K'C\IK'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mOl04Z#K'7gMK'7gMK'7gMK'7gMK':nOWp,-"
K'@mOK'C\IK'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mOl04Z#K'7gMK'7gMK'7gMK'7gMK':nO
Wp,-"K'@mOK'C\IK'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mOl04Z#K'7gMK'7gMK'7gMK'7gM
K'7gMK'7gMK'7gMdHH2GK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7gM
K'7gMK'7gMK':VGK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK'7gMK';I_Rcf:cK'.aKK'2+UU?I3mK'7gM
K'7gMK'7gMK'7gMdHH2FK'.aKK'.aKq<*Y!K'7gMK'7gMK'7gMK'7gMK';I_Rcf:cK'.aKK'2+UU?I3m
K'7gMK'7gMK'7gMK'7gMdHH2FK'.aKK'.aKq<*Y!K'7gMK'7gMK'7gMK'7gMK';I_Rcf:cK'.aKK'2+U
U?I3mK'7gMK'7gMK'7gMK'7gMdHH2FK'.aKK'.aKq<*Y!K'7gMK'7gMK'7gMK'7gMK';I_Rcf:cK'.aK
K'2+UU?I3mK'7gMK'7gMK'7gMK'7gMdHH2FK'.aKK'.aKq<*Y!K'7gMK'7gMK'7gMK'7gMK';I_Rcf:c
K'.aKK'2+UU?I3mK'7gMK'7gMK'7gMK'7gMdHH2FK'.aKK'.aKK'.aKK'.aKK'2[eP3@M]K'7gMK';I_
Rcf:cK'.aKK'.aKK'.aKK'.aKg#oC!K'7gMK'7gMdHH2FK'.aKK'.aKK'.aKK'.aKK'2[eP3@M]K'7gM
K';I_Rcf:cK'.aKK'.aKK'.aKK'.aKg#oC!K'7gMK'7gMdHH2FK'.aKK'.aKK'.aKK'.aKK'2[eP3@M]
K'7gMK';I_Rcf:cK'.aKK'.aKK'.aKK'.aKg#oC!K'7gMK'7gMdHH2FK'.aKK'.aKK'.aKK'.aKK'2[e
P3@M]K'7gMK';I_Rcf:cK'.aKK'.aKK'.aKK'.aKg#oC!K'7gMK'7gMdHH2FK'.aKK'.aKK'.aKK'.aK
K'2[eP3@M]K'7gMK';I_Rcf:cK'.aKK'.aKK'.aKK'.aKg#oC!K'7gMK'7gMdHH2FK'.aKK'.aKK'.aK
K'.aKK'.aKK'.aKK'.aKK'.aKK'.aKK'.aKK'.aKK'.aKK'.aKK'.aKK'1PEK'%[IK'%[IK')mkMW]TS
K'.aKK'.aKK'.aKK'.aKl0"MtK'%[IK'%[IiT?ltK'.aKK'.aKK'.aKK'.aKK'1PEK'%[IK'%[IK')mk
MW]TSK'.aKK'.aKK'.aKK'.aKl0"MtK'%[IK'%[IiT?ltK'.aKK'.aKK'.aKK'.aKK'1PEK'%[IK'%[I
K')mkMW]TSK'.aKK'.aKK'.aKK'.aKl0"MtK'%[IK'%[IiT?ltK'.aKK'.aKK'.aKK'.aKK'1PEK'%[I
K'%[IK')mkMW]TSK'.aKK'.aKK'.aKK'.aKl0"MtK'%[IK'%[IiT?ltK'.aKK'.aKK'.aKK'.aKK'1PE
K'%[IK'%[IK')mkMW]TSK'.aKK'.aKK'.aKK'.aKl0"MtK'%[IK'%[IiT?ltK'.aKK'.aKK'.aKK'.aK
K'1PEK'%[IK'%[IK'%[IK'%[IK'%[In`H"tK'.aKK'.aKl0"MtK'%[IK'%[IK'%[IK'%[IK'(bKWonus
K'.aKK'1PEK'%[IK'%[IK'%[IK'%[IK'%[In`H"tK'.aKK'.aKl0"MtK'%[IK'%[IK'%[IK'%[IK'(bK
WonusK'.aKK'1PEK'%[IK'%[IK'%[IK'%[IK'%[In`H"tK'.aKK'.aKl0"MtK'%[IK'%[IK'%[IK'%[I
K'(bKWonusK'.aKK'1PEK'%[IK'%[IK'%[IK'%[IK'%[In`H"tK'.aKK'.aKl0"MtK'%[IK'%[IK'%[I
K'%[IK'(bKWonusK'.aKK'1PEK'%[IK'%[IK'%[IK'%[IK'%[In`H"tK'.aKK'.aKl0"MtK'%[IK'%[I
K'%[IK'%[IK'(bKWonusK'.aKK'1PEK'%[IK'%[IK'%[IK'%[IK'%[IK'%[IK'%[IK')=[RcT._K&qUG
K&ttQU?7'iK'%[IK'%[IK'%[IK'%[IdH6&BK&qUGK&qUGq;mLrK'%[IK'%[IK'%[IK'%[IK')=[RcT._
K&qUGK&ttQU?7'iK'%[IK'%[IK'%[IK'%[IdH6&BK&qUGK&qUGq;mLrK'%[IK'%[IK'%[IK'%[IK')=[
RcT._K&qUGK&ttQU?7'iK'%[IK'%[IK'%[IK'%[IdH6&BK&qUGK&qUGq;mLrK'%[IK'%[IK'%[IK'%[I
K')=[RcT._K&qUGK&ttQU?7'iK'%[IK'%[IK'%[IK'%[IdH6&BK&qUGK&qUGq;mLrK'%[IK'%[IK'%[I
K'%[IK')=[RcT._K&qUGK&ttQU?7'iK'%[IK'%[IK'%[IK'%[IdH6&BK&qUGK&qUGq;mLrK'%[IK'%[I
K'%[IK'%[IK')=[RcT._K&qUGK&ttQU?7'iK'%[IK'%[IK'%[IK'%[IdH6&BK&qUGK&qUGK&qUGK&qUG
K&uOaP3.AYK'%[IK')=[RcT._K&qUGK&qUGK&qUGK&qUGg#]6rK'%[IK'%[IdH6&BK&qUGK&qUGK&qUG
K&qUGK&uOaP3.AYK'%[IK')=[RcT._K&qUGK&qUGK&qUGK&qUGg#]6rK'%[IK'%[IdH6&BK&qUGK&qUG
K&qUGK&qUGK&uOaP3.AYK'%[IK')=[RcT._K&qUGK&qUGK&qUGK&qUGg#]6rK'%[IK'%[IdH6&BK&qUG
K&qUGK&qUGK&qUGK&uOaP3.AYK'%[IK')=[RcT._K&qUGK&qUGK&qUGK&qUGg#]6rK'%[IK'%[IdH6&B
K&qUGK&qUGK&qUGK&qUGK&uOaP3.AYK'%[IK')=[RcT._K&qUGK&qUGK&qUGK&qUGg#]6rK'%[IK'%[I
dH6&BK&qUGK&qUGK&qUGK&qUGK&uOaP3.AYK'%[IK')=[RcK(]K&hOEK&knOU?.!gK&qUGK&qUGK&qUG
K&qUGdH,u@K&hOEK&hOEq;dFpK&qUGK&qUGK&qUGK&qUGK&u7YRcK(]K&hOEK&knOU?.!gK&qUGK&qUG
K&qUGK&qUGdH,u@K&hOEK&hOEq;dFpK&qUGK&qUGK&qUGK&qUGK&u7YRcK(]K&hOEK&knOU?.!gK&qUG
K&qUGK&qUGK&qUGdH,u@K&hOEK&hOEq;dFpK&qUGK&qUGK&qUGK&qUGK&u7YRcK(]K&hOEK&knOU?.!g
K&qUGK&qUGK&qUGK&qUGdH,u@K&hOEK&hOEq;dFpK&qUGK&qUGK&qUGK&qUGK&u7YRcK(]K&hOEK&knO
U?.!gK&qUGK&qUGK&qUGK&qUGdH,u@K&hOEK&hOEq;dFpK&qUGK&qUGK&qUGK&qUGK&u7YRcK(]K&hOE
K&knOU?.!gK&qUGK&qUGK&qUGK&qUGdH,u@K&hOEK&hOEK&hOEK&hOEK&lI_P3%;WK&qUGK&u7YRcK(]
K&hOEK&hOEK&hOEK&hOEg#T0pK&qUGK&qUGdH,u@K&hOEK&hOEK&hOEK&hOEK&lI_P3%;WK&qUGK&u7Y
RcK(]K&hOEK&hOEK&hOEK&hOEg#T0pK&qUGK&qUGdH,u@K&hOEK&hOEK&hOEK&hOEK&lI_P3%;WK&qUG
K&u7YRcK(]K&hOEK&hOEK&hOEK&hOEg#T0pK&qUGK&qUGdH,u@K&hOEroEh8O5toRK&hOEK&lXdpZ7b&
K&lI_P3%;WK&qUGK&u7YRcK(]K&lpla5t(sK&hOEK&hOEp>j9Ua5hj5g#T0pK&qUGK&qUGdH,u@K&iZe
iT8JKZK-VuK&hOERcN_palU+pK&lI_P3%;WK&udhio[9&K&u7YRcK(]PN;5pYiX?pK&hOEK&hjNpuSI9
gZ3tIg#T0pK&qUGn`@ULdcH)BdH,u?K&aT*`T4GfcJsN:q;[@nK&iunf]BX)bN+99n`5kpK&r9ZmcM7G
`T;^5l/eAoK&`olf]8F\lf3TWiT$ZnK&i?\lK+Jrl/[HWK&hOEOlZ)pP3)5pK&k>?K&_ICaQ'nnWoVjn
K&c[eMWBBM\)bcpXQA'pK&hOEK&j,reE*LfhrKCMl/\;nK&a9!cK'uGp>^bbiT$ZnK&ichhW9dZp#L_c
K&hOES`JqpL?8BpK&k>?K&_ICdc7UnU#b4nK&c[eMWBBM_W8PpU#k:pK&hOEK&jN(alSrPlK!QXl/\;n
K&aT*`T2a6ro8UjiT$ZnK&j)qe`DJGs5\dmK&hOEVW?RpK&umkLuctEK&_ICg>f0nR,mSnK&c[eMWBBM
bN-1pR-!YpK&hOEK&ji1^u^[>oAkMal/\;nK&al2^#Xe+qrERniT$ZnK&jE%biOH<qrNXpK&hOEYN43p
K&uUcOQ=gMK&_ICio?`nOlZ)nK&c[eMWBBMe)[apOQH)pK&hOEK&k,9\E/P.qrE@il/\;nK&b/:[H)r#
o]2(niT$ZnK&j]-`8uU4oAu(pK&hOE\)bcpK&u=[R,lZUK&_ICl/S5nMWFTnK&c[eMWBBMgZ5<pLunNp
K&hOEK&kDAYiUJus5eppl/\;nK&bDAY2k2qmGsSniT$ZnK&jr4^#ak-lfFMpK&hOE^?!8pK&u%ST]FM]
K&_ICnDf_nKB*$mK&_ICK&c(TS)f1^qW*Lnn`,enK&kYHWTA`npuRFpl/\;nK&bVGW8rQkkN&/nK&_IC
e)R[nK&khMUuU.gWoScm`T4bpK&teLVrZ7dK&_ICp>_.nK&ljjLZ=!HK&c:ZQ/mPXo]2(nn`,enK&knO
U?.!gn`>qpl/\;nK&bhMU?$pei8gZnK&_ICg#K*nK&kSFX5hmnWoScmbiH7pK&tSFXlRmjK&_ICr8WRn
K&lXdNT5WNK&cL`O5toRmc9Ynn`,enK&l+USE5@alfFMpl/\;nK&c%SSE,:_gZ5<nK&_IChrCNnK&kDA
YiFEsWoScmdc@[pK&tA@ZfKNpK&_LD!9AamK&lF^PN.8TK&c^fM<'9LkiA5nn`,enK&l=[QK<_[jlN)p
l/\;nK&c7YQK3YYe`<mnK&_ICjl;rnK&k2;[c?'$WoScmf]9*pK&t/:\`D0!K&_[IqrE@iK&l4XRH&nZ
K&cmkK]IaGioHfnn`,enK&lL`Ol_2VhrUZpl/\;nK&cF^OlV,Td,_OnK&_IClJn;nK&k#6]AqT)WoScm
h;kHpK&su5^?!]&K&VsQn`,5]K&bhMU>l".MW9HOrT&RkK&kbKVW74,P2q5UpuI@pK&t_JWT<=)Rc8qY
r8NLlK&al2^#J#1U>pjcn)KYnK&ji1^uO,.WoScmioHfpK&sc/`8o>,K&W-Vm,N]XK&bYHVrIO3MW9WT
puI%fK&kSFX5eflKAusmK&hOEd,_Onl/S5lK&QdiKB%RD_;iDliSpTlK&cL`O5toR^?!8nK&_ICm,OGn
K&jB$c/[43K&W<[kMq0SK&bJCXQ''8MW9cXo]1VbK&kDAYiC>qLZA<nK&hOEbN-1nl/S5lL>r0lK&_IC
^#R,liSpTlK&c[eMWBBM\`ConK&_ICn`,enK&j2tdc8a8K&WH_j5YaOK&b>?Yi>K<MW9r]n)T)]K&k8=
[,ZbuN8sZnK&hOEa5jnnl/S5lMW4HlK&_IC\DtcliSpTlK&cgiL?*sI[H,WnK&_ICp#D(nK&j&pf&P0<
K&WWdhW'4JK&b/:[Gq#AMW:)alf<ZYK&k)8\`8;%OQ5rnK&hOE_W8Pnl/S5lO5fflK&_IC[,]KliSpTl
KAusmK&hOEYiO9nK&_ICqW!FnK&ilkgZ-]AK&Wchg>deFK&b#6\`3GEMW:8fk2_-TK&jr4^#O_)Q/h;n
K&hOE^?!8nl/S5lPN))lK&_ICYiF3liSpTlLZA<nK&hOEXQ8!nK&_ICro8^nK&i`ghrE,EK&Wolf&MAB
K&al2^#FY'V;g@lK&_IC^>m2ln`#_lRH*SnK&hOE]&^unl/S5lQf@AlK&_ICXQ.plK&VjNo](P`K&`Ze
hr<>KWoJ`l!9AamK&iTcj5\PIK&X&pdc5r>K&a`._;^(+WT)XlK&_IC]&Uoln`#_lS`AknK&hOE[cG]n
l/S5lS)WYlK&_ICW8lXlK&W!RnDf,\K&`Naj5SbOWoJlpr8`IjK&iH_kMstMK&X2tcJsN:K&aT*`SuL/
Xl@plK&_IC[c>Wln`#_lU#Y.nK&hOEZK0Enl/S5lTAnqlK&_ICUuU@lK&W-Vm,N]XK&`B]kMk1SWoK#t
puI%fK&i<[lf6CQK&X?#b2\*6K&aH&al7p3Z/X3lK&_ICZK'?ln`#_lV;pFnK&hOEY2n-nl/S5lUZ14l
K&_ICT]>(lK&W9Zki79TK&`6Ylf-UWWoK0#o]1VbK&i0Wn)MgUK&XH&a5_d3K&a<"c/O?7[,TElK&_IC
Y2e'ln`#_lWT2^nK&hOEWoVjnl/S5kWo;XjK&VCARH!MjiSgNjT&SklK&_ICQ/h;lg#B$lPN2/nK&hOE
OQ?#ndGoi;`8SJjK&VCAYN"'jq;I4j\Dk]lK&_ICX5hjln`#_lXQ.pnK&hOEVW?Rnl/S5kXl7jjK&VCA
QK%;jiSgNjU>k.lK&_ICOlQ#lg#B$lQK.AnK&hOENTBfndGoi;a5O\jK&VCAXQ%jjq;I4j]]-ulK&_IC
VrQRlK&X/scf9W;K&`K`jPoF`Rc1O1dc,l<qVoi]]Af"5n_rHcU>i$/hW'4JK&_mOp#:S_S`8elK&_IC
L?&6ldGfc:b2KnjT&Skle`3glW8cRjq;I4j^Z*2lK&cagm,X_tUuU@lK&X9!bi=<8oAf2uV;n*+kMkac
Rc1X4cf1#Fo]*==cf1#Fo\ncfU>i03g>deFp#F0T`oDs:q;R"cU#P(lK&c7YalLb-K&b8<K&P#6[Gn@K
e`4X/^>c!KhVn:hMW2M4_;gsDlK$+K\`9@Cj5P[M]&LilOlQ#n_W8PnR,dMll/J/j\)GQjSDr_lVrQRl
N8jTjiSgNjXQ%jlM<"HnWoVjnLZA<lK&WTchrB=K!99j8iT#OMro;MfK&P,9ZJrITalBqlb2T/TiSjUk
MW2Y8^#Q$NguQ*.aQ&iOk2M!P^>d,lTB#"nZfKKnQ/h;ll/J/j]&CcjVrHLlSE&elLuS<jiSgNjYN"'l
QK.AnS`JqnK]E*lK&W]fguFFTp#MD!mc/oZqr?;fK&P5<YN!L[^Z2NXeDd+[jPfpnMW2b;]&U-Wd,_Fl
e)QnWl/I<S_;`>lX5hjnW8u^nP2l)ll/J/j^>[&jYi=-lPN2/lL#W*jiSgNjZJs9lT]>(nPN;5nK&cmk
K]9#kg#JI[lf<ubpu?tdpZ(#fK&P>?XQ%I`\)X@Gh;XsakM_$Ocf)7j`8\PlT&\qlPiD/jn_oYj`8\Pl
[H#QnT&f"nO5olll/J/j_;W8j\Dk]lMW=NlK&VC@\`(]jYi=-lK&_IBq;UAlWoC2@e`3@`ioG^PK&cL`
hVs.Gg>T$jeDd[lTB#"lRH!MjK&P/:Z/X!e\)Wh8m,F/eo&9,tP2aOA]]6]c`oNHHmGj/cpYtGsRc23D
^Z*&g_rHC0!9/Uiro/Xj]]$oj\Dk]lK&c^fM;n6gjPd,uZ/X3lWT2^nK&lagMW=6eiSoIJh;P6jgZ#0l
QfIGlQK%;jK&P8=Y2[piYiCf)o\tnjp#5H"P2aXD\`:Zh^>t=8p#CnhqVpc!Rc2<G]]-uk]]4V(qr<Ll
qr3Fj^Z!,j^Z*2lK&cI_OQ,lkkM`H#[,TElZ/a9nK&lI_P2kujjPkdMi8LHjio6ZlOlQ#lPN))jK&PA@
X5_jmWT/iqqVmFmpu1c%P2aaG[c>Tl\)`>*r8WOlrSm)$Rc2EJ\`1ln[c;u"p#D(lpu74j_Vr>j`T"Vl
K&c7YQK%DnlJ\c&\)PWl\)Y]nK&l4XRH*VnkMh*Pj5HZjki/)lMrXTlOQ,ljK&PJCW8capUZ7!e!9/go
qr.)(P2ajJZfBNpYiLDss5\mo!938&Rc)NM[,KZrX5\`jl/J/jo&9)rU>a&L^Z*Gr\Dr2$kMr)lmGdNl
WoCSKb2^4r`T2X3jQ)rnki:sfK&GnORc3ksOQ(lOs5K!rq;D),MW*FNV;gXsS`>=^r8W[oro*D+P2asM
YiFEsWoScmq;dFns5WG)Rc)WPZ/OQuV;d*djPlfjnDWrrU>a/O]].>uZK$PsiT$Zllf.BlWoC\Na5b+u
^Z:"-hW1Nnk2YgfK&H"RQf7_uMrK?Jq;RIor8@D/MW*OQU>kP!QfE\Xp>_.ln_oYjf&EglhW(HnK&lOa
OQ69!mc'\ne_mUhj5HZjK&Y\IUuC_"p#)S'b2Knjf&EglK&bYHVrHq"S)M6C_;`c"[Gul!eDmali8X=d
K&H(TQ/V]#L>mgEo\u%mro!V1MW*UST]5M$P2h/Sn`,elro/XjgYo*jl/J/lK&c+URc=&#o\l7sf\igh
ki&#jK&YMDWT!.$pu%n*c/H+jgZ#0lK&bGBXlAI%T&IZI^>dW$YiC>qcJu=lh;\+dK&H1WPMlN$K&VCA
n)BSjq;@.hk2Dljp>V(lK&c4XQf@r&LZ.+KV;gq&Q/dJVjPullo]#T'Rc)oXWT!7'QK!MUe`*ajki)Br
U>aGW[,U$'UZ6sddc7Ulio6Zja5O\jf]&slK&b#6\`2?&pu-h_o\c"nqr34eK&Z+UR,S&'r8<Ikl/A)j
qr3FlK&c%SSDsA(MW*OQU>ke(OQ1rQhrCNln`'B'Rc*#[VW%((P2_)QdGhIjjl-0rU>aPZZ/Xm)T&YF_
c/Z7li8UNjb2Knjh;Y<lK&ai1^>df)qVd%ap>D:rpYpeaK&YqPS`0M*rnr[mlf"5js5J^lK&bnOT]5_*
N8`gUT]5_*N8oNMgZ,6ln)F6'Rc*)]UuD%+NT,QLbi6+jio'mqU>aY]Y2\^*RcB"[aQ'nlh;Y<jc/H+j
iSpTlK&aZ,_rB5+rS`@dq;@\"o&>8\K&YeLU#Gh+MW"$_RGn#%K&VCAg>]*jK&PkNS`9S,LZ=!Hf&Nml
m,J$'Rc*2`U#Gk,M;j-HaPshjiSgNhg>Jsho&5_jK&XT*_r64+cf)7jk2MrlK&aN(a5YS-s5ARfqr!t&
mc&iXK&YYHV;_7/MW"*aS)O)#K&VCAf&EgjK&PqPS)OG-KB%RDdc7Ull/J/ijPZZhro&RjK&X`.^Z"/1
U>XhbVr@@.NT,QL]]-ujK&P/:Z/Y'.RH&nZ\DtcldGfc9rSX7*lJdETK&YMDWT![3MW"0cS`0/!K&VCA
dc.OjK&Q%SS)XG-K&_ICcJu=ll/I3~>

%%EndBinary
grestore % PSGState
newpath % image
161.154 471.978 mo
75.969 471.978 6.903 425.736 6.903 368.685 cv
6.903 311.643 75.969 265.401 161.154 265.401 cv
239.391 265.401 304.018 304.401 314.052 354.948 cv
304.434 331.362 li
302.742 327.033 302.256 325.836 296.46 325.836 cv
290.421 325.836 289.935 327.033 288.243 331.362 cv
236.035 459.013 li
213.862 467.272 188.328 471.978 161.154 471.978 cv
250.746 452.78 mo
253.44 446.211 li
263.091 446.211 li
259.149 448.537 255.031 450.729 250.746 452.78 cv
278.312 435.879 mo
257.544 435.879 li
285.822 366.678 li
303.064 409.238 li
296.848 418.98 288.464 427.949 278.312 435.879 cv
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[308.64 0 0 208.32 6.24 103.204 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 643 
/Height 434 
/ImageMatrix[643 0 0 -434 0 434 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 643 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 643 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 643 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
K(+B]K(+B]K(+B]K(+B]K(+B]naM_3K(4H_K(4H_l1(53K(+B]K(+B]K(+B]K(+B]K(.I_Wpt]2K(4H_
K(77YK(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]
dI;bWK(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(.1W
K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]K(+B]dI;bV
K("<[K("<[q<s41K(+B]K(+B]K(+B]K(+B]K(/$oRdYjsK("<[K(%[eU@<d(K(+B]K(+B]K(+B]K(+B]
dI;bVK("<[K("<[q<s41K(+B]K(+B]K(+B]K(+B]K(/$oRdYjsK("<[K(%[eU@<d(K(+B]K(+B]K(+B]
K(+B]dI;bVK("<[K("<[q<s41K(+B]K(+B]K(+B]K(+B]K(/$oRdYjsK("<[K(%[eU@<d(K(+B]K(+B]
K(+B]K(+B]dI;bVK("<[K("<[q<s41K(+B]K(+B]K(+B]K(+B]K(/$oRdYjsK("<[K(%[eU@<d(K(+B]
K(+B]K(+B]K(+B]dI;bVK("<[K("<[K("<[K("<[K(&6uP44(mK(+B]K(/$oRdYjsK("<[K("<[K("<[
K("<[g$bs1K(+B]K(+B]dI;bVK("<[K("<[K("<[K("<[K(&6uP44(mK(+B]K(/$oRdYjsK("<[K("<[
K("<[K("<[g$bs1K(+B]K(+B]dI;bVK("<[K("<[K("<[K("<[K(&6uP44(mK(+B]K(/$oRdYjsK("<[
K("<[K("<[K("<[g$bs1K(+B]K(+B]dI;bVK("<[K("<[K("<[K("<[K("<[K("<[K("<[l0k)/K'n6Y
K'n6YK'n6YK'n6YK'q=[WpbQ.K("<[K(%+UK'n6YK'n6YK'n6YK'n6YK'n6Yna;S/K("<[K("<[l0k)/
K'n6YK'n6YK'n6YK'n6YK'n6YK'n6YK'n6YdI)VSK'n6YK'n6YK'n6YK'n6YK'n6YK'n6YK'n6YK'n6Y
K'n6YK'n6YK'n6YK'n6YK'n6YK'n6YK'q%SK'n6YK'n6YK'n6YK'n6YK'n6YK'n6YK'n6YK'qmkRdG^o
K'e0WK'hOaU@*X$K'n6YK'n6YK'n6YK'n6YdI)VRK'e0WK'e0Wq<a(-K'n6YK'n6YK'n6YK'n6YK'qmk
RdG^oK'e0WK'hOaU@*X$K'n6YK'n6YK'n6YK'n6YdI)VRK'e0WK'e0Wq<a(-K'n6YK'n6YK'n6YK'n6Y
K'qmkRdG^oK'e0WK'hOaU@*X$K'n6YK'n6YK'n6YK'n6YdI)VRK'e0WK'e0Wq<a(-K'n6YK'n6YK'n6Y
K'n6YK'qmkRdG^oK'e0WK'hOaU@*X$K'n6YK'n6YK'n6YK'n6YdI)VRK'e0WK'e0Wq<a(-K'n6YK'n6Y
K'n6YK'n6YK'qmkRdG^oK'e0WK'hOaU@*X$K'n6YK'n6YK'n6YK'n6YdI)VRK'e0WK'e0WK'e0WK'e0W
K'i*qP4!qiK'n6YK'qmkRdG^oK'e0WK'e0WK'e0WK'e0Wg$Pg-K'n6YK'n6YdI)VRK'e0WK'e0WK'e0W
K'e0WK'i*qP4!qiK'n6YK'qmkRdG^oK'e0WK'e0WK'e0WK'e0Wg$Pg-K'n6YK'n6YdI)VRK'e0WK'e0W
K'e0WK'e0WK'i*qP4!qiK'n6YK'qmkRdG^oK'e0WK'e0WK'e0WK'e0Wg$Pg-K'n6YK'n6YdI)VRK'e0W
K'e0WK'e0WK'e0WK'i*qP4!qiK'n6YK'qmkRdG^oK'e0WK'e0WK'e0WK'e0Wg$Pg-K'n6YK'n6YdI)VR
K'e0WK'e0WK'e0WK'e0WK'i*qP4!qiK'n6YK'qmkRdG^oK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'gtQ
K'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0WdHuPQ
K'e0WK'e0WK'e0WK'e0WK'e0WK'e0WK'e0Wl0Xr+K'\*UK'\*UiU!<+K'e0WK'e0WK'e0WK'e0WK'gtQ
K'\*UK'\*UK'`="MX?#_K'e0WK'e0WK'e0WK'e0Wl0Xr+K'\*UK'\*UiU!<+K'e0WK'e0WK'e0WK'e0W
K'gtQK'\*UK'\*UK'`="MX?#_K'e0WK'e0WK'e0WK'e0Wl0Xr+K'\*UK'\*UiU!<+K'e0WK'e0WK'e0W
K'e0WK'gtQK'\*UK'\*UK'`="MX?#_K'e0WK'e0WK'e0WK'e0Wl0Xr+K'\*UK'\*UiU!<+K'e0WK'e0W
K'e0WK'e0WK'gtQK'\*UK'\*UK'`="MX?#_K'e0WK'e0WK'e0WK'e0Wl0Xr+K'\*UK'\*UiU!<+K'e0W
K'e0WK'e0WK'e0WK'gtQK'\*UK'\*UK'\*UK'\*UK'\*Una)G+K'e0WK'e0Wl0Xr+K'\*UK'\*UK'\*U
K'\*UK'_1WWpPE*K'e0WK'gtQK'\*UK'\*UK'\*UK'\*UK'\*Una)G+K'e0WK'e0Wl0Xr+K'\*UK'\*U
K'\*UK'\*UK'_1WWpPE*K'e0WK'gtQK'\*UK'\*UK'\*UK'\*UK'\*Una)G+K'e0WK'e0Wl0Xr+K'\*U
K'\*UK'\*UK'\*UK'_1WWpPE*K'e0WK'gtQK'\*UK'\*UK'\*UK'\*UK'\*Una)G+K'e0WK'e0Wl0Xr+
K'\*UK'\*UK'\*UK'\*UK'_1WWpPE*K'e0WK'gtQK'\*UK'\*UK'\*UK'\*UK'\*Una)G+K'e0WK'e0W
l0Xr+K'\*UK'\*UK'\*UK'\*UK'_1WWpPE*K'e0WK'gtQK'\*UK'\*UK'\*UK'\*UK'\*UK'\*UK'\*U
K'\*UK'\*UK'\*UK'\*UK'\*UK'\*UK'\*UK'\*UdHlJNK'S$SK'S$Sq<Nq)K'\*UK'\*UK'\*UK'\*U
K'_agRd5RkK'S$SK'VC]U?mKuK'\*UK'\*UK'\*UK'\*UdHlJNK'S$SK'S$Sq<Nq)K'\*UK'\*UK'\*U
K'\*UK'_agRd5RkK'S$SK'VC]U?mKuK'\*UK'\*UK'\*UK'\*UdHlJNK'S$SK'S$Sq<Nq)K'\*UK'\*U
K'\*UK'\*UK'_agRd5RkK'S$SK'VC]U?mKuK'\*UK'\*UK'\*UK'\*UdHlJNK'S$SK'S$Sq<Nq)K'\*U
K'\*UK'\*UK'\*UK'_agRd5RkK'S$SK'VC]U?mKuK'\*UK'\*UK'\*UK'\*UdHlJNK'S$SK'S$Sq<Nq)
K'\*UK'\*UK'\*UK'\*UK'_agRd5RkK'S$SK'VC]U?mKuK'\*UK'\*UK'\*UK'\*UdHlJNK'S$SK'S$S
K'S$SK'S$SK'VsmP3deeK'\*UK'_agRd5RkK'S$SK'S$SK'S$SK'S$Sg$>[)K'\*UK'\*UdHlJNK'S$S
K'S$SK'S$SK'S$SK'VsmP3deeK'\*UK'_agRd5RkK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'UhMK'S$S
K'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SK'S$SdHcDLK'J]f
m-EElW9T!"K'IsQO6ZB'e*F7'K'MmkP3[_cK'S$SK'V[eRd,LiN9^0'\*M9'K'IsQK'J$Ss6HlSeEVYN
g$5U'K'S$SK'S$SdHcDLK'IsQK'IsQK'IsQK'IsQK'MmkP3[_cK'S$SK'V[eRd,LiK'IsQK'IsQK'IsQ
K'IsQg$5U'K'S$SK'S$SdHcDLK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQK'IsQl0=`%K'@mOK'@mOiT[*%
K'IsQK'IsQK'IsQK'IsQK'LbKK'@mOK'@mOK'E*qMX#fYK'IsQK'IsQK'IsQK'IsQl0=`%K'@mOK'@mO
iT[*%K'IsQK'IsQK'IsQK'IsQK'LbKK'@mOK'@mOK'E*qMX#fYK'IsQK'IsQK'IsQK'IsQl0=`%K'@mO
K'@mOiT[*%K'IsQK'IsQK'IsQK'IsQK'LbKK'@mOK'@mOK'E*qMX#fYK'IsQK'IsQK'IsQK'IsQl0=`%
K'@mOK'@mOiT[*%K'IsQK'IsQK'IsQK'IsQK'LbKK'@mOK'@mOK'E*qMX#fYK'IsQK'IsQK'IsQK'IsQ
l0=`%K'@mOK'@mOiT[*%K'IsQK'IsQK'IsQK'IsQK'LbKK'@mOK'@mOK'E*qMX#fYK'IsQK'IsQK'IsQ
K'IsQl0=`%K'@mOK'@mOiT[*%K'IsQK'IsQK'IsQK'IsQK'LbKK'@mOK'@mOK'@mOK'@mOK'@mOn`c5%
K'IsQK'IsQl0=`%K'@mOK'@mOK'@mOK'@mOK'CtQWp53$K'IsQK'LbKK'@mOK'@mOK'@mOK'@mOK'@mO
n`c5%K'IsQK'IsQl0=`%K'@mOK'@mOK'@mOK'@mOK'CtQWp53$K'IsQK'LbKK'@mOK'@mOK'@mOK'@mO
K'@mOn`c5%K'IsQK'IsQl0=`%K'@mOK'@mOK'@mOK'@mOK'CtQWp53$K'IsQK'LbKK'@mOK'@mOK'@mO
K'@mOK'@mOn`c5%K'IsQK'IsQl0=`%K'@mOK'@mOK'@mOK'@mOK'CtQWp53$K'IsQK'LbKK'@mOK'@mO
K'@mOK'@mOK'@mOn`c5%K'IsQK'IsQl0=`%K'@mOK'@mOK'@mOK'@mOK'CtQWp53$K'IsQK'LbKK'@mO
K'@mOK'@mOK'@mOK'@mOn`c5%K'IsQK'IsQl0=`$K'7gMK'7gMiTR$#K'@mOK'@mOK'@mOK'@mOK'C\I
K'7gMK'7gMK'<$oMWo`WK'@mOK'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mOK'@mOK'@mOK'@mO
K'C\IK'7gMK'7gMK'<$oMWo`WK'@mOK'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mOK'@mOK'@mO
K'@mOK'C\IK'7gMK'7gMK'<$oMWo`WK'@mOK'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mOK'@mO
K'@mOK'@mOK'C\IK'7gMK'7gMK'<$oMWo`WK'@mOK'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#K'@mO
K'@mOK'@mOK'@mOK'C\IK'7gMK'7gMK'<$oMWo`WK'@mOK'@mOK'@mOK'@mOl04Z#K'7gMK'7gMiTR$#
K'@mOK'@mOK'@mOK'@mOK'C\IK'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mOl04Z#K'7gMK'7gM
K'7gMK'7gMK':nOWp,-"K'@mOK'C\IK'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mOl04Z#K'7gM
K'7gMK'7gMK'7gMK':nOWp,-"K'@mOK'C\IK'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mOl04Z#
K'7gMK'7gMK'7gMK'7gMK':nOWp,-"K'@mOK'C\IK'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mOK'@mO
l04Z#K'7gMK'7gMK'7gMK'7gMK':nOWp,-"K'@mOK'C\IK'7gMK'7gMK'7gMK'7gMK'7gMn`Z/#K'@mO
K'@mOl04Z#K'7gMK'7gMK'7gMK'7gMK':nOWp,-"K'@mOK'C\IK'.aKK'.aKK'2smMWfZUK'7gMK';ag
P3IS_K'@mOK'DOaRcf:cK'.aKK'2+UU?I3mK'7gMK'7gMK'7gMK'7gMdHH2FK'.aKK'.aKq<*Y!K'7gM
K'7gMK'7gMK'7gMK';I_Rcf:cK'.aKK'2+UU?I3mK'7gMK'7gMK'7gMK'7gMdHH2FK'.aKK'.aKq<*Y!
K'7gMK'7gMK'7gMK'7gMK';I_Rcf:cK'.aKK'2+UU?I3mK'7gMK'7gMK'7gMK'7gMdHH2FK'.aKK'.aK
q<*Y!K'7gMK'7gMK'7gMK'7gMK';I_Rcf:cK'.aKK'2+UU?I3mK'7gMK'7gMK'7gMK'7gMdHH2FK'.aK
K'.aKq<*Y!K'7gMK'7gMK'7gMK'7gMK';I_Rcf:cK'.aKK'2+UU?I3mK'7gMK'7gMK'7gMK'7gMdHH2F
K'.aKK'.aKq<*Y!K'7gMK'7gMK'7gMK'7gMK';I_Rcf:cK'.aKK'2+UU?I3mK'7gMK'7gMK'7gMK'7gM
dHH2FK'.aKK'.aKK'.aKK'.aKK'2[eP3@M]K'7gMK';I_Rcf:cK'.aKK'.aKK'.aKK'.aKg#oC!K'7gM
K'7gMdHH2FK'.aKK'.aKK'.aKK'.aKK'2[eP3@M]K'7gMK';I_Rcf:cK'.aKK'.aKK'.aKK'.aKg#oC!
K'7gMK'7gMdHH2FK'.aKK'.aKK'.aKK'.aKK'2[eP3@M]K'7gMK';I_Rcf:cK'.aKK'.aKK'.aKK'.aK
g#oC!K'7gMK'7gMdHH2FK'.aKK'.aKK'.aKK'.aKK'.aKdc[n!K'7gMK'<6uK]dsMK'.aKK'.aKK'.aK
K'.aKK'0f0a68-=K'7gMk320pK'.aKK'.aKK'.aKK'.aKK'.aKK'1_JXltB#K'7gMr93S3Rc_rY[-*&(
K'.aKoB24ta6(%tK'.aKK'2I_n)gY5\`_-!K'7gMK';I_l0!Z\K'%[IK'%[IK')%SU?@-kK'.aKn`H"t
dc[n!K'7gMK'33ulK=VtdcIarK'%[IK')OaoAu_/`9+htK'.aKK'2Rbm,k>2[HGj!K'7gMK';Ucjl_6W
jlN)rK'%[INTTrrq;mLrfB00tK'.aKN9BrtK'(DA[-*&(K'.gMs5rS.RcVlW[,uu&K'%[IoB,N'U?9;S
_WQO6K'.aKn`Q(t\`V&tK'.aKK'2C]l/mTZioQlrK'%[IOll5rq;mLreE3stK'.aKO6?/tK'(;>\*&A+
K'.pPr9!8+RcVcT\)r;)K'%[Ip?(`'U?9/O`ohs:K'.aKp#h@t[H>ctK'.aKK'2OajlV0VjlN)rK'%[I
Nop#rq;mLrfB00tK'.aKN9BrtK'(DA[-*&(K'.gMs5rS.RcVWP]B4_-K'%[Iq<$r'U?9&Lale9=K'.aK
pudRtZKBQtK'.aKK'2XdioYjSioQlrK'%[IOll5rq;mLre)mmtK'.aKO6?/tK'(8=\EAJ,K'.pPr9!8+
RcVNM^?1%0K'%[IrT<5'U?9&Lale9=K'.aKpudRtZKBQtK'.aKK'2XdioYjSgZ>BrK'%[IQfdYrq;mLr
c/uItK'.aKQKRYtK'(&7^?:+2K'/0Wp#bN$RcVNM^?1%0K'%[IrT<5'U?8oHc0']AK'.aKqr`dtY3+9t
K'.aKK'2aghr]OPf]B0rK'%[IS*&qrK&tA@ZfZl%K'&9ZnE'3%P30UC_WQO6K'/9Zo&f3!RcVEJ_<-@3
K'%[I!9Spq]&h&rK'%[IK')jjioR3&X6/'tK'.aKK'2mkgZF+LgZ>BrK'%[IR-*_rK&tJCYi^Q"K'&0W
oB#N(P30aG^?:+2K'/0Wp#bN$RcV9F`TDd7K'%dLroJan[cPcrK'%[IK'*!nhW:d"W92jtK'.aKK'3!n
f]IeIe`EsrK'%[IT'#.rK&t8=[cW2(K'&B]mH*m"P30L@`TMj9K'/E^mcNcrRcV9F`TDd7K'%dLroJan
[cPcrK'%[IK'*!nhW:d"W92jtK'.aKK'3!nf]IeIdH.[rK'%[IU?:FrK&t,9]&nV,K'&Nal/hHsP30@<
ale9=K'/NalfRHoRcV0CaQA*:K'%mOqrNFkZfTQrK'%[IK'**qgZ>HtUupRtK'.aKK'3-reE2AEcK2Ir
K'%[IV<6XrK&t#6^#jq/K'&Wdk2l-pP30@<ale9=K'/NalfRHoRcM3D`T;^5K&q^JroE&!U?/T?eE2AF
K'%^J!9MnqWog,>hrfUSK'.aKro_enK&kSFX6"rpK&rK`kiDR#MWMtA]&nV,K'&Nal/hHsP30L@`TMj9
K'/E^mcNcrRcM*AaQ8$8K&qgMqrH_sU?/T?eE2AFK'%^J!9MnqWog#;iobpVK'.aKdH6&AdH%UpK&qUG
U?1@pq;dFp_WAVrK'%[IT]Y:rK&sT*al\3;K'&H_lfIBmRcM*AaQ8$8K&qgMqrH_sU?/K<fB.\IK'%jN
r8iOlUugLrK'%[IK'*'peE);CcK)CpK&qUGV<-Rpq;dFp_WAVrK'%[IT]Y:rK&sT*al\3;K'&H_lfIBm
RcLj:cfKc?K&r'To]4ulU?/65hWBFPK'&*Up#UeeS`T"rK'%[IL?AHrdH,u@cK)CpK&qUGV<-Rpq;dFp
^ZEDrK'%[IUupRrK&sK'biXN>K'&TckN1siRcLs=biOH<K&qsQpZ1;oU?/B9g?+"LK'%sQq;m4iU#k:r
K'%[IK'(JBK&k>?ZK6]"K&r`giT0gqMWM_:_<-@3K'&chioPdR]&h&rK'%[IRHEerl/eAp[,fQpK&qUG
O6-#piT-`pV<-RrK'%[INop#rK&rQbk2q9XK'%gMrT2GgK&k)8\`JG)K&rung>r(jMWMJ3aQA*:K'&un
guX.LZfTQrK'%[ITB>4rl/eAp[,fQpK&qUGO6-#piT-`pV<-RrK'%[INop#rK&rQbk2q9XK'%gMrT2Gg
K&ju5]]Fb,K&s)qfAqPE^Z<>pK&qUGUugLpn`5kpYiX?rK'%[IUZULrl/eApXlS'pK&qUGQK@MpK&ich
hW9@NK&r$Sp#OfeWo]Q.mH0#_K'&$SpZ9faK&ju5]]Fb,K&s)qfAqPE^Z<>pK&qUGUugLpn`5kpYiX?r
K'%[IUZULrl/eApYiO9pK&qUGP3)5pK&ilkgZ=%KK&qmOq;g5iWo]]2l/mT[K'%pPqW6,dK&ji1^u^10
K&s2teDu5B]B%&pK&qUGVrc^pn`5kpYiX?rK'%[IUZULrl/eApXlS'pK&qUGQK@MpK&ichhW9@NK&r$S
p#OfeWo]]2l/mT[K'%pPqW6,dK&ji1^u^10K&s2teDu5B]B%&pK&qUGVrc^pn`5kpXl\-rK'%[IVWQ^r
l/eApXlS'pK&qUGQK@MpK&ichhW9@NK&r$Sp#OfeWo]Q.mH0#_K'&$SpZ9faK&j`._rZL3K&s?#d,]f>
\E(ipK&qUGX6&!pn`5kpXl\-rK'%[IVWQ^rl/eAoXlJ!nK&hOEQK7GniT$ZnT&f"pK&qUGQ0%Gpg#T0p
O6-#rK'%[IPNMArdH,u?a5ahnK&hOEXQ8!nq;[@n\E(ipK&qUGX6&!pn`5kpWTDjrK'%[IWoi!rl/eAo
YiF3nK&hOEPN;5niT$ZnU?(:pK&qUGOlc/pg#T0pPND;rK'%[IOQQ/rdH,u?b2^%nK&hOEWT;dnq;[@n
]B%&pK&qUGW9)dpn`5kpXl\-rK'%[IVWQ^rl/eAoXlJ!nK&hOEQK7GniT$ZnU?(:pK&qUGOlc/pK&iB]
l/dNYK&qjNqW-&bK&ac/^uU+.K&j/se)U8aMWD2+cK0Z>K&s/se`;>CXlS'pK&qUGVWHXpl/\;nXlJ!n
K&hOEQK7GniT$ZnT&f"pK&qUGQ0%GpK&i6YmH&r]K&r!Rp>jW^K&aZ,_rQF1K&j9!d,Xr^MWD/*cfKc?
K&s/se`;>CXQ8!pK&qUGVWHXpl/\;nVW6LnK&hOES`JqniT$ZnS)iepK&qUGR-!YpK&i-VnE#8`K&r*U
oAn<[K&aZ,_rQF1K&j9!d,Xr^MWD/*cfKc?K&s/se`;>CXQ8!pK&qUGVWHXpl/\;nWT2^nK&hOERH3Yn
iT$ZnT&f"pK&qUGQ0%GpK&i6YmH&r]K&r!Rp>jW^K&ac/^uU+.K&j/se)U8aMWD;.bN4?;K&s&pf]7YF
YiO9pK&qUGUZLFpl/\;nWT2^nK&hOERH3YniT$ZnS)iepK&qUGR-!YpK&i-VnE#8`K&r*UoAn<[K&aN(
a5hj5K&jB$c/XE9[,]KnK&hOEY2n-nn`,enWT;dpK&qUGWo_ppl/\;nVW6LnK&hOES`JqnK&`H_jlD$S
K&i3Xmc3!\WoTB)nE#8`K&r*UoAn<[K&aN(a5hj5K&jB$c/XE9[,]KnK&hOEY2n-nn`,enWT;dpK&qUG
Wo_ppl/\;nUZ::nK&hOET]G.nK&`?\ki@?VK&i<[lf6[YWoT-"pZ7"gK&r?\m,ZRTK&aN(a5hj5K&jE%
bi=<8[,]KnK&hOEYN43nn`,enVW?RpK&qUGXl\-pl/\;nVW6LnK&hOES`JqnK&`H_jlD$SK&i3Xmc3!\
WoT6%o]:\dK&r6Yn)VmWK&aW+`8lO2K&j9!d,T`<\)Y]nK&hOEX5qpnn`,enWT;dpK&qUGWo_ppl/\;n
VW6LnK&hOES`JqnK&`H_jlD$SK&i3Xmc3!\WoT6%o]:\dK&r6Yn)VmWK&XQ)`8cI0K&a2td,Ol\MW:u%
dc?#@K&j5udGscWP2rM$h;s7MK&s,rf&Z)VRc:=+g>deFK&`<[l/L[]U>q^&l/[HWK&i<[lf6[YWoT6%
o]:\dK&r6Yn)VmWK&XQ)`8cI0K&a2td,Ol\MW:u%dc?#@K&j5udGq7eg#T!jhW9@NK&s,rf&Z)VRc:($
iT#OMK&`Naj5QQfki8#im,WcZK&iH_kMq]bo&PVfqrNFkK&rH_l/^7QK&XH&a5_d3K&a?#bi6"hcf;:j
dc?#@K&j5udGq7eg#SmgiT5[QK&s9!dcBZRRc:4(h;a+IK&`E^k2Mrkk2Vojl/[HWK&i<[lf6[Y^#JJ?
P2l)nK&hOEOQ?#ndGoi<^Z*2lK&_IC[,]Kl[c5Ql[,]KnK&hOEYN43nn`.@Ce`3akfAqPEK&iijguIYZ
^Z!u-V;g@lK&_ICS`AklS`8elRcEYnK&hOERH3Yng#Kd*mc0Jjn`5;_K&i'To&J-X^>[&j]]-ulK&_IC
\)Y]lZ/X3lZ/a9nK&hOEZK0Enn`.1>g>f0mg>mkHK&irmg#M>W^Z!u-V;g@lK&_ICS`AklRc<SlRcEYn
K&hOERH3Yng#K['n`,emn`5;_K&i'To&J-X]A^ij]]-ulK&_IC\)Y]lYi=-lXlJ!nK&hOE[cG]nn`..=
gZ,-jhW0:LK&j)qe`5oS]]%c-V;g@lK&_ICT&\qlRH!MlQfIGnK&hOESE/kng#KX&o&Geko]1VbK&i0W
n)MgU]&Ccj]]-ulK&_IC\)Y]lY2\!lXlJ!nK&hOE[cG]nn`.(;h;b?lhW0:LK&j)qe`5oS]A_]-V;g@l
K&_ICT&\qlQf@AlQfIGnK&hOESE/kng#KR$o])"mo]1VbK&i0Wn)MgU]]$oj^Z*2lK&_IC[,]Klq;T'G
cf2Fnbi=<8K&`rmfA`^fguG?ngZ3tIK&irmg#M>W\DcK-V;g@lK&_ICT&\qliSqB+lf+Jpk2V'RK&`0W
mGa/cp#D+no]1VbK&i0Wn)MgU\`(]j^Z*2lK&_IC[,]Klq;SsDdc.aqbi=<8K&`rmfA`^fguG?ngZ3tI
K&iunf]25V\DcK-U>k.lK&_ICU#Y.liSqB+lf+Aml/RBUK&`9ZlJdi`p#D+no]1VbK&i0Wn)MgU[c,Kj
\Dk]lK&_IC]Apulq;SjAe`*gme)Q&?K&a2td,LeZiT$cphW0:LK&j)qe`5oS\)HE-U>k.lK&_ICU#Y.l
iSq?*m,FJnl/RBUK&`9ZlJd`]pu@Fqo]1VbK&i0Wn)MgU[,K?j\Dk]lK&_IC]Apulq;Sd?fAa$oe)Q&?
K&a2td,LbYio?lqhW0:LK&j)qe`5oS\_uK+W8ZLjK&VCAS)WYjPi;)jRc<SlK&_ICRH*SlMW4HlNoTfn
K&hOEPiV;ndGqgral1(p_W$1,K&X)qdG_4df&F$qd,T`<K&a)qe)I.^i8^crgZ3tIK&iunf]25V[c$9+
V;^:jK&VCAT&SkjPi;)jRH!MlK&_ICRH*SlLZ86lNoTfnK&hOEPiV;ndGq^obi-:p`SuL/K&X2tcJbna
f&F$qd,T`<K&a)qe)I%[j5[)ugZ3tIK&iunf]25V[c$9+UuC4jK&VCAT&SkjPMu#jRH!MlK&_ICRH*Sl
LZ86lNoTfnK&hOEQ/qAndGq^obi-:p`SuL/K&X2tcJbk`fAa-rd,T`<K&a)qe)I%[j5[)ugZ3tIK&iun
f]25V[G^3+UuC4jK&VCATAnqjOl>ljRH!MlK&_ICRcEYlL>r0lMrXTnK&hOER,mSndGqLidc%gsaPqg2
K&X<"bMfAXgu>Qte)Q&?K&a2td,OTTYMnR%W8cRlK&_ICX5hjll/K#,l/AGshr97IK&WE^jPc3ZoAZ1t
lJmKVK&`<[l/LCUYi5K=OlGrlK&_ICP2l)ldGhLjd,D^t`SuL/K&X2tcJbb]g>]Hud,T`<K&a)qe)KoW
Z/O^%X5_dlK&_ICW8lXll/K).kM`>tgu<qFK&W<[kM_T_n`$(ukMq0SK&`3Xm,H^XZJkW=PiD/lK&_IC
O5olldGhLjd,D[s`o;U0K&X2tcJb_\gZ#NudGoi=K&a)qe)KoWYi4X%WoD^lK&_ICW8lXll/Ju+lJ\Pt
hr97IK&WE^jPc*Wp>VM"lJmKVK&`<[l/LCUXl99=OlGrlK&_ICP2l)ldGhIidG_dt`o;U0K&X5uc/GPY
h;Ya"dGoi=K&a,rdc0fVY2SL%WoD^lK&_ICWT2^ll/Jl(mGXl"hr97IK&WE^jPf(VY2K!3SDiYjK&VCA
Qf@AjK]2sjOlGrlK&_ICP2l)ldGh:df&=4!al7p3K&X?#b2N0TXl/'pZJj3jK&VCAZ/X3jS)NSjVrHLl
K&_ICXQ.pll/Jl(mGXi!i8T@JK&WE^jPf(VY2K!3S)NSjK&VCAQf@AjK]2sjOQ,llK&_ICP2l)ldGh@f
eD\+"`o;U0K&X5uc/JKWYMe3p[GfEjK&VCAY2\!jSDiYjWoD^lK&_ICWT2^ll/Jr*lf"`"h;X%GK&W?\
k2G:XYi,-3T&JejK&VCAQ/_5jL#N$jPN))lK&_ICOQ5rldGh=ee`"4#`o;U0K&X5uc/JKWY2J-p[GfEj
K&VCAY2\!jSDiYjWoD^lK&_ICWT2^ll/Jo)m,=i#h;X%GK&W?\k2G:XYMf'3T&JejK&VCAQ/_5jL#N$j
PN))lK&_ICOQ5rldGh=ee`"1"a5V^1K&X5uc/JKWY2J-p[,K?jK&VCAY2\!jRGmGjWoD^lK&_ICWT2^l
l/Jo(m,4c!h;NtEK&N9Zk2;-Tq;Ih%ki.3RK&W0Wlf!HSs5B.#oAbG_K&`'TnD_jTYM[jf^Ym&hK&M=?
[,K?hUYt(h[,K?jK&VCAYN"'jRGmGjWT)XlK&_ICWT2^ll/Jl'mGOl"h;NtEK&N9Zk2;*SqVdq&ki.3R
K&W0Wlf!HSro'(#oAbG_K&`'TnD_jTYM[jf^Ym&hK&M=?[,K?hU>Y"h[,K?jK&VCAYN"'jR,RAjWT)Xl
K&_ICWoMdll/Jr)len`"gYmbCK&N0Wl/7KXpu.e&k2M!PK&W'TmbrcV!9'.$n`,5]K&_sQoA\0WXP_Xf
^Ym&hK&M=?[,K?hU>Y"h[,K?jK&VCAYN"'jQf7;jWT)XlK&_ICWoMdll/Ji&mbk&%gYmbCK&N3XkhqBW
pu.e&k2M!PK&W*UmGWZUs5B4%n`,5]K&_sQoA\0WX5DRf^Ym&hK&M=?[,K?hU#=qh[,K?jK&VCAYN"'j
Q/V/jWT)XlK&_ICWoMdll/Jf%n)1/&gYmbCK&N3Xkhq?Vq;In'k2M!PK&W*UmGZaWWo00$mc&iXK&VgM
p#4<WX5DRf^>QuhK&M=?[GfEhU#=qhZf09jK&VCAYN"'jn_pJ*lJ\f&f]%MBK&W]fgu7MVWSd:)V;U4h
K&M=?T&JehL#DshRc3MjK&VCARH!Mjg#8shr8<q#n`#/[K&VpPo&8!TWo)Lf^>QuhK&M=?[GfEhT&A_h
Zf09jK&VCAYi=-jn_pA'mGY,)f]%MBK&W`ggYqDUX5EF)Vr6@hK&M=?S)NShLZ&*hS`/_jK&VCAQK%;j
g#8shrns1&mc&iXK&VgMp#4<WXP_Xf_;N2hK&M=?ZJj3hTA\eh[c,KjK&VCAXl@pjn_pD(m,>,+e`)2?
K&WWdhVm_XWo*@)Wo2RhK&M=?RGmGhL>`$hSDiYjK&VCAQf@Ajg#8shrSX(%n)ArYK&VjNo\n3VX5DRf
_r/>hK&M=?Yi4'hq;A=2i8D6*aPha0K&NZegYeFVm,>,+e`)2?K&WWdhVm_XW8I4)Wo2RhK&M=?RGmGh
iS^Zlqr"4,iSfCIK&MjNo&,,Xr8="%n)ArYK&VjNo\n3VVVg4f^u3,hK&M=?Zf09hq;A.-jl!Z,bMe'3
K&Nchf\i"Pn):;*g#@VCK&W`ggYqDUVr..)WSlLhK&M=?RGmGhiS^Wkr8=:,io,LJK&MjNo&,,Xr8="%
n)ArYK&VjNo\n3VVVg4f^u3,hK&M=?Zf09hq;A.-jl!Z,bMe'3K&Nchf\htOnDUD+g#@VCK&Wchg>V;T
VVh()WSlLhK&M=?Rc3MhiS^TjrSXC-io,LJK&MmOn_f#Wqr!q%n)ArYK&VjNo\n3VWSZ@d`S\DfR,I;h
gYo*hY2IjfTAS_f]&:]hK&M=?W8ZLhQ/M)hXl7jjK&VCAVW-Fjl/AStoA?Y,fAM8=q;BZZ]&8q5m,*QT
rSXC-io,LJK&MmOn_f#Wqr""'mG``WK&VdLp>OEXWSZ@d`S\DfRc*Ghg#8shY2IjfTAS_f]&:]hK&Qag
jl2rlWSuRhPi2#hYMn!jK&VCAUuL:jl/APso\Z_,f\hA>qr#`X]\o18ledERrnsI-j5GUKK&MmOn_f#W
qV[q'mG``WK&VdLp>OEXW8?:d`8A>fSD`ShfAWghY2IjfT&8Yf]&:]hK]2sjhr:HjWSuRhPi2#hYMn!j
K&VCAUuL:jl/APso\Z_,f\hYFq;JjBbM\cGledERrnsI-j5GUKK&MpPnDJoVq;@h&mc&iXK&VdLp>OEX
W8?:d`8A>fW8QFhbMfthYMdpfS_rSf\_tWhLZ/0jgZ#0jWSuRhPMkrhYMn!jK&VCAUuL:jl/AMrp"uh-
f\h_HpYiU?bi"lHledBQs59R.j5GUKpYj'Mal/HBnDJoVq;@h&mc&iXK&VgMp#4<WVr$4d`8A>fWSlLh
b2KnhYMdpfS_rSf\_tWhQf7;jbMp%jWo;XhPMkrhY2RpjK&VCAUuL:jl/AStoA?\-f&2kPmGY2+f&2kP
mGEZUrSXF.iSfLLro1*?e_uYLo&/3ZWo*d4T&AklK&QXdX5_soM;e<hdGUnYh;?60^#5pKg#:$2]ATgL
f&*"TkMWo/b2JcIlJftG\`'RIg#2DYUu1Y!Z/F'hOl>lj_W&DjU>b(hl/8Jro\Zk0eDQ\Om,>&)fAMnO
n)&iVrnsO/iSfRNr8Og;fAVkNo&/3ZWo*a3TA\tmK&Q^fVrHUmM;e<hdGUnYh;?60^#66Td,De!_r.ZT
f&*"TkMWl.bMeoKl/KeD]A]dKg#2DYUu1Y!Yi+!hP2Yrj^uE8jU>b(hl/8Jro\Zk0eDQtWjPconhr'aW
n)&fUs59X0iSfUOqr4[9f\qtOo&/3ZWo*^2T]#(nK&QagV;gFlM;e<hdGUkXhVZ<0^>QBVcf)Xt`8IcU
f&-;\pYN%0khs)2aPiuShVu9/`SmcSgYhV[pYN%0nDLY2d,CPSk2Ni/c/G>Sj5B1[pt`(/pYW(0fAN(T
lJ\c%g#/4Tm,-dZpt`(/s50X0hr'XTo&6>%iS]dTo\\?Zo\R(7ptqh(lJ[?R!9'^4iSf[Qq;BZYpt`(/
hquE1^>QEWcJcLr`SdoWe_g2[pt`(/kMNu1`o*uWf&='rc/>JWh;@b[o\Qe/n_g_2dG^\Ujl3]-cJbGT
j5B1[q;&10p><%1e_m.Zio-WjiS^!Zmbd!\q;&10rnjU1h;F^ZlJ\2jl/7QZp>=Q\p"m.7qVS(+kM_<W
q;Rh%lJ[NWr8>u\q;&41h;?91]\pH\a5OMdbi#S\fAHD]q;&41jkmi1`8J#\cf)(deDR.\hr!t]p"lq1
n)1V3cJbYZh;YQrf&<4Zjl#C]p>)t0p><%1e_m@`gu4a]khq`ambd!\p>)t0rnjU1h;Fp`jPc<]nDK;a
p>=Q\o\R(7q;7t*ki%HYpu7\#lf!ZYqr#l[pYE%0hVZB2]\p]c^u;NVe)7=cfAHD]pYE%0k23r2`8J8c
aPj)VgYemchr!t]p"ln0nDL\3cf(b[h;YNqfAW=[jl#C]pY<"/p"m%3d,2"`e_l_Nmba,`oA8H_p"ck/
s50[1hVb'bj5H3\nDK;ap>=Q\oA7"7q;7t*ki%]`n`#\jo&5D`qr#l[p=un.hVQB2]&1Td]AT^Ig#&ge
g"uP]o\H_-l/085`8J&]cJbnaf&3@^hr!t]o%pS-oAHn3dc%+_gu>EpfAWF^io'(Zp=un.p>3+3dGM:f
d,:#DoA>\fo%r?^o\Hb.!8ja4gYed`io-'Zn_f>`ptsc^o%pq7ptqk)l/@ibnD]PhoAPMaqr#l[p"Ze-
hqlK3]&1We]&9UHg#&geg"uP]oA-Y-l/054`SeDea5NrTgu,$ehV[k\n_UM-oAHn3dc%.`gZ#9nf\rR`
iS`tYp=un.p>3+3dGM=gceslBo\Yego%r?^oA-\.!8j^3gu,*ggu44NpY_"gpYXZ]n_Uk7pYVe)l/@ib
nD]Mgo\kYcqV]cZp=un.hVQH4\DPTh[G[n>hVY9hgYVb_o\Hb.khj25_r/Ah_Vq3Iio$Tii8=(^o%pV.
o&-k4d,D1eeDd:`hr16ej5B1[pY<"/p"m(4cel:jb2A08q;77jo\SQ`p"ck/s50g5g>K'jfAVMDr8<Fi
qVTu`oA7"7q;8"+kM_lgl/IQZqVd4gr8>u\p"Zh.hVQE3\_k`j[,@b<hqtBigYVb_oA-\.khj25_r/Di
_;V*Hio$Tii8=(^n(tA-oAI%7cJc1icJkGTjl)chk2>L^o\?\,pti:4dbhUmb2A08q;7@mn_W6]nD1G-
!8aX2h;G3hgu41Mpu%+hpYXZ]mbYY7p>;e+kM_lgl/IQZqVd4gr8>u\o\?_-hqlN4\_kooYMc&2jPQro
g>;Y^nD1G-l/085`8JMj_;V*Hio$Tii8=(^mbY;-oAI%7cJc1icJkGTjl)fijl#C]n_CJ,pti73e).^n
b2A-7qVRInn_W6]n(kA-s5'^3h;GEnf&;ABrSW[np>=Q\mG>S7p"u\*ki&2nj5P^N!9&^lr8>u\o%^P,
i82W5\_kooYMc&2jPQrog>;Y^nD1D,lJKA6`8J\o]]#@=khr8phr!t]nD1D,o&$q6bi$7o`8Qp=nDKhp
kMPO]nD(A+q;/I7d,2Flal&$6qVRCloA8H_mbP;-s5'd5gYf3lf&;ABrSWUlptsc^mbPS5pYMq-j5?cl
hVj(FrS`Oi!8l2]n_CJ,i82]7\)5]mYMc&2jPQlmgtqk`n(k;+lefP9_ViMn]A]7<khr2niSX1_n(k;+
oA@+9b2C(n_r6g<nDKbnl/1a_n_CJ,ptiF8cJQ@n`ScF-s5/jop"nZan(kA-!8ad6g#00odG]]9!9&gn
qVTu`n(kY5pti(/iS^`og#7PApu..h!8u;_o%^S-hqlZ8[GTZpWo0?(l//>phVS(bnD1G-l/0D9^u3Gp
\)EY3mGOYqj59CanD1G-n_^t9aPb"p^Yt43p#)4qlegsanD(D,ptiC7celXt^u0h&s59$so\SQ`nD(D,
!8ag6fAF3taP_[.pY_1kr8-,`mbPS5pYN"/iS^oteDZ#<oAPeh!8u;_n(b8*inhl8\DPusWo0?(l//Gs
gYVb_n(b8*lJBG8^u*PsZJ^o(n_^"sj50=_mG5,*o\[19bM^@t^>Y+2p#)=tkhkX^n(b;+q;/L8celXt
^u0h&s59$so\SQ`n(b;+XPVRd]AL]fK&HC]Ol-)ng"u,P^>AV@X5DppYMdphK&Q=[OPnODmbG/)j5.r8
\_l6#VVmcumGFo#g>;Y^mbG/)le]M8_;Ef#Y2G>up"uJ#inj4^m+o#)p#!::bM^4p_Vp[:n_fnpkhkX^
n(b8*qVJR8d,2n$]\nD"qr!dtoA8H_n(b;+!8Xa5f\aI$`8H7*oAGqlqqg#_mG5M5p>2n.io$lqf\qG@
pYh(hdGO?H[,'d!bhfhdh;>*fQJh/fVr-:dq;1Mo[,(')`888de_dOfNo9TfTAS_dn_WTf[,1K5\)5Ef
`SeJhNoBZhSD`Sfl/2!b[+tH4\)#9bbMKbdK&?=[Q/;;liSEqW[GCl=YMRjf^YcufK&H7YPi)Grg"u)O
^Y\Y?XP`'rYMdphK&Q=[Ol-5sdGOHJ[+sTqd+u%bjkcTdNo0NdU>Fkbq;(Jo[,($(`nnDdg#&gfMW"<f
S_rSdn_WWg[,1H4\_kQfal'bhM;e<hRc*Gfl/2$c[+tE3\_YEbcec%dK&?1WQeqSpiSEtX[,%qBeDJ1$
^u0h&n)0Mhs5)GcmG5M5pYN"/iS_'#d,BT8mbsGh!8u;_n(Y5)iSDl:Zejs'Rbs"[q;.n'i8+4bmG,))
le]Y<^#.AtY2G;tp>;Fuk2,XbleSr)p#!C=aPb5!\`&D(qV[b!legsanCt>*pt`L:b21S'Z/:/jnDB_l
q;(#cmbG5+!8Xj8e_e.!`8H7*o&,_hs5)Gcm+oG5p>3"1hr(m"cf'K7mbsGhrnu;`mb>5+hqcW7[,1'(
Rbs"[q;.n'i8+4bm+f#)le]V;^>IW$Wo/`lqVRn%jkfOakhW`)p#!C=aPbA%[Gchurns1%legsamG#))
q;&R:bMLG!\DMnqpYV7mptaobleK#+rS=^7fAFC$_r-.)o&,hkr8-,`kM=)5oA6\.io%3%cf'K7mbsGh
dGO?G\(ootdG;+bjkcTdNo0NdU>Fkbq;(Dm[,(**`888dg#&gfM;\6fT&8Ydn_WKc[bg`8]&1WfcJZ+h
L#N$hRGdAfl/1j^\(pf8\D>?bcec%dK&?1WRGR_piSE_Q]A<MCYMRjf_r&8fK&H+UQf%f!g"tlI`SU1B
Yi"Hu\DYQhK&Q"RRGcKMmG#))iSDo;ZJOj&Rbs"[q;.k&iSF=cl.if)le]Y<^#.Z'VVm3erSO.&kMGac
kM<T'pYWR>al(S)ZJgDo!9'C)lJLj`mG#,*pt`O;akkJ&Z/:/jnDB\kqVC,dl.il+!8Xm9eDJ=(]\nD"
len5hs5)GckM=)5o\Qh0i8D6*aPha0kM_rhs5;A`mb>5+hqc`:Z/4j(Qf!SUr8++'j5'OelJ/o*lJBV=
]AMT)U>UX]S)<Gdn_WQd\D?`4^tuudg#&gfK&HI_S)<_ll/(d]\(pf8\_YEbdb_7dK&?(TS)3tsiSE_Q
]A<MCZ/4!fa5=PfK&GtQRc"/%g"trJ_qk(CZ/49n^YcufK&G\IT\oY(fA>oL\(ootdbV1bm,")dLYr$d
U#+ebq;(;j\_ZQ-aPOPdiSUBfK&E-Ukhbjdl.ii*o%q1=_r'/)Wo/Keq;@b"nD<Edl.`c(qVA[;bMLh,
Xl"`fm,+Glq;(#ckM3`+rnXj9e_eO,\_r(tkhr&irnc>bkM4#3p>*"1h;?*,_;Kq'i8CBfr86)^lJ&l)
iSDo;ZJP',Pi%/Os5'I+inaFdkhN`)le]\=]\hf-TAY=ZrnsF+kMGackhN`)oA77=`8BA-Vr30bp>DS#
n)!<ckhE](qVAa=akkS)Y2=igm,+DkqVC,dkhE`)!8Op:dGE.)[bl\ojPQTd!8cGck1mr3p>*"1h;?*,
_;Kq'i8CBfr86)^l.`c(in`)>Yhnj*Pi%/Os5'F*j5'Oel.`c(lJ9Y>\DHE*SDSqUqqn"%leV*ekM3W(
o\R==`S]J.Vr30bp>DS#n)!<ckM*T'qq\j>akk_-Wo&Ecl//2kqVC,dkM*Z)s4k!;dGE:-ZJU8kiSUBd
!8cGcjkRl3p"ct2gu$!+_;Kq'i8CBfqVTr^khEZ'j5&/>Z/5'.Ol(cJ!8jL,j5'OekhEZ'leT_>\_cW.
RGWVRptqe%leV*ek1mN'p"mL@_r'8,Vr30bp>DP"nD<EdkhE](qVAd>aPP_/Vr**`k22rjqq^5ekhE`)
!8Os;d,*:/YMXrhhVY0ds5)Mdk1mr3p>*+4g>Bm,^>OV$gu,*fq;9l^l.W`'iS;r<YMJm-No#BErSF=*
jP9RdkM*T'leT_>\_cW.RGWVRptqh&lJ;!djkRH'p"mL@_r'A/Uu6j_oAH>"nD<Edl.W`'q:r[=`nfP.
Uu$^[j5-TfrS6AekM*Z)s4k$<d,*7.Yht&ihVY0ds5)MdjkRl3p"d"3gY^*0]AS;!g#/mfq;9l^kh<](
i7uo=Xkid.Mr''BqVJ%(k1odfk1dK&m+oe>]&)i2QJ[;Op"uY'l.tmcjP7?&p>3R@`8BJ0Uu6j_oAHA#
n)!<ckh<](ptWX>`80D.U>CLYi81<ds4lSgk1dT)rnOp;dGEI2Xl"`fgY\sd!8cGcjkRl3o\Hq3gY^*0
]AS;!g>JsfqVTr^kM!T'iS;u=Y2/m/Mr''BqVJ()jkT[ejkIH'leTb?\DHW0QJ[;Op"uS%leV*ej4q6%
pYNaC_VaA1U#:O\nDL)!n_WNekM!W(ptWU=`SKM/U>CLYiSLEernQJfk1dT)!8P!<ced70Xl"`fgu#$d
rncGdjP7f3o\Ht4g>C*2\DVtsfANafptsf^k1[K&inW)>Y2/s1M;Ej@pYMk)jkT[ejP.?&m+oh?\_c`1
QJ[;Op"uV&lJ;!dinV3&p>3UA_r'J2U#:O\nDL,"nD<Edk1[N'q:r[=`nf_3TAG1VhVP3ernQJfjkIN)
s4k$<d,*@1Xl"`fgu#$ds5)Mdj4q`3p"d%4g>C*2\DVtsfANafq;9l^kM!T'iS<#>Xkis3L>IO=p"l\(
k1odfjkIH'leTe@\)-T1Pi%)Mo&$>$m+q3fj4q<'p"mRB_;F>2TAY=ZmGOhuo%rWfkM!W(ptWX>`80S3
S_etTgYSsds4lSgjkIN)!8P$=cJI72Wo&Ecg#&gdrSHAdjP7f3p>*.5g#(*4[GZYpeDROfpYX`^k1[K&
inW)>Y20'4L>IO=p"l\(k1odfjP.?&m+ok@\DHf5Ol(cJnDC5%leV*einV3&p>3XB_VaP6SD]"Wlen`!
n_WNek1[N'q:r^>`SK\4S_etTgto'ernQJfjkIN)s4k'=cedF5W8E3af&*UdrncGdj4q`3p"d(5g#(06
Zf$GndGV=fptsf^jk@E&inW/@XPNj2L>IO=p"lY'kM5mgj4h9&m+oqB[bgT3Ol(cJnDC/#mG7<giS;-&
p>3^D^u+>4SD]"WlenYtoA8`gjk@E&qV8mA_qjJ2S_etTgto!c!8QPgjP.H)rnP'?c/.43W8E3afAE[d
r8-;djP.`1p>!47e_\d3Yht&icel+do\SH\jP%<%j4r5@Xkj$5K\h=;oA6M'kM5mginM0%mG6"B\)-c6
O5GQHmGFu$m+q3finM0%p"dRB^Y\>6Qf!DPjkm,qo\JcfjP%<%qqSsA`80Y5S)/bRg"rgds4lSgj4hB)
rS4s>cJIF7V;Hm^eDIIdrSHAdj4hZ1p"[+6f&#!7Xl"`fbhondp"nN\j4_3$jP8>AXkj$5K\h=;oA6P(
k1odfiS2'$mbQ(B\DHl7O5GQHmbb&$m+q3fiS2'$p>*XB^u"G7Qf!DPk232qo\Jcfj4_3$r7o$A`SKb6
S)/bRg>8mds4lSgj4_<'rnG!=c/%=6UY^UZdb_7bqq^/binMT1o\@"5fA>'7Y2=igbhondp>4T\jP%<%
j4r8AXPJKbK&6%SXPN'pq:t&b^"_l.cePn`q;$qbK&5bKXPN@#n_E-Y^"i;:`SJ8bn(s;dK&>VGXPWX+
l.tFS^>&M>^tci`lJ7lbK&5,9Xka!4iS<MJ^Y8bC\_PBain^<bK&4i1[,(T7i8!>HakZUF\_Yfmf\W[d
K&=`.\_cu8hVI;I^"_Q%g"`^crn`7`K&5qPXki6sq:t)c^"_i-dG2%`r8!.bK&5YHXkiO&n_E*X^YJJ;
`ne>bn_TGdK&>PEXPW^-l.tIT^>&J=_;)o`mG4)bK&5&7Y2/'ljk@H'\_P?`jkZNbK&4c/[b^c8iS<DH
b1uaH\_Yclg>8gdK&=Z,]AE/9hqdGJ^"VH"g=rdcr7ut\K&,eLY2&<sq:jua^"_l.d+kt`qq[(bK&5\I
XkiL%n_E'W^YJM<`ne>bn_TGdK&>PEXkrd-l.tLT^=rA:_qVu^n(a/`K&+o3Yh]96j4iYK^Y8bC]%kHa
jP?HbK&4c/[b^c8iS<AGbM;gH\_Yfmg>8gdK&=Z,]AE/9hqdDI^"VK#gY8peqV?bZK&,_JY2&Buq:jr`
^"_o/cePn`rnW:bK&5SFZ/+m(n_E*X^"i>;`SJ8boA5SdK&>JCYho'/l.tIS^=rD;`7r&^n_B;`K&+i1
ZJ>H7jP/_K^t\nD]%kKbkM;ZbK&4]-\D@#;i8!;Gb1u[F]%tongtnsdK&=T*^#&D<hVI8G^"VN$gY8pe
qV?bZK&,_JYMAHuq:jo_^"_r0dG2%`rS<4bK&5VGY2/X'n_E'W^"iA<`ne>boA5SdK&>JCY28p/l.tFR
^=rG<_qVu^n_B;`K&+i1ZJ>H7jP/\J_;"tD]\LZck1uTbK&4`.\)$l9iS<AGbM;aF]\V)ogtnsdK&=T*
^#&A;hqdAH^=qT$gtT'gpt^PXK&,YHYh\U"q:jr`^"_o/dbM+`s4r@bK&5MDYhem*n_E*X^"i>;aPFJb
p"k_dK&>DAYMT'1l.tIS^=rD;`S8,^oA#G`K&+c/[+tW8jkJhL^t\nD^"g]bkhV`bK&4W+]&!,:j4rVJ
b1u[F]\V&nhVP*dK&=N(^Y\M;iSEPI^tRc%gY9'ip>(S]qVLMoRGI#]ZeXm$q:jl^^YA,1dG2%`K&2+9
i81frn_EZii7l!$p>*dF]\`D>N8K6EgY]<npYG)ijOq?&ptNaA^YJM;NnsKde)%Xkc/#h`rnQShinD6'
rnG-Aakc7<RGQcVq;8@3a54Jbptarbi7lH1o\@.9e)'$>UYg[\_V`2do%r<\in;-$inN;DYh]!/N8=6b
kMD`bk2!;tmG%Hki7c$%leKqDZ/(#gK&5JCYhep+n_E$V^teV=`ne>bp>1edK&>>?ZJP?3l.tCQ^tSV=
`S8,^o\>M`q;'ES]A:`f[bUi:jkJbJ_V>+F^"g]blJ7lbj501\[,/m\]A<5;j4rPHbhVmH]A:uni816d
K&=H&_;=e?hqd8E_:mo'gtT0jp"c"kle^CQW86Oj[+t$&q:jf\_;">3dbM1bs5&LerSQGgVV^4eZeb3-
n_E!U^teY>aPFJbq;."dK&>8=ZekK5l.t@P^tSY>`7r&^p=t_bs5(KH`SJ_n\D7&<jkJ_I_qY1F^"g`c
m+n#boA7aL`88Mj^"rG=j4rSHbM2aF^"h#kjP?Hble]nDbhg(j`SL"=j4rSG_:mr(gY9*jp"c:sj5/8A
YheEs[+t!%q:jc[_;"A4dG2+bs5&mpo&%mQZ/4Bp[,(9-n_E!T_;"Y<akXJ`qq[=iqVTHQ\_brp[,(Q5
l.k7N^tS\?`7r&^p=u"jpYNC9bh^M!\(pu<jP/SG`7t7F^>-idm+n#br8,'Cc/-Is^"rJ>inWGFbhMgF
^>.,ljP?Hbo\R4;e_\$s`SL%>inWMG_:mo'gtT6loA->#gtp93\)$*#[G:-'q:jf\_;">3dbM4crna("
lJKbA\_c0![GCE/n_E$U_;"V;b1sP`r8![qo&%=A_;<`![GC]7l.k7N_:nb?`S8,^ptV@pn_UP-dbW(%
\_R/=jkJbI_V,"D^>$Z_nD'Mhq;/+-g>0X%_;+_=jkJ_IbM2aF^>.)kjkZNbqqeF3h;5g$a5-4?j4rSG
_:mr(h:oBnn_L/"gYU-1\D?-"[G:3)q:ji\_:n50e_@Ofq;%_"j5.]1^tm]"[G:K1n_;pS_;"Y<bM9V`
rnWjrn__1?_VWbu[GCc9l.k4M_:ne@`nS2^qV7OqnD:D+e(r+$]A3>>k1ehI_qP.E^tZi`o%]\iptht+
gYK[$_qan>k1ebHc.hpG^td8lkM;Zbr8+L3h;5a"akcC@jP8YG_qO,)h:oHpn(k,%f&"F'^"qT%\D6K+
q:jf[_qOD1e_@UhpYD\%hVQ!'`SK/%\D6c3n_;mR_qXh=bM9V`rnX(#lef>3aPPG'[GC`8l.k7M_qFh=
a4e2\rnF(#kM<#kh;#s(^YAV>kh=qI`7b4F^>$Z_oA#qnoA68!i8)-'`SC.AjkJVFcJ/'I^>.)kkM;]c
!8jI,j5.E)aPH=@j4rSF_V*r&i7bWombG;,bh]qfa5#M+\(gE+q:a]Y_qOG2eD%Lgpt_t+g"s9rb2(_+
\D6`2n_;jQ_qXk>b1sP`!8X:(jkmK'cJI"+\D@#:l.k4L_qFk>aP+8\rS+1(in^?biS;E-^>&J<l.Y"I
`S1@G^>$]`oA$+smbXPljk[]-`8(%@jkJSEceJ-I^>.,ll.r#hqqmn#kh`l,b2)OBj4rSF_:dl&hqGWq
m+f)*bh]qfa5#J*\_HT,q:aZX_qOJ3e_@Xip>)e*f\X-pbMCb*\_Ql4n_;gP_qXn?bM9V`T&/Sd[GT9d
d,)=hqqUGkiRl!"qV'$E]A*A?UYOkbU>=e`_q`&^qV15fh:]g%rn>3C`SC.AU##.nT&/Sb^"p]`o\AT`
gY1$/o\74;ce[mBTAKJ&Rc!Ad\),?bmbQsZiRl!"inE>E]%cN*]A1K`\D>?`g>'9onCm]lh:]^"m+^+G
\_Ql6YMI^b[,0-beD7^kp=o,lgtK[#p"[dH\_[;BUYaqdYi!pdcec4gr7pPliRl$#q:`sE]%a(:hVFdZ
jkR]-_V=n@l.Y"I`S1@G_:uo`p=uJ"lJ@udl.ru-aP?CBkM+eGceJ-I_;*>lm+nDmp>;1nmG>;.c/%dC
jkSkJ_:df$iS(ltl.j&/`8.fVceR1.]%cf0q:a]Y_qOG2fA!mloA-b/d,)"`e(rL/\_Qu7n_;jQ_qXk>
c.ondrSFI/gu#3jfA=d/\_[8?l.k4L_V+e>aP+8\!8FO/g>/4Rl.j/2_;"h@kh=nH`S1=F_:urap=uV&
k2)E\mG5G2a5$=Bk1e_GcJ/!G_;*AmleSJqo&#Vfn_U_2c/%gDjP8_H_:di%i7bftl.j/2_;2?Oe(iX3
]%cc/q:a`Z_:n81f%[gloA-n3bhfGXfA4p3]%m&7n_;mR_;"\=bhTecrna^4f\`XbgYU64\_[5>l.k1K
`7at?akFA]!8O[2fA2eLm+fD3_qY"Al.XtH`nLIH_:uo`pY;h*infjTn_Le4akZLCkM+bFd+e6J_;*>l
mG4bumba&^p"m+5cJ@mDjkSeH_qF#&inCuukhO25^"ogHf%em4]A)o1q:a]Y_qOG2f\=!mo%gn5akiuQ
gYL<6]%m)8n_;jQ_qXk>cJ6"er8+X6eDI(ZhqlT6]&!A@l.k.J`7b"@aP+8\XPDF`Qeh#`_;)o^qV15f
gtBa%rn>3C`SC4CX52dlP2>`b]A:Q`o\AT`g=js/o\74;ce[sDWo!1$No0Nd[GK3bmbQsZhUod"inEAF
]A)Q)`n\8`XkhR`f\F*nn_3fmh:]^"m+^.H]%lo5]%tKbW8?:bdbVOjpY55mgY0R"p>!pJ]&!>AYMRdd
Uu1(dc/-%frS6Ymhq5j"qV''F]A!>@YM@X`PMP``^YHc^q:k/fh:]g%s4Y<D`8(.CXkhmkO5BNb]%tK`
oA&N`gY1$/p"R=<cJ@pEXPW7"MVn6d[,0-bmG6mZh:T[!j4`GF^"_`*akXJ`Wnl@`fA+'onCm]lgY'O!
mG$4H^"i/6^>6cbV;C(bdG;Lkp=o,lgY'O!p"RdH^"iG>[b]3bS_iMbakaYcrnH\lhUoa!qqB-F^>&YB
ZJ<j`OPTN`^>-]^qV15fgtBa%rn>3C`SC=FY2.miMr+6b\D>?`oA&N`gtC$-p=d@;c.qmFY2/0qKAHUa
Yhdd`leL[XhUod"inEAF^>%c)bhT\`Vqp.`e_Imnn_3fmgtBX"m+^.H^>/25_;2ubU>FkbceZ=jpY55m
gtBX"o\7^H^>/J=\_YEbRbm;ba5+Jbs4cemhUod"qV''F^>&VA[G9'`NSX<`]\LQ^q:k/fhUog#!856C
_V>%DZ/!pdL#)a`[+s!^n_<<^gtC$-p=dC<bhVgFYhe9pK&6OaZ/*pblJ1UXh:Ta#iS*;F]\DT(cePn`
Utsq`f%dpmo%Nonh:Ta#l.XkF]\Dl0a5">`SDEA`cJ6(eqV(JngY'U#o@qXH]\N;<]\UWbQeq)baPFMa
!8Hbmh:Ta#q:a!F^"`M@\D59`Mr"0`^"gW^pY5#fh:Ta#_V2i\rS+^7e(oZ4!8P!;cJ.gBle:+Hd+\6J
_V<8hoA$\.hVNk@rSFm:eD0<Dl.b+I`n92%jk7<#j4i)<YM>c*jP/,;^"W/4q:XTV`nBV1gY0<pmG,h=
]%re1lJ0V=^"`G<n_2dO`nL"<dG)=hpYEU?`86a8n(l%?]\Mc+hUfd"pt<jD^Y8P=]A(E^Ltqm^]%b?\
pY+rdgt9[#!856C_V>(EZeX$cKA?O_[+s!^nD!6^g=am-p=dC<bhVjGZJFBoK&6I_ZJF'dlJ1UXhUfd"
i7[2E^Y7Z$eD%1^TA8M^dG)Fio\'&ngt9X"lIstG^YA)0akXJ`Rbd5`bM9keqV(Jng=aL"o\7aI^YJM<
^>6cbPhtlb`SJ;a!8Hbmh:K[!q:X!F^"WA<^"^Q^L>;a^]%b?\p=eldgXsU#s4P?E_;"qC[bT9dK&-I_
[bT3`n([0^g"Fg-p"I@=bM;^E[b]]pK&6@\[b]Hgl.kOXh:K[!iS!>G^"VK#f%[=^SD<;^dbDIhp"B/o
gXsO!le:+I^"_o/bhT\`Qeh#`bhTndqqCSog"FC!p"RmK^"i>;_;2ubP2>`b`ne>`l.b%G`n:+?c.Thb
q:i^>_q]n"!8G'=b1cOBmFg7HaOpRH`7i#]s4b$<cJ=*.rS=s<d+e$Dle:(GdG"<J`7rGip"["3g"q>;
ptiI8f%fKElJ(.H`Rs2'jOq<%iS3&?Wna&ul.aS>^tSG6q:XQU`7aM2g=j<rleKe@[G@,(mbGt?^t\_>
n_2^M`7jq>d+c=jp"dOA^tt./o\ILB^YAhDl.b(H`7Xq>bh9ecptN[?_;'Xt!8P->bM)[Dm+L1Ha4^IF
`S//_!8G$=bh[m,qq\d;dG+-Ele:(GdG"9I`7rJjp>!16f%u#8p"m47fA,WGl.b(H`Rs/&jk7H'hqQo?
W8*cqleBb?^tSJ7q:XQU`S'S2gY0Htl.jY@Ze^f#n_D7A^t\b?n_2^M`S1">dG)IloA.FB^#"b*p>*XB
^te2/hUfa!q:X$G^tSP;`7r&^K&$@\\_GB_p"Jfdh:Ta#s4PBF^tZETb2%[*pt`O:dbF6Fle:+Hd+\0H
`S8PjpY<=8eD>f6oA7%6f\G]GlJ(4J`7X&%k1RQ(hV6l@VVIKmmG#q@^tSM8q:XTV`S'P1gtKQukhOYB
YhbDsoA%FB^t\e@n_2aN`S0t=dbDRmo%hCC]AAJ&pt`gC_;#%GlJ(.Ha4U1?cIotdpY3X@^YFFrrnP*>
bhD^Cmb-@IaOpRH`S/)]!8G*?b2%[*q;&U:dbF3Em+U1HdG"<J`S8Mip>!78eD>f6oA7%6f\G]GlJ(.H
a4T>'k1RN'hqQuAVVIKmmG#tA^=r>7q:XQU`nBY2h:fTtl.j_BZ/(Puo%_@B^>&V?n_2^M`nL(>e(_Ul
oA.LD]AAJ&pt`jD^tetFleC:J`n:(>ce6(ep=mUA^"e4pr7np=c._dCn(HLKa4\Gc^Y8bD]A1K`K&-1W
]%kchmG%$^g=am-pY*U@aP?RG]%tfkK&6%S]%u&pkM5CXgt0U!iS!>G_:mc#hqOs^Phb`^c.g(gp=]8p
g=XI!le:.J^t\).eD.7`O59H`a5"Mcr7^\pg"FC!p"RpL^teM:b2'VbM;J*b_VN&`!8Qkogt0U!q:X'H
_:nS:aP4>^K&$4X]\C`co\/`dgXsU#s4PEG_;#"F^"gW`K&-+U]A1ojmb@*^g"Fg-p=dL?akZ^I]A:ij
K&5tQ]A;2rkhPIXh:K^"i7[8G_:m`"iS1*^P2,T^bhL"gp=]8pgXsR"lIt%I_;"/.f%dC`NSX<``n\Db
rS$eqg"FF"o\7gK_;+S:bh]bbLYhsb^tlo`s4lqph:K^"pt=!H_:nP9b1jJ^K&$.V^"^leo@iZdgXsU#
!85BG_;"tE^YHc`K&-%S]\M&lmG%$^gXsm+pt<[@`nUFG]\L`eK&,bK]\M>tjkK1Vh:K^"i7[;H_V3c!
j4g6^OPKH^bM0nfpY#Aqgt9X"lIt(J_V=2-f\EO`Mr"0``SA>brS$eqgt9X"o%MXJ_V=J5d+kt`KA?O_
^"gW^rS-_nhUfg#pY!mG_V4V9bM0P^K&$(T^>%#go%NTdhUfg#s4PHG_V4nA_qVu^K&#eL^>%;olIta\
gt9s+q:WdA`S:@G^"gcdK&,\I^"hK!jP0+VJ,~>

%%EndBinary
grestore % PSGState
newpath % image
236.035 459.013 mo
288.243 331.362 li
289.935 327.033 290.421 325.836 296.46 325.836 cv
302.256 325.836 302.742 327.033 304.434 331.362 cv
314.052 354.948 li
314.945 359.443 315.405 364.027 315.405 368.685 cv
315.405 383.08 311.007 396.788 303.064 409.238 cv
285.822 366.678 li
257.544 435.879 li
278.312 435.879 li
273.605 439.556 268.517 443.01 263.091 446.211 cv
253.44 446.211 li
250.746 452.78 li
246.033 455.035 241.122 457.118 236.035 459.013 cv
gsave % PSGState
clp
[1 0 0 -1 0 576.004 ] concat
/0 /CSA get_res setcolorspace
[81.12 0 0 134.88 235.2 116.164 ] concat
snap_to_device
Adobe_AGM_Image/AGMIMG_filter currentfile /ASCII85Decode filter /RunLengthDecode filter ddf
<<
/ImageType 1
/Width 169 
/Height 281 
/ImageMatrix[169 0 0 -281 0 281 ]
/MultipleDataSources true
/BitsPerComponent 8 
/Decode[0 1 0 1 0 1 ]
/DataSource [
[AGMIMG_filter 169 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 169 string /readstring cvx /pop cvx] cvx
[AGMIMG_filter 169 string /readstring cvx /pop cvx] cvx
]
/NComponents 3 
/HostSepColorImage false 
/SkipImageProc {false}
/Operator /image
>>
%%BeginBinary: 3
img
U[-k'fBTI'q!5BRf'MhkQ0Y11iTf(\X6]NG\E_W2m-L))T^1Y'g$5U'p$96TeEm%uM<h8/fBV)TWU$eR
e*QkrMsIG0f]q5VW9XHLZKfm)p?[e)]BdQ'h!2?6o'3OGeEm2#K'Tu5b3IgJZg78KZg,s)!:,7&\Eh?'
hWhB3p$/pLcg1YuMsIS4eEYZNYNu2QXm4L(p?[e)Xm=R'f]oR(!:$`Pea2qpOmE&4SEf;%g$-!3o]iXF
g[+e&L$Sa'S*K5%g?H$2p$/dHe*H&[T^%s1lKR'fZg7>MZ0Kd'ip3<'W9W.%h!)Q=lKY\?dHg5dQ0P:4
h!*YZ]BehKZg,p'm-C#'VX!"%hW_T:mHV(Dcg0o_T^&NAg?I5Ram8$QXm4L'o]qS'W9W.%f]gHBjm'#6
ea)hmOQrb/h!*MV`9ZUOYNjX'n`uA'ZKfj%g?HuMg?Pp-e*I#!L$Gr.dcoNNcKj6MZ0Kd'rTf4'Yj0^%
h!*#Jh<M<2dHg\qM!D2/eEPfRWTsKIZg#j&q<Nq'^Zrc%hW_Q8mch+Cea*+tMX%V7cKWsF[HdPOXm+F&
rTf4'[-H!%f]fa-q<>'Hea*+uM!D>3d-96JZ0M2MYNaR&q<Nq'^Zrc%g?H98mcgt?hWsn#K'LPE\EVc4
a6M[KZ0C$/q!*Iram-J%h!)cBjQWu7f^&D!K'LGB]BS/9_Wp7IZg$',qs&du`p18%hW_f?kNTA<j6Q*t
MX%#%hrr\U^$>+OXm+d0pZdCr!9p]OeEGQKc0F3NY3Fd.q<EXus66]Ne`b]MbNe$MYNaR%q!*e%Xm+F#
g??WCip!]3e*?YlNTmt;bNR^EeEYTKZ0Bd's65."\*;-#h!!/NfBKU*dHZ>J[HZ!#h<<2Mf]fa,d-:Vr
KB]c-cfj6Lbj*pH[->p%rp#L-X6J:#fBCBBj6<]1f';qnNp41?aQV:?f':iNY3FO&!9o+"\`q9#g$$oM
f]fU(eER&!KB]o1bNR[Dd-B?LYj'X%rp#4%`9G&#gZZH;l0,D9dd$erL?ZS>_<B\<^$4kHZKT^$qs'"%
_<Ji#h<;K8m-(e>d-CGlMWqq@_s#t@\`rMF[-63.pZ[S"`9G&#fBC0;l0,85fBNA#K'C/:_<BP8_<L:L
Y3=F$!:#4$_<Ji#g$$38m-(Y:iTg("K'C)8_s#h<^$4qJYiss/p?@1nd-7n#gZZlGh<;--gZnRuL["a#
Z09X!guliEhWV9/f]r=tM!=g#YisR!h<2iCi97N2ea!(sM<Xm#YNXL!hWMlBiTRZ4ip,srMWqG1dHB-E
_WgCMXm"@#mHKr#Z09X!f]U'7m-(V9e`lGbQft[;e*#EIbN[sKYNXL#q!!_#^Z`W!g?6TBiTRN0e*6Vk
N9J">`TQ"=`p)OIZ09X#p$%M#]]dE!gulW?jQNo5dHU;fO6F4>aQMCB_Wg1GZfod#oBDA#]'.9!hWN/J
g$#g,cftJoN9IP1dc]6Fb3@sMXm"@#p$%M#YisR!f]U??jQNc1e`l_jO6F4>aQM7>\`iVIYNOR&rTJjs
]'.9!g?5s/oB3@@e`m+tK'9c/b3.OB[HR8GZ00U#!9f$u\EM-!gul$-p#iXDdHLYqKBU5:^usP:^$+bE
Zff^"s654#_<Ac!hWMK6m,tb=cftDmNp+":bNIL?\ENVKXln=#!9f$u\*2'!f]T^,p?/UAe`d(uKBUA>
]][u2`TZIIYNOF"s65=&ro^<Eg#h#N_W^4HYijj,pZR@qrTC0Cg?./P_!(%GZ00m+pumLsr9($AgZI;R
^?FkFZKKm)qWNb!qrap@gZI>S]]e\EZffp(qrin#qWG0IdH9<J]'/MD[-,d!m-())WTW!tfB1$8l0#23
f')SdPio".gZI/N_W^:JY34@!mc]r![cbotg#g*6lfYJ7eEH;`QKP[=cK<jCb37dHYijL!pumY![-,ct
gZHT@iTIK/dcgGhN9@P1d,s-G`TZ@FZKKX!p#qG!ZKKWth<)W=jQEl4d-1,cO6<e2dcTEK_<C"D[-,d!
oB;S)[-,ctfB0I'q<"gAf')D_RHLp>d,s!CZKM)HY3+9ul0+T!ZKKWtg#fO%qrY*EeEHPgO6<e2dcT9G
Y35`FYiaEuoB;;!YijKtgZGU#rT:BIdcg8cOlrq2eE5QKWosBDZKBQun`Z/!YNOEth<(^"roUQLd-0u_
PNTI=bN@[DZ01fB[-#]un*$;)V<6XrfB'7"rT:6Ef')ejO66N*UupRrf]B:!roUBGe`cYhOluc,UupRr
g#]^+o]E@>eEHMfPNVr-UZULrg?#a*p#`L@e*-AdQ08,.U?:FrgZ>d)p?&XBdcg5bQfn;/U?:FrguYg(
pZAdDdHBKOU?803ioT"XYNP]CZf]Wti9-ltWoi!rhW:p'pu\sGcfa6LX6-/=iT8\Q]'&\IXle3tjl`5t
U#t@rf]BX+o]E==e`Z#VTB;j0ioSkT\**DGYNF?tjQE/tT]Y:rg?#a*p#`L@e*#cST]W69g?%)NZfh&E
Z0'Ktiod#tWTMprguYg(pZAdDdHBKOU?8E:gZ@8QVWRj>\)l!"i9-ltVrldrhW:Trr8tQOcfaTVU#r!0
jQ5"TXQK0;]&hN+iTHrtT'#.rf]B0roB*^Ie`YoSU?8N=f]CfJWoa<DYiXBti9-ltWoi!rg?#<rs5pWK
e*#WOUunZ=g?%)NW94*A[,oa!l0"]$r8jI1kN(FZVrn!@[H5g!ki\Z%qrO@0kN(I[VWRj>\)l!"kNAW&
qW44.kiCU]V<7a=\E2'"kNAZ'PND;pfAs$qo]EaHf&toQVWIm?P3)5pf]9*qrT:EIe`YcOW94-AP3)5p
g#T0qrT:HJeE>ZNWTO3AT&o(pg>o6qr8tEKe*$#ZS`]n4S`T"pgZ5<qr8tHLdcT!?Z/qP<k2b=YVrmm=
\E2-#dH7arSE8qph;kHqqW>BNd,r^;ZfR_=kN(L\V<7X:]B.B$d,qt%PND;pfAs$qqrY6Hf&kBBZK7V<
kN(:VX609@[H5s$d,q[rSE8qpg#T0qqW>6JeE5-?ZfR\<kiCIYWTEX2_;s)-cfVUrS)rkpgZ5<pnE%OJ
dcT<HW9'K0l/^X\VrdC/`8o>.gZGHrRcWeph;kHpn)_OLd,s'EWTBT1l/^^^V<.1-`oPJ.g?,[%RcWep
fAs$pn)_=Ff&kBBZK7P:l/^LXX6&g3^uX&.dH7arRH<_pg#T0pmcD=HeE5-?[cRMLOQ?#ng>f0omcD@I
e)o?GY3#WCOQ?#ngZ,6omcDCJdcT6FYN>]COQ?#nguG<oq;o3KdH9*DZ/tlDO6#rnh;bBoq;o6Ld,s!C
ZK:rDO6#rnhW(HopuT3McfWjA[,m)(r8ZDhXQAs5^?!l-cfVXs!9Aprr8ZGiX6&g3^uX&.cK;Uts5]7%
o]+WbWo`^2_;s,.cK;XuroB.$o]+ZcWTEU1_W92-`T=hpNo]lngZ,6on)_IJdcJI0^>t=8p#FifVrd[7
]]@K%c/lCpNo]lnh;bBop>s$Ld,iL5\)`S1p#FohV<.F4^Z<`&biQV#L#i6nfAisomcD7Ff&aj3^Z:L;
oAeK`X6&d2_;s/.`9"bpOQ?#ng#K*njlFVFeE+U0^uUU<oAeQbWT<1%bi@16_r\\pO6#rngZ,6njQ+VH
dcJ[6\E&_3o]+`eVrZq"cf<F7bN67pO6#rnh;bBnjQ+\Jd,iI4\E&_3o]+fgV<$^udGrR7b2pJ#K&cag
h;YNsguQoDf&ad1_W1^WK&caghVtTsjQ+MEe`F[0_rUjXK&caghr:Zsj5eJFeE+R/`8ppXL?&6lg>]*m
j5eMGe)eF-`oR*YL?&6lgZ#0mj5ePHdcJ=,a5m0YL?&6lgu>6mj5eSIdH/U6^#](NL?&6lh;Y<mj5eVJ
d,iL5^?#.NL?&6lhVtBmlf?4KcfN@3^uU+-rSuYlXQ8C%bi@:9_r\_q!98[krSu\mX5r:$c/[@8\E(in
L#`0lg#B$mioJDFeE".#bN"<:ro2YkWT<("cf<L8\E(inL#`0lgZ#0mioJJHdc@q!bN"<:ro2_mVrZju
dGrX8\E(inL#`0lh;Y<mioJPJd,_^tbN"<:ro2eoV;p:igZ$Q?_W8i!K&cdhgu>Eqdc9-Bf&XF'alA!5
r8ZVmX5hXgh;ZuG]&^unK&cdhhVtQqdc93DeE"4%alA'7s5MblWT2[lf](B@\`ConK]E*lgZ#0lg#LcF
dc@t"cf=r_K&Z^fiSg]pg#LfGdH%k!d,Y#_K&Z^fio-cpg#LiHd,_audGt)_K&Z^fj5Hipg#LlIcfDXt
dc5r=o]"rjXQ.^gh;[#H\`Cro!9/Uio]"ukX5hUfhW!)H\`Cups5JXio]##lWoMLehr</H\`D#qro/Oh
o]#&mWT2Cdi8W5H\E(urrSiFgo]#)nW8lXmfAb6>\E)#sr8N=fqr6VoVrQOlf](<>\E)&tqr34eqr6Yp
VW6Fkg#CB>\E))uqVm+dqr6\qV;p=jg>^H>\E)-!K&ZF^jPd3#e)T3Bf&Naig>[_Do]"ukX5h[hgu?lE
WT2^lK&ZF^k2E?#e)T9DeDmOgg>[_Do]#&mWT2IfhW!#EWT2^lK&ZF^ki&K#e)T?Fdc7=eg>[_Do]#,o
VrGkYl/C%MYiF3lK&ZagiSgZne)K?Fd,VCkdc,l<rSlhqV;ft`io/5DZ/aQtK&ZL`io-uubi7X@f&Nai
g>[_Dp>Y,kX5_@_j5JPKWT2^lK&ZL`jPd,ubi7^BeDmOgh;\FmK&Q+Umbk)(bi7aCe)RFfhW"LmK&Q+U
n)1/(bi7dDdc7=ehr=RmK&Q+UnDL5(bi7gEdGq4di8XXmK&Q+Un_g;(bi7jFd,V@jg>_tfK&Q+Uo&-A(
bi7mGcf;7igZ!hDn)<NhXQ%F_j5JSLW8l[m!9&Ogn)<QiX5_@_j5JPKWT2dns5ARgn)<TjWoD7^jPeVK
WT2goro&Ifn)<WkWT).]jl+\KWT2jprS`@en)<ZlW8c%\k2FbKWT2mqr8E7dnDWcmVrGq[kMahKWT2pr
qr*.cnDWfnVW,hZki'nJU>k.jK&Q4Xn)1&%c/RsGcf1_Zki%-Pki)$hXQ%4Yl/C4QS)WYjK&PqPn_gJ-
bi7[Ae`*=_iSfCIl/D0jWoD7^jPeVJU>k.jK&Q1Wm,4l%`Sp1Ae)I+]iSfCInDW`lW8YbTm,6=OU>k.j
K&Q4XmGOo$`o6=CdGgn[iSfCInDWfnVW#PRmblIOUZ14jK&Q4Xn)1&$`o6CEcf1_Zki%-Oio'OfXPpqQ
n)2dVS)W\k!8rIeio'RgX5UhPnDMjVS)W_ls58Lej5B[hWo:_On_hpVUuLCmrnrCdj5B^iWStVNo&/!V
V;gLnrSW:cj5BajW8YbTm,6=OV;gOor8<1bjP]jkVr>YSmGQCOV;gRpqr!(alJV<lVW#SSmGQ@NV;gUq
qVZt`leqEmV;]JRmblFNVW-^rK&G\Ip"uk0^Z"Y>f&E:\k2?<uK&G\Ip>;q0^Z"\?e`*1[kMcI!K&G\I
pYW"0^u=e@eDd(Zki)O!K&G_JpYVt/^u=hAe)I"Zki)KuK&G_Jptr%/^u=kBdc-nYl/DQuK&G_Jq;8+/
_;XtCdG^GNm,3KRjl#slVW#AMoAJ!SQf7;hK&GbKqVS.._;Y%Ecf(5Lo\b>ZjP][fXPq%Tm,6IRR,RAh
K&G_Jp"uh.]&<8=e_unSlemBQjP]ahWo1JHp>=BYRGmGhK&GbKp>;k-]AWD?e)?_RlJR9Pjl#mjW8P;G
pYXEXRGmGhK&GbKptr"-]AWJAdG^PQn)4*#K&>MDrnaO1]\rSBd,CGPnDO0#K&>MDs5'U1]\rVCcf(>O
n_f#Vf\Z\cXPgMEq;9c^PMu&i!8iCcg"uedX5LDDqVTi^PMu)js5/Fcg#&gf[G^r>eDZkTm,7m#K&>;>
WSk5Cqqol]Rc3YlrSN4agY\sf[c%)@dc$YRmbn$#K&>A@Vr5#ArSQ#]S)Nenqqm"_iSXUjVVo5Ip#"-T
S)NhoqVQn^iSXXkV;T,Hp>=3TS)NkpK&>;>rnaa7\D[)<f&;kPnDF<(K&>;>s5'g7\D[,=e_ubOn_jH)
K&>>?s5'd6\`!5>eDZ\On_jE(K&>>?!8a^5\`!8?e)6;Fo\Y8XgY\sf\`!;@dbp2Eo\Y8Xgu#$f]&<DA
dGU,EoA>/Wh;>*f]&<GBd,:#DoA>/WK&<rmcesrDqVQn^K&<]ff&2VIo\Y8XK&<`ge_lPIoA>/WhV\7f
Wo(2@r8,r]OPoiirn`7`g>8gd[GUo=e)6>GpYYr+K&58=W8G#?rSGu\Ol5ukr8*%^gtnsd[GUu?dGU/F
pttu*K&5>?VVei>rnc#[P2Q,mqVHh\hVP*d[bq,AcesuEq;6e\fA<UdYM]B:f&2JEq;22/K&5/:X5C,<
!8c8aMr=Hhs5&@ag"radYhoH;eDQ;DqVV;/K&55<WSar;e)62CqqqA/K&58=W8Fl;dbp,Cqqq>.K&5;>
Vr+f;dGU#Br87D.K&5>?VVe`;d,9rBr87A-K&5A@V;Jf?rSGlYPi2;nK&5,9XP^;?rSH,`NSsQgJ,~>

%%EndBinary
grestore % PSGState
newpath % image
grestore % PSGState
612 576.004 mo
612 185.864 li
594.969 197.725 li
594.969 576.004 li
612 576.004 li
cp
level3{
gsave
clp
[17.0313 1.48892e-6 -1.48892e-6 17.0313 594.97 380.934 ] concat
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.917647 .92549 .92549 ]
/C1 [.917647 .92549 .92549 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.917647 .92549 .92549 ]
/C1 [.647059 .654902 .662745 ]
/N 1 
>>
]
/Bounds [.00561798 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[17.0313 1.48892e-6 -1.48892e-6 17.0313 594.97 380.934 ] concat
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~lK[Wul07Eqki_-lkN:phk2k^djQ,C_j5]1[io8tViSibRi8EPNhr!>JhVR)Eh;-lAgt^Z=gY1B8g=b04
g"=s0f@SX+f%/F'e^`4"eC<!se'ldodaHOjdF$=fd*U+bcd0n^cHXVYc-4DUbfe2Qb0%lLaiVZHaN2HC
a2c6?`l?$;`Pod6`5KR2_o'@._SX.*_8*k%^q[Y!^V7Fr]tM+m]Y(ni]=Y\d]"5J`\[f8\\@B#W\$rfS
[^NTO[C!<J['R*FZa-mBZE^[>Yct@9YHP.5Y-+q0Xf\_,XK8M(X/i8#WiE%tWMuhpW2HPkVl$>gVPU,c
~>
<~m-O'(lg*j$lKRQtl0.?pki_-lk2tggjlPUcjQ,C^j5]1Zio8tViSibRi8EMMhr!;IhVR)Eh;$f@gtUT<
gY1B8g"G'3f\"j/f@SX*f%/F&e^`4"eC;sre'landaHOjdF$=fd*L%acd'h]cHXVYbfn;TbKJ)Pb0%lK
aiVZGaN2HCa2c3>`l?!:`Pod6`5KR2_ns:-_SO()_8*k%^V@Ou^:q=q]tM+l]Y(nh]=Y\d]"5G_\[f5[
\@B#W\$i`R[^ENN[C!<J['R*FZEgdAZ*CR=Yct@8YHP.4Y-+q0Xf\\+XK8J'X/i8#Wi;tsWMlboW2HPk
~>
<~m-O'(lg*j$lK[Wul0.?pki_-lkN:phk2k^djlGL`j5]1[io8tWiSibSi8EPOhr!>JhVR,Fh;-oBgt^]>
gY:K:g=k65g"G$1f\"g-f@SU)f%/C%e^W*ueC2mqe'c[mda?IidEp7ecd0q`cHa_\c-=MXbfn;TbKJ)O
b0%lKaiVZGaN2HCa2c6?`l?!:`Pod6`5KR2_o'@._SX.*_8*k%^q[Y!^V7Fr^:h4n]tD"j]=Y\e]"5Ja
\[f8]\@B&Y\$riT[^NWP[C*EL['[3HZa7!DZEga?Z*CO;Yct=7YHP+3Y-+n/XfSV*XK/D&X/`2"Wi;ts
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
newpath
603.755 576.004 mo
603.755 191.627 li
603.427 191.627 li
603.427 576.004 li
1 1 1 rgb
f
603.383 576.004 mo
603.383 192 li
603.055 192 li
603.055 576.004 li
.529412 .533333 .537255 rgb
f
594.969 .00390625 mo
594.969 137.926 li
612 127.352 li
612 .00390625 li
594.969 .00390625 li
cp
level3{
gsave
clp
[17.0313 0 0 17.0313 594.969 68.9648 ] concat
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.811765 .537255 .556863 ]
/C1 [.619608 .0784314 .109804 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[17.0313 0 0 17.0313 594.969 68.9648 ] concat
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~cd'h]cHa\Zc-=MWbfn;TbKJ)PbK@uMb0%lKaiVZHaN2HDaN)?Aa2c3>`l?$<`Pog8`Pf^5`5KR2_o'C/
_SX1,_83t(_83q&^qdb#^V@Ou^:q=q^:h4n]tM+l]Y(ni]=Y\e]=PSb]"5G_\[f8\\@B&Y\@8rV\$rfS
[^NWP[C*EM['[3I['[0GZa7!DZEgdAZ*CR=Z*:I:Yct=7YHP.5Y-+q1Y-"h.Xf\\+XK8M(X/i;%X/`2"
WiE%tWMukqW2QYnVl-GjVl$>gVP^5eV5:#bUnjf^Una][USFQXU8"BVTqS0RTqJ'OTV.pLT:_aISt;OF
~>
<~M26tCLPCP;KnP,3K7ec-JUr?%It)orIXQWlI!^3dH?jd]G^+FVG'8"NFEDSFF)l;@EH#l8Df0H1D/F**
CMR["Bk_9pBP1siAn>OaA7K+Z@U`bS?sm>K?=$rD?!LW=>?Y35=]nj/='&F'<E3!t;c?Um;Gg:f:esk^
:/4MX9MA)P8kMZH8OuBB7n,s:779O26UO1,5s[b$5<h=q5!;%k4?GVc3]T2\3&iiU2E!EM1c.!E1GU^?
0eb:70.nk0/M/M).k<)!.4H\o-mpAh-7'r`,U4NY+sJ0R+<VaJ*Zc@C*?6%<)]BV4)&X8.(Ddi&'bqDs
~>
<~NfB$WN/NUOMM[1HLkphAL5(D9KnP,3K7\]+JUr?%It)orI=6NkI!^3dH?jd]G^+FVG'8"NF`__HF)l;@
EH,r:Df9N2D/F-+Chmg$C2%BrBP;$kAnGUcARo=]@q&nU@:<PO?XI,G?!U`@>[(E9>$5!2=BJX+<`W4#
<E)pr;c6Lj;,C(c:JX_\9he;T9M8#N8kDTF84Z6@7Rfg86psF16UF+*5sR\#5<h=q4Ztni4?GVc3]T2[
3&iiU2E!EM1c.$F1GU^?0eb:80/"q1/M/M)/1W5#.Ocep-n$Gj-71#b,U=W[,9e<T+WqmM+!2OF*??+>
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
newpath
603.918 132.293 mo
603.918 0 li
603.263 0 li
603.263 132.293 li
.809804 .539216 .554902 rgb
f
603.383 132.293 mo
603.383 0 li
603.055 0 li
603.055 132.293 li
.619608 .078431 .109804 rgb
f
601.884 94.0762 mo
601.884 93.125 li
604.435 92.3613 li
604.435 92.3477 li
601.884 91.6514 li
601.884 90.6064 li
604.435 89.8555 li
604.435 89.8418 li
601.884 89.125 li
601.884 88.2676 li
605.333 89.3262 li
605.333 90.3848 li
602.7 91.1357 li
602.7 91.1484 li
605.333 91.8857 li
605.333 92.9111 li
601.884 94.0762 li
cp
1 1 1 rgb
f
601.884 87.9668 mo
601.884 87.0146 li
604.435 86.251 li
604.435 86.2373 li
601.884 85.541 li
601.884 84.4961 li
604.435 83.7451 li
604.435 83.7324 li
601.884 83.0146 li
601.884 82.1572 li
605.333 83.2158 li
605.333 84.2744 li
602.7 85.0254 li
602.7 85.0381 li
605.333 85.7754 li
605.333 86.8008 li
601.884 87.9668 li
cp
f
601.884 81.8555 mo
601.884 80.9043 li
604.435 80.1406 li
604.435 80.127 li
601.884 79.4307 li
601.884 78.3857 li
604.435 77.6348 li
604.435 77.6211 li
601.884 76.9043 li
601.884 76.0469 li
605.333 77.1055 li
605.333 78.1641 li
602.7 78.915 li
602.7 78.9277 li
605.333 79.665 li
605.333 80.6904 li
601.884 81.8555 li
cp
f
604.396 75.7275 mo
604.396 74.79 li
605.333 74.79 li
605.333 75.7275 li
604.396 75.7275 li
cp
f
601.595 71.7734 mo
601.595 71.7871 li
603.524 72.4629 li
603.524 71.0967 li
601.595 71.7734 li
cp
600.657 72.2891 mo
600.657 71.2305 li
605.333 69.3945 li
605.333 70.4336 li
604.263 70.835 li
604.263 72.7314 li
605.333 73.1396 li
605.333 74.1113 li
600.657 72.2891 li
cp
f
602.625 66.4805 mo
602.584 66.5693 602.553 66.6611 602.531 66.7549 cv
602.508 66.8486 602.497 66.96 602.497 67.0898 cv
602.497 67.3672 602.598 67.5879 602.799 67.7529 cv
603 67.918 603.265 68.001 603.592 68.001 cv
603.928 68.001 604.199 67.9219 604.408 67.7627 cv
604.615 67.6045 604.72 67.373 604.72 67.0693 cv
604.72 66.9531 604.703 66.833 604.67 66.708 cv
604.637 66.583 604.6 66.4736 604.559 66.3799 cv
605.301 66.3398 li
605.342 66.4688 605.371 66.6045 605.389 66.7451 cv
605.406 66.8857 605.415 67.0498 605.415 67.2373 cv
605.415 67.7861 605.248 68.207 604.912 68.5 cv
604.577 68.792 604.137 68.9385 603.592 68.9385 cv
603.342 68.9385 603.107 68.9014 602.888 68.8281 cv
602.669 68.7539 602.479 68.6465 602.318 68.5029 cv
602.157 68.3604 602.031 68.1855 601.939 67.9775 cv
601.848 67.7695 601.802 67.5342 601.802 67.2705 cv
601.802 67.0967 601.811 66.9395 601.828 66.7988 cv
601.846 66.6572 601.875 66.5244 601.915 66.3994 cv
602.625 66.4805 li
cp
f
601.884 65.5713 mo
601.884 64.7734 li
602.665 64.7734 li
602.665 64.7598 li
602.58 64.751 602.488 64.7207 602.387 64.6699 cv
602.287 64.6182 602.191 64.5498 602.104 64.4648 cv
602.014 64.3799 601.941 64.2822 601.885 64.1699 cv
601.83 64.0586 601.802 63.9404 601.802 63.8154 cv
601.802 63.6943 601.811 63.6035 601.828 63.541 cv
602.731 63.541 li
602.68 63.708 li
602.661 63.9424 li
602.661 64.1123 602.708 64.248 602.802 64.3516 cv
602.896 64.4541 603.014 64.5273 603.156 64.5723 cv
603.299 64.6172 603.441 64.6445 603.582 64.6563 cv
603.723 64.667 603.885 64.6729 604.067 64.6729 cv
605.333 64.6729 li
605.333 65.5713 li
601.884 65.5713 li
cp
f
603.965 62.1924 mo
604.105 62.165 604.232 62.1182 604.348 62.0518 cv
604.461 61.9844 604.552 61.8945 604.619 61.7803 cv
604.686 61.667 604.72 61.5293 604.72 61.3682 cv
604.72 61.2031 604.686 61.0635 604.619 60.9502 cv
604.552 60.8359 604.461 60.7471 604.348 60.6826 cv
604.232 60.6172 604.106 60.5703 603.968 60.542 cv
603.829 60.5127 603.682 60.498 603.524 60.498 cv
603.238 60.498 602.995 60.5732 602.796 60.7227 cv
602.597 60.8721 602.497 61.0869 602.497 61.3682 cv
602.497 61.6406 602.598 61.8525 602.799 62.0049 cv
603.001 62.1563 603.242 62.2324 603.524 62.2324 cv
603.677 62.2324 603.823 62.2188 603.965 62.1924 cv
cp
602.875 63.0361 mo
602.646 62.9463 602.452 62.8193 602.291 62.6543 cv
602.131 62.4893 602.008 62.2969 601.926 62.0781 cv
601.844 61.8594 601.802 61.623 601.802 61.3682 cv
601.802 61.1143 601.844 60.876 601.926 60.6553 cv
602.008 60.4346 602.131 60.2412 602.291 60.0762 cv
602.452 59.9111 602.646 59.7842 602.871 59.6943 cv
603.097 59.6055 603.35 59.5605 603.632 59.5605 cv
603.883 59.5605 604.115 59.6006 604.332 59.6807 cv
604.549 59.7617 604.738 59.8799 604.898 60.0361 cv
605.06 60.1924 605.186 60.3828 605.277 60.6084 cv
605.369 60.834 605.415 61.0869 605.415 61.3682 cv
605.415 61.6455 605.369 61.8965 605.277 62.1221 cv
605.186 62.3477 605.06 62.5371 604.898 62.6914 cv
604.738 62.8457 604.549 62.9639 604.332 63.0459 cv
604.115 63.1289 603.883 63.1699 603.632 63.1699 cv
603.355 63.1699 603.102 63.125 602.875 63.0361 cv
cp
f
601.396 57.7705 mo
601.396 59.1104 li
600.657 59.1104 li
600.657 55.4932 li
601.396 55.4932 li
601.396 56.833 li
605.333 56.833 li
605.333 57.7705 li
601.396 57.7705 li
cp
f
603.271 53.4033 mo
603.029 53.417 602.833 53.4824 602.684 53.6006 cv
602.533 53.7188 602.458 53.8955 602.458 54.1318 cv
602.458 54.3721 602.531 54.5596 602.68 54.6934 cv
602.827 54.8262 603.024 54.9043 603.271 54.9268 cv
603.271 53.4033 li
cp
605.141 52.7959 mo
605.324 53.127 605.415 53.5225 605.415 53.9824 cv
605.415 54.5488 605.259 54.9922 604.945 55.3096 cv
604.633 55.627 604.193 55.7861 603.625 55.7861 cv
603.098 55.7861 602.662 55.6475 602.318 55.3711 cv
601.974 55.0938 601.802 54.6992 601.802 54.1855 cv
601.802 53.873 601.852 53.6104 601.953 53.3984 cv
602.053 53.1855 602.196 53.0176 602.382 52.8926 cv
602.567 52.7676 602.785 52.6777 603.035 52.624 cv
603.286 52.5703 603.57 52.5439 603.888 52.5439 cv
603.888 54.9268 li
604.16 54.9092 604.373 54.8105 604.527 54.6318 cv
604.682 54.4531 604.759 54.2236 604.759 53.9414 cv
604.759 53.7412 604.728 53.5479 604.665 53.3623 cv
604.603 53.1768 604.518 52.9883 604.41 52.7959 cv
605.141 52.7959 li
cp
f
602.901 50.5469 mo
600.657 51.9414 li
600.657 50.8555 li
602.326 49.877 li
600.657 48.8789 li
600.657 47.873 li
602.901 49.2813 li
605.333 47.7461 li
605.333 48.8516 li
603.511 49.9307 li
605.333 51.0234 li
605.333 52.082 li
602.901 50.5469 li
cp
f
604.396 47.0645 mo
604.396 46.127 li
605.333 46.127 li
605.333 47.0645 li
604.396 47.0645 li
cp
f
601.884 45.0479 mo
601.884 44.1963 li
602.354 44.1963 li
602.354 44.1826 li
602.16 44.0439 602.021 43.8809 601.934 43.6934 cv
601.846 43.5059 601.802 43.291 601.802 43.0498 cv
601.802 42.6563 601.925 42.3623 602.17 42.168 cv
602.416 41.9736 602.744 41.876 603.155 41.876 cv
605.333 41.876 li
605.333 42.7744 li
603.489 42.7744 li
603.346 42.7744 603.223 42.7793 603.121 42.7881 cv
603.018 42.7969 602.918 42.8193 602.822 42.8545 cv
602.727 42.8906 602.648 42.9492 602.588 43.0293 cv
602.527 43.1094 602.497 43.2197 602.497 43.3584 cv
602.497 43.5098 602.534 43.6387 602.607 43.7441 cv
602.682 43.8486 602.776 43.9307 602.893 43.9883 cv
603.009 44.0469 603.132 44.0879 603.262 44.1123 cv
603.391 44.1367 603.519 44.1494 603.644 44.1494 cv
605.333 44.1494 li
605.333 45.0479 li
601.884 45.0479 li
cp
f
603.271 38.6367 mo
603.029 38.6504 602.833 38.7158 602.684 38.834 cv
602.533 38.9521 602.458 39.1289 602.458 39.3652 cv
602.458 39.6055 602.531 39.793 602.68 39.9268 cv
602.827 40.0596 603.024 40.1377 603.271 40.1602 cv
603.271 38.6367 li
cp
605.141 38.0293 mo
605.324 38.3604 605.415 38.7559 605.415 39.2158 cv
605.415 39.7832 605.259 40.2256 604.945 40.543 cv
604.633 40.8604 604.193 41.0195 603.625 41.0195 cv
603.098 41.0195 602.662 40.8809 602.318 40.6045 cv
601.974 40.3271 601.802 39.9316 601.802 39.4189 cv
601.802 39.1055 601.852 38.8438 601.953 38.6318 cv
602.053 38.4189 602.196 38.251 602.382 38.126 cv
602.567 38.001 602.785 37.9111 603.035 37.8574 cv
603.286 37.8037 603.57 37.7773 603.888 37.7773 cv
603.888 40.1602 li
604.16 40.1426 604.373 40.0439 604.527 39.8652 cv
604.682 39.6865 604.759 39.457 604.759 39.1758 cv
604.759 38.9746 604.728 38.7813 604.665 38.5957 cv
604.603 38.4102 604.518 38.2217 604.41 38.0293 cv
605.141 38.0293 li
cp
f
602.54 36.624 mo
602.54 37.2871 li
601.884 37.2871 li
601.884 36.624 li
601.193 36.624 li
600.906 35.7256 li
601.884 35.7256 li
601.884 34.9287 li
602.54 34.9287 li
602.54 35.7256 li
604.15 35.7256 li
604.32 35.7256 604.457 35.6943 604.563 35.6318 cv
604.668 35.5693 604.72 35.46 604.72 35.3037 cv
604.72 35.1289 604.688 34.9932 604.626 34.8945 cv
605.333 34.8682 li
605.388 35.0557 605.415 35.2764 605.415 35.5313 cv
605.415 35.8799 605.316 36.1494 605.117 36.3389 cv
604.918 36.5293 604.645 36.624 604.296 36.624 cv
602.54 36.624 li
cp
f
0 .00390625 mo
0 390.709 li
17.0313 378.85 li
17.0313 .00390625 li
0 .00390625 li
cp
level3{
gsave
clp
[-17.0313 -1.48892e-6 1.48892e-6 -17.0313 17.0313 195.356 ] concat
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.647059 .654902 .662745 ]
/C1 [.917647 .92549 .92549 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-17.0313 -1.48892e-6 1.48892e-6 -17.0313 17.0313 195.356 ] concat
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5:#bVP^5fVl-GjW2QYoWMuksWiE)"X/i>'XK8P+Xf\b/Y-+t3YHY78Yd(I<Z*L[@Za7!E['[3I[C*EM
[^NWR\$riV\@B&Z\[f;_]"5Mc]=Y_g]Y(qk]tV4p^;%Ft^VIY#_83t(_SX1,_o'C0`5KU5`Pog9`l?$=
a2c9BaN2KFaiV]Jb0.uObKS2Sbg"DWc-FV[cd0q`d*U.ddF$@idaHRme'ldqeC<!ue^`7%f%/I)f@S[-
f\+s2g"P06g=tB:gYCT>h;-oChVR,Ghr!>Li8EPPiSibTio8tXj5]4]jQ,FajlPXek3(pjkNM-nkiq?r
~>
<~Vl-GjW2QYnWMukrWiE)"X/i;&XK8M*Xf\b/Y-+t3YHP17YctC;Z*L[@ZEpmDZa@*H[C*EM[^NWQ\$riU
\@B&Z\[f8^]"5Jb]=Y_g]Y(qk]tM.o^:q@s^VIY#^qmk'_8=(+_o'C0`5KU4`Pog8`l?$=a2c6AaN2HE
aiV]Jb0%oNbKJ,Rbg"DWc-FV[cHjh_cd:%cdF$@hdaHRle'ldqeC<!ue^`4$f%/F(f@S[-f\"m1g"G*5
g=tB:gYCT>gtgfBh;7#Fhr!>Ki8EPOiSibTio8tXj5]1\jQ,C`jlPXek2tjikND'mkiq?rl0@R!lKdd%
~>
<~WMukrWiE)!X/i;%XK8M)Xf\_-Y-+q2YHP.6Yct@:Z*CR>ZEgdBZa7!F['[6K[C*HO[^NZS\$rlW\@B)[
\[oA`]">Sd]=beh]Y2"l]tV4p^;%Ft^qdb$_83t(_SX1,_o'C0`5KU5`Pog9`l?$=a2c6AaN2HEaiVZI
b0%oNbKJ,Rbfn>Vc-=PZcHab^cd0tbd*^7gdF-IkdaQ[oe'umseCE+"f%/F'f@SX+f\"j/g"G'3g=k97
gY:K<gt^]@h;-oDhVR,Hhr!>Li8ESQiSieUio9"Yj5]4]jQ,FajlPXek3(pjkNM-nkiq?rl0@R!lKdd%
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
newpath
8.24542 .00390625 mo
8.24542 384.947 li
8.57294 384.947 li
8.57294 .00390625 li
.529412 .533333 .537255 rgb
f
8.61749 .00390625 mo
8.61749 384.574 li
8.94501 384.574 li
8.94501 .00390625 li
1 1 1 rgb
f
17.0313 576 mo
17.0313 438.078 li
0 448.652 li
0 576 li
17.0313 576 li
cp
level3{
gsave
clp
[-17.0313 0 0 -17.0313 17.0313 507.039 ] concat
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.619608 .0784314 .109804 ]
/C1 [.811765 .537255 .556863 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-17.0313 0 0 -17.0313 17.0313 507.039 ] concat
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~St;OFSt;RHT:_aKTV.sNTqS0RTq\9UU8"BWUSFTZUnjf^UnsoaV5:&dVP^5fVl-GjVl6PmW2Q\pWMuks
WiE)!X/i;%X/i>'XK8M*Xf\_-Y-+q1Y-5%4YHP.6Yct@9Z*CR=Z*L[@ZEggCZa7!F['[3I['d<L[C*HO
[^NWR\$riU\@B&Y\@B)[\[f8^]"5Ja]=Y\e]=beh]Y(qk]tM+m^:q=q^;%Ft^V@S"^qdb%_83t(_8=(+
_SX4._o'C1`5KU4`Pog8`Q#p;`l?$=a2c6@aN2HDaN;QGaiV]Jb0%lLbKJ)PbKS2Sbfn>Vc-=MYcHa_\
~>
<~'GM5r'c%Q$(Dmu,)&X>2)]Kb:*??1B*ZlIH+<_mP+sS<W,U=Z^-71)f-n$Mn.4Qet.kE5'/M8Y.0/#"5
0ekF=1G^gD1c7-K2E*QS3&ruZ3]]>a4?Pbi5!D.p5<qJ"5sdn*6UO7077B[87n6*@8P)KG8kVfN9MJ5V
:/4S\:f("d;GpFl;cH^r<E<.%='/R-=]np3>?b?;?!UcC?=.&I?t!JQ@UinXA7T7_AnG[gBP;*oBkhBu
CM[g(D/O6/Df9T6EH-#>F)uDEFEM_LG'A.TG^4R[H?spbI!g?jIXZ`qIt3'#JV&K+K7ei1KnY89LPL\A
~>
<~*#oq=*?H7D+!;[K+X&$R,9nHZ,UF``-7:/h-n$Mn.Olr!/1`>(/M8Y/0/,(60ekF=1G^jE1c7-K2E*QS
3&ioY3]]>a4?P_h4[)%o5<qJ!5s[h(6UO706q'O67Ros>84Z<D8kM`L9MA,S9hnGZ:Jaka;,L4h;c?Xp
<E3%"<``@)=BSd0>$>-7>[1Q??!^iE?XR8M@:<VS@q0%[AS#FbAnPaiBPD0pC2.O"Ci!s*D/O60DfBZ8
EH-#>F)uGFF`hhMG'A.TG^4R[H?spbI!g?jI=?WpIt3'#JUrE)K7ei1KnY58L51P?Ll$tFMMd=MN/WaU
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
newpath
8.08165 443.711 mo
8.08165 576.004 li
8.73671 576.004 li
8.73671 443.711 li
.619608 .078431 .109804 rgb
f
8.61749 443.711 mo
8.61749 576.004 li
8.94501 576.004 li
8.94501 443.711 li
.809804 .539216 .554902 rgb
f
6.62988 536.868 mo
6.54932 537.043 6.48779 537.238 6.44531 537.455 cv
6.40283 537.671 6.38184 537.878 6.38184 538.074 cv
6.38184 538.605 6.54053 539.021 6.85742 539.32 cv
7.1748 539.62 7.58105 539.77 8.07666 539.77 cv
8.56396 539.77 8.96338 539.627 9.27588 539.341 cv
9.58887 539.056 9.74512 538.669 9.74512 538.183 cv
9.74512 537.95 9.72266 537.745 9.67822 537.566 cv
8.45996 537.566 li
8.45996 538.558 li
7.72168 538.558 li
7.72168 536.668 li
10.2422 536.668 li
10.3179 536.949 10.3774 537.214 10.4199 537.462 cv
10.4624 537.709 10.4834 537.949 10.4834 538.182 cv
10.4834 538.967 10.2915 539.583 9.90674 540.029 cv
9.71045 540.262 9.46436 540.439 9.16943 540.562 cv
8.87451 540.685 8.53271 540.746 8.14404 540.746 cv
7.34863 540.746 6.73291 540.519 6.29736 540.063 cv
5.86133 539.608 5.64355 538.981 5.64355 538.182 cv
5.64355 537.923 5.66064 537.682 5.69385 537.458 cv
5.72803 537.234 5.77588 537.018 5.83887 536.809 cv
6.62988 536.868 li
cp
1 1 1 rgb
f
9.72266 534.813 mo
9.79248 534.708 9.82715 534.571 9.82715 534.402 cv
9.82715 534.135 9.72412 533.926 9.51855 533.774 cv
9.4248 533.703 9.31836 533.653 9.2002 533.627 cv
9.08154 533.601 8.95068 533.587 8.80762 533.587 cv
8.80762 533.975 li
8.80762 534.095 8.81445 534.211 8.82764 534.322 cv
8.84131 534.434 8.86914 534.538 8.91113 534.636 cv
8.95361 534.733 9.01514 534.813 9.09521 534.876 cv
9.17529 534.938 9.27783 534.97 9.40283 534.97 cv
9.54639 534.97 9.65332 534.917 9.72266 534.813 cv
cp
7.13135 535.456 mo
7.05078 535.282 6.9873 535.087 6.94043 534.87 cv
6.89355 534.653 6.87012 534.449 6.87012 534.257 cv
6.87012 533.73 6.98535 533.351 7.21533 533.118 cv
7.44531 532.887 7.81494 532.771 8.32422 532.771 cv
8.7666 532.771 li
8.93604 532.771 9.08008 532.77 9.19873 532.768 cv
9.31689 532.765 9.46094 532.762 9.63086 532.757 cv
9.86768 532.753 10.1245 532.739 10.4014 532.717 cv
10.4014 533.507 li
10.207 533.53 li
9.979 533.54 li
9.88525 533.547 li
9.88525 533.561 li
10.0688 533.658 10.2139 533.807 10.3218 534.006 cv
10.4297 534.204 10.4834 534.41 10.4834 534.624 cv
10.4834 534.95 10.3906 535.232 10.2056 535.471 cv
10.02 535.71 9.771 535.829 9.4585 535.829 cv
9.21289 535.829 9.00928 535.776 8.84863 535.672 cv
8.68799 535.567 8.56299 535.423 8.47363 535.24 cv
8.39746 535.084 8.34521 534.908 8.31592 534.711 cv
8.28711 534.515 8.27246 534.306 8.27246 534.082 cv
8.27246 533.587 li
7.99902 533.587 7.80664 533.648 7.69434 533.771 cv
7.58252 533.895 7.52637 534.092 7.52637 534.364 cv
7.52637 534.552 7.56006 534.737 7.62695 534.92 cv
7.69385 535.104 7.78564 535.273 7.90186 535.43 cv
7.13135 535.456 li
cp
f
6.95215 531.742 mo
6.95215 530.904 li
7.43457 530.904 li
7.43457 530.891 li
7.23779 530.762 7.09473 530.605 7.00488 530.422 cv
6.91504 530.239 6.87012 530.054 6.87012 529.865 cv
6.87012 529.37 7.07324 529.03 7.47998 528.847 cv
7.2832 528.749 7.13232 528.601 7.02783 528.401 cv
6.92236 528.203 6.87012 527.991 6.87012 527.769 cv
6.87012 527.563 6.90381 527.389 6.9707 527.245 cv
7.0376 527.103 7.13135 526.989 7.25195 526.907 cv
7.37256 526.824 7.51318 526.766 7.67432 526.729 cv
7.83496 526.693 8.01807 526.676 8.22363 526.676 cv
10.4014 526.676 li
10.4014 527.574 li
8.34326 527.574 li
8.23145 527.574 8.13525 527.577 8.05469 527.584 cv
7.82031 527.642 li
7.63574 527.799 li
7.58887 527.873 7.56543 527.97 7.56543 528.091 cv
7.56543 528.229 7.60254 528.345 7.67627 528.437 cv
7.75 528.528 7.84473 528.598 7.96094 528.645 cv
8.07715 528.691 8.2002 528.723 8.32959 528.738 cv
8.45947 528.754 8.59131 528.762 8.7251 528.762 cv
10.4014 528.762 li
10.4014 529.66 li
8.34326 529.66 li
8.23145 529.66 8.13525 529.663 8.05469 529.67 cv
7.82031 529.727 li
7.63574 529.884 li
7.58887 529.958 7.56543 530.055 7.56543 530.175 cv
7.56543 530.313 7.60254 530.428 7.67627 530.52 cv
7.75 530.611 7.84473 530.68 7.96094 530.727 cv
8.07715 530.773 8.2002 530.805 8.32959 530.82 cv
8.45947 530.836 8.59131 530.844 8.7251 530.844 cv
10.4014 530.844 li
10.4014 531.742 li
6.95215 531.742 li
cp
f
8.33887 523.457 mo
8.09717 523.471 7.90137 523.536 7.75146 523.654 cv
7.60156 523.772 7.52637 523.949 7.52637 524.186 cv
7.52637 524.426 7.6001 524.613 7.74805 524.747 cv
7.89551 524.88 8.09277 524.958 8.33887 524.98 cv
8.33887 523.457 li
cp
10.209 522.85 mo
10.3921 523.181 10.4834 523.576 10.4834 524.036 cv
10.4834 524.604 10.3271 525.046 10.0142 525.363 cv
9.70117 525.681 9.26123 525.84 8.69336 525.84 cv
8.16602 525.84 7.73047 525.701 7.38623 525.425 cv
7.04199 525.147 6.87012 524.752 6.87012 524.239 cv
6.87012 523.926 6.92041 523.664 7.021 523.452 cv
7.12158 523.239 7.26465 523.071 7.4502 522.946 cv
7.63574 522.821 7.854 522.731 8.104 522.678 cv
8.35449 522.624 8.63867 522.598 8.95605 522.598 cv
8.95605 524.98 li
9.22852 524.963 9.44189 524.864 9.59619 524.686 cv
9.75 524.507 9.82715 524.277 9.82715 523.996 cv
9.82715 523.795 9.7959 523.602 9.7334 523.416 cv
9.6709 523.23 9.58594 523.042 9.47852 522.85 cv
10.209 522.85 li
cp
f
7.67383 519.689 mo
7.62012 519.841 7.58203 519.975 7.56006 520.091 cv
7.5376 520.207 7.52637 520.342 7.52637 520.493 cv
7.52637 520.636 7.55664 520.76 7.6167 520.865 cv
7.67725 520.97 7.77441 521.022 7.90869 521.022 cv
8.00684 521.022 8.08203 520.978 8.1333 520.889 cv
8.18457 520.8 8.23926 520.661 8.29736 520.474 cv
8.34668 520.313 8.39258 520.183 8.43506 520.083 cv
8.47754 519.982 8.53564 519.883 8.60938 519.785 cv
8.68311 519.687 8.78125 519.608 8.9043 519.551 cv
9.02734 519.493 9.17822 519.464 9.35693 519.464 cv
9.54932 519.464 9.71777 519.503 9.86328 519.581 cv
10.0083 519.659 10.126 519.767 10.2153 519.902 cv
10.3047 520.039 10.3716 520.193 10.4165 520.368 cv
10.4609 520.542 10.4834 520.723 10.4834 520.91 cv
10.4834 521.219 10.4341 521.559 10.3359 521.929 cv
9.59912 521.875 li
9.75146 521.571 9.82715 521.277 9.82715 520.991 cv
9.82715 520.844 9.79346 520.709 9.72656 520.586 cv
9.65967 520.463 9.55225 520.401 9.40479 520.401 cv
9.2749 520.401 9.18018 520.45 9.11963 520.549 cv
9.05957 520.646 9 520.798 8.94189 521.004 cv
8.89746 521.155 8.85498 521.28 8.81445 521.378 cv
8.77441 521.477 8.71973 521.569 8.65039 521.659 cv
8.58105 521.748 8.48828 521.82 8.37207 521.876 cv
8.25586 521.932 8.11279 521.96 7.94287 521.96 cv
7.76416 521.96 7.60645 521.924 7.47021 521.853 cv
7.33398 521.781 7.22119 521.682 7.13184 521.555 cv
7.04248 521.428 6.97607 521.282 6.93408 521.119 cv
6.89111 520.957 6.87012 520.786 6.87012 520.607 cv
6.87012 520.433 6.87939 520.28 6.89746 520.148 cv
6.91553 520.017 6.94482 519.865 6.98535 519.696 cv
6.99902 519.629 li
7.67383 519.689 li
cp
f
8.96777 516.822 mo
8.22949 516.822 li
8.22949 515.061 li
8.96777 515.061 li
8.96777 516.822 li
cp
f
7.88965 511.257 mo
7.88965 510.928 li
7.88965 510.659 7.83594 510.443 7.729 510.279 cv
7.62207 510.116 7.44336 510.034 7.19336 510.034 cv
6.93896 510.034 6.75391 510.117 6.63818 510.283 cv
6.52197 510.448 6.46387 510.663 6.46387 510.928 cv
6.46387 511.257 li
7.88965 511.257 li
cp
5.72559 512.194 mo
5.72559 511.008 li
5.72559 510.735 5.74805 510.484 5.79248 510.254 cv
5.8374 510.023 5.91309 509.818 6.02051 509.638 cv
6.12793 509.456 6.27393 509.314 6.45947 509.212 cv
6.64502 509.109 6.87158 509.058 7.14014 509.058 cv
7.40381 509.058 7.63135 509.104 7.82373 509.195 cv
8.01563 509.287 8.1709 509.413 8.28955 509.574 cv
8.40771 509.734 8.49365 509.925 8.54736 510.144 cv
8.60107 510.363 8.62793 510.602 8.62793 510.861 cv
8.62793 511.257 li
10.4014 511.257 li
10.4014 512.194 li
5.72559 512.194 li
cp
f
10.4014 505.143 mo
10.4014 505.994 li
9.93213 505.994 li
9.93213 506.008 li
10.1064 506.15 10.2422 506.318 10.3384 506.511 cv
10.4351 506.703 10.4834 506.913 10.4834 507.141 cv
10.4834 507.534 10.3608 507.828 10.1147 508.022 cv
9.86914 508.217 9.54102 508.314 9.12988 508.314 cv
6.95215 508.314 li
6.95215 507.416 li
8.7959 507.416 li
8.93896 507.416 9.06201 507.411 9.16455 507.402 cv
9.26758 507.394 9.3667 507.371 9.46289 507.336 cv
9.55908 507.3 9.63721 507.24 9.69775 507.158 cv
9.75781 507.075 9.78809 506.967 9.78809 506.832 cv
9.78809 506.681 9.75146 506.552 9.67725 506.447 cv
9.604 506.342 9.50879 506.26 9.39258 506.202 cv
9.27637 506.144 9.15332 506.103 9.02393 506.078 cv
8.89404 506.054 8.7666 506.041 8.6416 506.041 cv
6.95215 506.041 li
6.95215 505.143 li
10.4014 505.143 li
cp
f
6.95215 504.212 mo
6.95215 501.479 li
7.68896 501.479 li
9.70605 503.193 li
9.70605 501.418 li
10.4014 501.418 li
10.4014 504.285 li
9.6709 504.285 li
7.64746 502.537 li
7.64746 504.212 li
6.95215 504.212 li
cp
f
6.95215 500.708 mo
6.95215 497.975 li
7.68896 497.975 li
9.70605 499.689 li
9.70605 497.914 li
10.4014 497.914 li
10.4014 500.781 li
9.6709 500.781 li
7.64746 499.033 li
7.64746 500.708 li
6.95215 500.708 li
cp
f
5.37793 497.039 mo
5.37793 496.141 li
10.4014 496.141 li
10.4014 497.039 li
5.37793 497.039 li
cp
f
8.33887 492.879 mo
8.09717 492.893 7.90137 492.958 7.75146 493.076 cv
7.60156 493.194 7.52637 493.371 7.52637 493.607 cv
7.52637 493.848 7.6001 494.035 7.74805 494.169 cv
7.89551 494.302 8.09277 494.38 8.33887 494.402 cv
8.33887 492.879 li
cp
10.209 492.271 mo
10.3921 492.603 10.4834 492.998 10.4834 493.458 cv
10.4834 494.025 10.3271 494.468 10.0142 494.785 cv
9.70117 495.103 9.26123 495.262 8.69336 495.262 cv
8.16602 495.262 7.73047 495.123 7.38623 494.847 cv
7.04199 494.569 6.87012 494.174 6.87012 493.661 cv
6.87012 493.348 6.92041 493.086 7.021 492.874 cv
7.12158 492.661 7.26465 492.493 7.4502 492.368 cv
7.63574 492.243 7.854 492.153 8.104 492.1 cv
8.35449 492.046 8.63867 492.02 8.95605 492.02 cv
8.95605 494.402 li
9.22852 494.385 9.44189 494.286 9.59619 494.107 cv
9.75 493.929 9.82715 493.699 9.82715 493.418 cv
9.82715 493.217 9.7959 493.023 9.7334 492.838 cv
9.6709 492.652 9.58594 492.464 9.47852 492.271 cv
10.209 492.271 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 ]]
] del_res
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
    mark
    {
        currentfile AI9_read_buffer { readline } stopped
        {
        }
        {
            not
            {
                exit
            } if
            (%AI9_PrivateDataEnd) eq
            {
                exit
            } if
        } ifelse
    } loop
    cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 12.0.1
%%For: (Alice aus dem Wunderland) ()
%%Title: (Puzzle_BG_Start.eps)
%%CreationDate: 10/22/2006 4:43 PM
%AI9_DataStream
%Gb"07Bj2OedP1TJT'OOKE#''!^pKo'\sk9r,nNTQOF8:lDSX*@`&9Dak/6fFhl;jhXg[!(,WY<Vci#2\_pDsHV,H\1[HH\p^$BR:
%h*!:_rj,Mli(#M.O?mjKO1Df6m=TX;Tn+\>SqsUN[F`(*N4["+I]jV"#*iMmf,q(..XsCgKtYJDI*sFUO#roh?\NNudCaunV/:K_
%Dg12eYCG4B(18ZpMIYrLH2tWd!;tTe\%Bo1FXu=(rc)`N&j@Da-c%N#*6,l>TEqkZ`9:U0>e(maH^?RB`nDreJ)"rN"u4?S^PKLo
%+.JQKg<d4*=JWS@rpYNd(C^:N?5.^7@K&]C*=iMM7fVO+m^*=[7Td/pQ[lZ3[Zt1_@=6Vh2hp^+(D["\_p:Gm=K'6;NU+kd;kT5\
%Jj5$O$[UBj<sT[?0*SCdo])>]rPZPU@"4IZr\&+HrYPRY$_lSFH1q!53!\%EPZR?#I*>:i2DtS&jp=W7\"i`hWm_g)`&tn87Hb]q
%nD!cn2?eQ&AkU>MP&_'e"cC/]`<lVRMgc@oaEXS1b'*<ImJ*lM_R$c"MYi.?9)[^Wq]F`?_lX,jE8?BJYIj1q@?o8aUpjg:f8;X*
%7c!C$"u;E9*r9_W*&[S*nIXcVf=Anl==JoprTqMrj_j,I\F3,^nga&Kp"g7S9>1s+&TC_U=\oeU(W\s9"U2ns^gS@*kA[`2&9)8H
%mJ&XX%V7"2@GM/KGhI#-[C[q^6517F*VqlT@^=O&[o+Z+;+(;?Q;e9`s$ue_#'6HTE#<fd;A_X$m%krC<p^peoX/S;d_!F,6-5WI
%a++GO<i:.R5#!-_1Do-Jb,g?ua"MbcU#!\=n,2]BIhj*oGHToBXa]a8C:eiH]CX'jWRX(e$V1.b'3Z/XSpZHc+;OLEPH2^r+RV:?
%/fe9-LN0TH^3Y1EB`!eJ3G>>#gDXILJsEo[S[dK<^[?[`>P`;%BFOpOm'WuXcsjK_B=sIC0]O_%\DM_fe^O2p#Npf9?E]Pd\Hc:g
%mU*B6K=E]mA%<'FUN(]cfKX5[rcOEU]M+n&8,L&9RS'@(BqP&;=6Js_hFu8Ecf<duD1g<uo=&`>ih-#BCmO;rS$[<`1ETrBs0N`9
%ge"iErMq:K!sb.,TKc36HM0o5I]"tKC^I`SSk.fLbgT&f.\#[d+fCj=]3l?\U^<3PE.%!^DF?VbB,DH3&V3`_6_-9^Xu['m^-(Y&
%g4RS5Ae%6/4juZhB_udA'7*(77BI8J:HNRf@Q%NCBlk<m!e$0gKT2>,]7oW)Cin]Hf`&3rg$"O+`:i`jh3)K8:*GZaD7aP.C$Enb
%6)!(Veb3%Yd;"<b?Ra46mWKP9EN=%j5R$;d5e1:,3hfGgh>-*kSNk]nr5!0]at(-K90D2W&%L[a(S#ONDEscC=G<#CM1nVXaaD)G
%oBKZ,X*A3Zj@*D5.8P9(-Tm.__OWnLoVf3BQ29MH&W@<h;1'^0,l$QMB[pY+O@HTeo'E;3?I`G:j/"![GWZki*HV(U*Xu?`X&69(
%/QXIQC:.*Ef=W$&nX?EP2-EkcTGH+Q>,bQ%<GT!G^$aERS_$<dYKOMW#PG;BeP#RU]i'Wgot!S9VD69'*d-$gB-5YWbT3&I1cg`"
%Jcl3SEZhCcnqKEp&s0cCWn[\+F'oM#fH^H?M1BHc^ckb)ZhOR3,9T%-;l,U=)G@jVNe\h`ad=n7Chk%]:.A'a>p51_3fY9':I]>C
%_f;1uL#r08C_"Y_C3:Xf'o5`li^?&-!6F7(ff5)>X4Di&<?Pun8/kPrMoH2NW6&Np,H)\),I8sEW7g)1ghQW5oC-hn!08LT>R#Zh
%!hp7#7?3KBO$J6c%i-QXd-deRGS5GM:dWr*s7IUtRk].ba@N/Vr.;11:*.>g,/CEW8/M[5i:n+J!tcOVF4iccBVbt)MA#V(`_Wl9
%'r)pYj_CfCX`Bt8iNdibb9#,mU^@o<%k&P$W^mc#>A9KRF]pg=\Po8D#NEu2(IIm`M*Q`g,g)i*Wh:+id'_XF^@+]Zn3]G297GQt
%pf5'5$GcgajAJNU8f>]H7^=9i&r6P1"@>>lQ*2H&7k.K#.]K_RW2ckK)Y!kEn,PS%5QsFb"qgctJoXZoW^.)YN/+,Fndplhr=Iu4
%&;CIC0FT3$.>?lf&lunRM!E'>=MuEb5Cd&C49@`,?l7k;;H/CC$N*jJOI?I*QWF5o;.:go6:mDL8L7L@oLaX##mN%KV\8tZ_bUGb
%5UK.3&un);FICWR)9>k`16m:aO_)>5$k"TkoE,AbBjr'VN;kBs"-Qdkkq/\,KFOutk#=>=!4aUDrCHc^Q(S29"OJc&.[;K^@h07f
%YDT>eQ.<\(Rmc:NT&9oVU`+38*jo0.jcZ(_URVE^+KoHr):?pK/RH:IdVqk_4Hj^n(^l[K'QO[sUWL0D'(.1ns2^WsA"u%T,Wq<3
%&b48>58%9p\]G@m_GMVs;4=D5WuSk5`)j`W/meXGC!P/>Q#[]3(Jjg!-N%F8XH[[kiA!/O^gG/o/rs-f96j3P=NXp8YDAq^5?V;B
%!=+1_'&NuSOV!ln\YDp4iE$b57Pk3CA@]QuXQ!4FRaE9]XrtGL35aheb8lm-*:<fu8GFFI*M`OpjUfT[28^Z)97Tfg-^<";RTHlA
%EOChh'LA7@]V;q_eNd:C)3,$>(DtOg0$g?IBUiibo$*^i*6p!/iZ-qrO`6<A)6K/DSHM%WdL$s=M,PVH1n\8JZ_02W4]9Dm`%V&_
%5;XQWIQ793ic4%"bNG>CM:[__l>h6O!?LRjfLX9CaP4M^`7*9q+t$I[quN<m#9HA5VLTsb`4'mI=@&6,!ZnHFG;A)L#qQi((Y/R<
%:)5Jc:9/oOc%)Q7E"_(7gf"<."`R$5Hr0o>@'KY<G.e#?>mILi_[b`+ej'=Vg=Zb-+"[RR<ZqMH"+EB]Ef_ja&G5-?lDTg]00lM2
%s'?o,4c'F/Fn"Fl!%Yr7&UYYt\D+"=?bf&15!E(!%[tM?e13E';AHEI-,;MDbSB()K,3L_V]OL.)HaudXK;UU$t5\6pt5nTk+IBX
%-U9cEJ-m%Lr=VXe#kFWR/ps<'#<I-<eS?9n'p,:*aAiL&<'X"skfH*t4cmc(87r+eZin5N3!.VFd,'Nui33_5=GIecI0J]H"@=#Y
%<`#G2I*`QIFG?^YTL#T^Me16a&L`/0oS`pD,=),["ZV+YWkki>@.-b(!?pr`!cILY-TH("kLW#'<In)k^b6:=9`VgNJV+*h63_F@
%*HYd+Zt(&!//!IXn='J2l3$d#i'@l1ltEW*`klRO]QJj2#]2j?nq(F#W;XsS^Nnft:]0@3R<W1eH=:Q/_57uuZ6At5L`a8ZLqJqX
%amhd<ls5&u+Qp<*3.FVCUu=:pcuG4)%YPKP3?aRqR'ImD)^sg'8ZiG+29rB7O%a5O\9W5;WV<;Mp"gCLhSC(3/.M6Gl%'m9ndb@b
%me%@S-UnZX39b+EJdk=VA-5\o#r\YgkbS#ddoA>AW^KWKHo?VSb1BRX<3to;WH]`c'6'C;K9#!b96#"E3oG)fc(;mi9`#NTUHelG
%)$lF#/Fj?s7oBCafsIL%ksRY<#<uJUBpYG3a<XGB(+Cd\nZ8naF?<)Bg4:IYUEol1Pa_OGZ$o^aMHi:m7eL.um]<\bN1k=;>eZ=n
%9q4+\ADTT7PgR.+ED'$\\7$=8CPa+VbVY54[I_N<)+!GE):P#!WB;g?\#*Vs(j3])e>QTX?89#F%k!\ZY*%&!q8CW-H8*Gr6mffZ
%ZO8>+7k'X1-rH"u8m)@ZndL+*%@E365f+s[$1_AS0[n9MW\eWSrVXd#lDO.Y-pqT%W"ms:+2\?0_\/Jg(*?8E?\_QL&,rfAaD/P`
%)Fj&.T2;>u80@lE#O(>c5(?Q'Jb5]7eg\-ibE$OHGP]k=+5asJ;((T-O8L]ps6`eedsWu2!L(o\X6-njW>L%^VUU$)I\Z<;.;`iX
%O<cE2H3cA?GJZWb&@s%DCdFa?6L^G1\donhP8oD.I>FDT:aD&gN=K%0*!b,DlT/"(l[VRVRfbuNf@k2J%cLeQ9Fb66]k(<FJe^%C
%>6WRlJ7(-76NqE>!,i>a=3:E(La-;0-/;<W+Dq5pZGq`+),P@0%q&md5thh#*L:;i;@#jXJCK=K2Ae<Fkaapn_'k&5BgA++P"lEV
%ICnct2_8#YLEfn6EoKk@Z-M&eULd>FPiQm\[L'#K6j(4EVA;O'-u1cLNCk]VCeY-5<%0*3TN$]C(mp&BlrA/kY:'E&8Pk*3_p&_8
%r(K[JlW$$eKfUMu%h-FuJPPps0RInT'D:i^l%uB0Lc6@tAr[GGFZKrZa+u;0(f?F;$-;J+iJBBX`r&fW"JHF-Ta3#cg1\,Y*o5]8
%:_4o8L01]sP34bD#c>Xni+q1kW9bQ,Ae11"_4S)iI`\U>AsG@g1"bUcFj=su3Hjn+@f*EqhK#a_Z$DAi5fF0L2#&E",#!OlAm2E.
%6fNlo=![`q<a"Lp%atWn7Bo"9:gaHpod[J[pt.B[30WD7TZLiq7N_4OIVbB6,V=m<mqeq-B1%Y=)u=YVO94"Q=da?^J4t0OQu[U!
%?T*YqRf1_J+Qn:1Q^W([&r.^t;N/1*,;+i=XPc(X+W>QBI_\CXiX(R%AiQpd5SL7nNJB]GYF<p=B$T-WSXkJVH"k9&LTPUqoa77X
%>(9g;rd'h*lI5]RE*psjpW-8LjPnB]UZ^4WR>STJA.D?'D,c1`$u9PQ7hm5X#%=5OXGUs36rI#P<#0RjNAO*3C\f5tOgY:Y3H3].
%Y)LYu'tI[BcRPJM@uUQ0?WB.\eE<#13h>no1(hm/%b0tKd0S<1S`,MgCV[K%qJ1TI.Bku@VNYC)0hb>pbB+M)+]j8c$Bpe:,8Cd@
%r+Q83Wrq\-4CBH<rmOW%+u>o%Kf'S[is]XC_&S;3M6n0][B%=7-W=7rB=F&bb=\!TMo^QeA$3lVQH%8Zb+Wh8"F/u?PA<E'?)=W+
%KedFTE[A(k&^jthj=Vs'4gYkH.-&=,KAr$j>Yj.A.coTq1L2=d7lrgVAM=5H$qYJQIH)_qEjYAW,Bk)tgn`LWj3[dW',E9bdi@'u
%q)%^=$>?d9PgBr4Y9^0oS2&i7rOEVm<R9sYcZmH?XMXVJfSicHG;aoeMJ&K>?Z3uU,jp_?7/q+Rki\Lr0\=t`1X:a<r/]P2rL/o/
%nW11.H9qb`HJ9dQXF:"5)S<uELFAKMdASRM\eR(Heo%1*JlQ<F\+%Mg_VBjj?IXp+0,m>$Qn4!jd>D0Ndg/k`C/qj3Wq8]Q<tg;U
%WcYAm?+$iVc*=9S.sG(.B,/'ZmcBCJ%l;@6Je@L3Ed&50<U5l@WDGKAk>QIl-(q>s5%s\i:m\*UQ&IaT;*gaRM,l&4.bA2kW_k9:
%<0%pW5_Yo7H*GFgX%'3.X]eD`@_Q"kV$MJ;S4o#:ba_<c\Tt4a7oc6u%_roXS3>n<(uh`LZ=8^$$gTA^3=OVE-rIEE]*0N7#",7j
%0pagU=(mdN7h!,oL%M=GClSNd9tYRA4E:J#@VR[f-DRG`U$D-!jbD-$KVF&hb7WNKK[%'XLat;h=@5*k)87hn.<!^m5;\./*\!p4
%'V&N%"i?*69an#`(,nH9DGKNX-5@NmN)?.NF<fn@d\p:PZTHF9hYMU):Ru+4*L1V#X^32'A@.EK3g%Oj#*d;!mdWu:<U5`7MZ?h;
%C6=a)XE-A`)A:r'S5XSkkKY000%%>l-ea6`a7<#\HccX"l$j0R!M9[n@u-$kTkLu-CRVQ(D6u*ra<B"bRFXGNFj!&I<0D'ujsTPj
%C6$_)`MmZV]4mS3/72Om/`A8=1X0'g[r05lY1mP.2lrPm*h2N1Z)K\OS73Xi@h/9M[ek+=jIg6_%T),;FE2mUL+tp1\.!t#1n5lG
%aM=;_0Zp`^^Tu7DA8OV"Ear`4`5B[0BKo?!QAK)R+;ul>%bt3]ErZ@H@[(r;!/C`BD\mp`:0=3J!!-s@E!?DN5`rhj4'EQP*ZjZ)
%mP2!kSp1Vc8fdU;:V.jW.[ZW4-I=/<<=`t2mM1@ClI2(4A^n+&@?d_14i.(&PJ"GkpZt)Z/q=,Q]>.*$Hh>UXP8uTMELRadc\KhQ
%H@;iDs"bm[>_$3,-/t['ial%0:'KXFCP(4i&[7%Y$EDJlW\e@)Zc6_9\<_1n6A^5EbO!as2c&jRO=+CsaQ/IL=-Q/e7H:AAOh>sW
%juga5KA@N\Ou8h0G1/q9,`Yjd$C6mKUJ!="7@.=s\EQh<b-="[/uS=a\+&;ka6K%l]CX)0(M\Hkfl'(Oc"Ffem!f22rLuC61K8']
%?(r1mY-pFVF[I&qkOfWM]W^NhqF(09Ht1^rmgd(aD#&@cpK*]Q$7kmXO)D/u\?Pn*E>]Q.iT!gWf`![%5$tJb0!FarD=r&W?fQ`D
%.d)e7\"K4(n7,Z#Z>$Y4hsGC8BO9K.gFT[r)hW;i1KD26&Pql6l(R^SD]7XqeTMV`\(0^B?!%,roS*TjZe'-7/c&F*1o,+t;"j<q
%jM`/7lPmY=.en_2_T0u/TlgT(44&BOY(ad6VhN[<SNdJQc;9RAm*u0^?!)dkQhMHt@ICGbFY,P6@ep^NK^9'@$nH9N:Ige2q".Qc
%HJR.pHT5^Cg!7?g+`O?/L2bMHh!9(io</C=mE`<>ZIP]2'+:Z/I#0FfB+%1F;*I9XS8aYohl7K=anti)n+%@i/se@5P@3srSY?&7
%/.)1&rY%6T'n?'I)BrNY(Dup$^D6DP.I)O)cc^3Ud.Qi&,[&0.?Z6cl%ZdjOQJhcjQJa-<KAVRas0a60>*0')(&;d/qmW0q[s?cg
%\&\GO;.gScpfgVq\B"P`Wo'2HIf&MNs0`$ErU&KWr.idHjJqafp>o:%<TD)SE6emJ21EKE!"@W<i@Od!rf-[el!OP,]E&P)GYgpc
%r3'TXB:r9[Z<<F5<#?R5rp/49S$>'P0;7kIlu]_ekdNbU#X9?REpiS&F;s#gADHG=Vq,]F7mAr)+mh3LnSf=\r:a!!6$W$kD`!CO
%K@Ch<8t>kBYP/AV@%s1[cM<`("d>hkbZ+K$Pe%/1Dg+%IgE$d0/2k4t]$1a,"Yrl'W4t1iL\cKO*!R@9:7B",D8.3kg))a;BQVo/
%:]g.60bab8\$u7/f8B7Mr;Dpq%WV[^)1L2[r-p=\?"gKr^G%8b$SZdphr)gMkM!A#$Hq0XETZlOhcKO3j\ikNa@G8G*]@3+JmX'4
%qdD&TD"QJAP7E&heDO\dahIq?s0([lR^Qt&[l^]UIYl$Q/k7ut)ahF!jEcXG0'^auo+n_hBV;1eRJ@rWlW^H-"EEcd"1Ie3]7],j
%I5fmFK[qd@r-r*Ylr*D_LH\o;F2i>(LCX=>X2LhccH)tLc5W<\o-/(s5W%ueidWJlllpJH[a>=gI6fBoEKMVcqDq";DdB<RR/]?g
%gdZ5[qrMO8MN*^+E;J2dX>M#?g<KY'VNb,'fXpQ1A,6P[J+;Mf0L+e2_*7;,VaLE2MDld*C]`s1,nf8(aL/!+05h0V8Qf.ZL`?B&
%-2o9A9n1KpV?l2&J)d!sc<o%-mFLcS#$+\I'`Z<uR0DZRm6#9YS^.knr-K5m=7G[afO3;0[i"I=CTDp?17U0meeF@W)(Y(Jj$DK#
%1G0ZdrtuSeXnJu=ddFJt<lPk\nh\cKD+B:LIsBCWoNR"rIJ#BHoFmkk`hmDI3*F4[NDJ!Ya8;=ajL3j[iPq`I%Q?:0)<X8$2s`K7
%K<#2m8b6j;Yh^c;gAff[?A?+Yp4`45LL2hH6cS3C:N([/Kj^X!4bV5I4#4k1HA,;rXiGFr!:;i7DHn$q%d*+t?IJqG?OkM8c.W/Q
%,R6isIpCWCFO.*/B5q@pGElP[4O<:PUrU[Ei>(9sd(ljND?$BG#sA1GBo>pDl(YPuhro\BJG+W5l]XUsXS9<D_#\_-*a@K21,I0]
%4?1)iOs&kcbej8,D<]BV3J<qdBlk9LAtk)Fm^7hf:>Cm<V<cUU-_]&J\pO/(d7\bLW@*=^$k3RtEnmc/1p3pep&9pI=-s[BgsDhL
%BjUm*@`mju^uoA*Q0KTsjuD[e1JCcXC0\SoKD+DLVr82'9Ukfh<#E]:'3OC8?+#Tcp^XHQ_pS8uSb?G*G1d^;=S>U8>H\sI<iW,k
%gTU^r?F%WA,TK>HrF+K,eel9tm.Qm-%W917)WY+XUc!SLluk88f)>LPPD;-*UU$,X7#$>0QR=M:Hh_<e';sX/o:!BVD`?"_RO1GF
%[,%q:nb=)I/#/50DI[JhbV_q8Fqok(*itB`EU;WVk0L/u=AH!BEq?SMH+GpsO8FuNC>->ug[[Z\@rC%MX$8#t/7?&(bq`eRXK2h"
%e_+%tn315M>9i.f2Z(g#Z.\GpC_!k-S2+R-eCD0O6;oR",FXL3BO90e=OZ'5?g3j5Y\n+XWbJ9&UV97QSi9iG#B(Ha_j\N1dp"]M
%3-%@'DLC$NR]%[;::nDQX)lfUmA1_"jf[S/ntLqqKnJ7HBlVe;R_<\G_U'!N$*Ac.i`:6d)&d.C*iB#s-H1D]kYJ$<2FJbih!$<Y
%M/BH3EjrZY4km-\j[<ohnL=;=D@i$cSCIC>mpt&lG/b1?isR(d7YQ%"[TWFMV/*Ep.\c=s1p2^ccJ$VtLZS+j2B@>,Lm&EhChQ>'
%H$Ts(?1eEh)tjN+!PttbHi8Gq`<[eJm.IWjoVO3YG5B1rYrLu)RMRn>[^lrBpb]F3]e7a#NPS25GhKTqV/>[U*D[TFR,$HGQE>DY
%53n4?+D6J4Y56+Y&@k(h<L0W??Sf.67*ZqdMN[-0&N"?3K"r+D>0F3B.#[oT-Y_I^a"R;<)lJQ@\nPD>mGo-HC^<Ab\F'd'9(?<A
%0g^8129gAT4#:3sE:T+;jq;.S:2YB#X>+`fgs9RhVdc;\,VHf8FH\WiW8C?DmZ6DJcX8UcHd20<*lOkF`8<?Zl8$;*mCM2eM@80o
%0+4$dKTN<&rT2TrM$K5FJps"9I<h'/7S*HHSZkSmgRDfeZjV'5D9a1rNVGT\Sked2H<767Rp$5<*2D2V64`_N5T,VPOX!T+ET9I%
%#F&S>)Y'NK8K6K%l]4bZZf440c4*Or!.sBJ19MWFB<,\7<\c3h6[P/(-bD>9hDDR$Nd-1"cj"1-7@lL$+K5I6Ckd]V?6pJW>\PA!
%hs:iM/Q4U>l88O47QPD2cXq-&T[ESBl+hc*.)JN[)ruoN*+cKp2OHG8L=")20D&C%S7JBMAlV=+374b;oB'pI[)iH/X%@=F$Q;[H
%A\e]8IjEZ8C8.7!-%#f]p-EftK,DYp:Z3g?3k/j1JZmXq*Y=OE"?%:okq(+cj\G8T)a&OmNG^M1'l*W$-F:#U7]4)F)0M7i$Y/Lh
%-<k_^aVKoGX'gsf@WGEQR2jbY\MY@=>!gJ>$87XPB3km%^3LmOm&/H$UWf)AN!eBIRKb=M]9MEp\A:)KA6JTX]=<_rIol\`7VD).
%e#[H8e54`1228^,1hpnh@\hb\B-SC/R#I$qjic%nW&KhVO"sl+$r9P;-,U#6+?(a$q2a:$c8>d\^&HFj\WN)mDHtqF[=3MQDdVp`
%n+YD`LjAjVp:9.EhAiHBl$CR&G)%CZM9,,Z3pgN+oq")D+UhTQGI@0H=-k+kD==j7Fcb@en]@8Dr7CRWe1D.GVG((-XGW2\I<F@b
%&%?H(o6Ir`I1sotr524KPWIP9MNpq_8UbG9Bh*L,I^*To#NL2Dbq]FYlZ/1)e,*,)_6C$DneX4gE44)Dc<U>H@_,'=Qa<k_30]As
%oW38Ng5ZDl!N`C'C8PAB&csUl&s-(sO57ZEgqG<Z?H)<o3<Y>&WF#[pJC(gS>QmdW/i5VA!mJ,Qm9S*7:9j:8mf+"(nYdN<G6eku
%A:qBgF/N.l5c`tpJf\cJoh"qmmYWrp5d<CL(;OE)(a=$(fPUQB"60'%BDoj3A`9i$RBl<XYu!%g[_#P^HbaqGI97.RCuH"D:\,S+
%Up9FhJEtl9&XZ]__tI5Lf)UU:rqS'^?;O"KicXu@^4=!/:F1e8$(B)kk[qSX2'WK@28bJqi-#L:TmbWiS>TM9O"%FR<1snEb^uOI
%B3!lSIV+o5DA.2:[,V:\^A5inem@%Y>K6l-lH`U.9Q(fQ-[K$-"eTQ`a!!F/e+>,1a:Zee0Kn<_`__LdT:p*>j%"&lS@%HiUJ$T-
%VJ#ETD%Ep\mL?:BVl0G+*='SmgI]cLUts5C%gZuUd'T`0B5)+OO'+RMX)+[EbOr*!X/dM7cTgd%..$W<^#jUTG8X12I(;8*>Fb8j
%W@4Q2#ZQF1"1-[t)+V5IoaD*oV/`>IB\HAqdRFHk2>b(N`Xkg14OY>j#s<6c;.^G+ihK^Ki"hIkm)IHKp#ScSdI(,to!4hN,e403
%'A:?E-Ur7C%>%W(ZW4QHeO5[!]"\`&"u4A04n'qu*tM-5kA#V'p&#,,DcS8SaOc'3r2-6YEa%m+To0<-R+D71U71Nhqbs%iloiTL
%^86j/k.Skaq4S@-UuTZ25h65[>NT[/*a39a=\7Vl)8jjLWsgni"0NXALDTJ;cUl48e3T%:aP20Q3U"%)2mJVuU2G`UB@uSCfkepD
%BeF9^3hIT7DJO=QH+Un*`5SJ=>FmAM2iS>sm_If#)t>rUa5='@9g@Y>r#)Jd>O.O(c@_V`&+G&,Y^-4L"-9F"j<Z2LHdc_ShJ/p^
%f,co*6[ioF-+!=5=d&X-4(?=54C.VS=Ld4$6D:NkF)iLNpdd#d(1uR8CX-Nq"MYs+H%qPB%6_Qr?BO=f3k%a_%&WJ.+&bE`Oe%JH
%\3.eX1Vp0:^rQ,ieCH8<ga!qW9KWr"gB3)Vc!36#1rSbY`l;#t/Bqg,NU1iDb\kDEluq1.DSaS6S=>-M\=&=qo5nSS\)q:@Pah8L
%T?IGEE\k<B2mZ_.ZT";A.t9Lh2mT`5$Wct=a3*9+=P:;,.sna7AaafDm+m8Y]l@(R\V6ktQRjX_k;4j<1S!<N<mL>T`L1%e1T.ah
%c/*TkbT<X!G:s<u!gCi2EOfrbn^:iWHTRHlnB"o,igr11l-"i((Y7HG5?_p:>MKf$?S7U&qcfEM.qd\M48$4Do8bBg7WIo_]ma!\
%pK'7[Df+k::KM^(4keZW?T3U`NUMRBbkLRQhOs_IHFE$#fNeAQI'U;kGW"+n4QjmAc0"<Zh7da61G#.]HaUJrk/W7BpA.7b=tDiu
%)k1WPoc>FgWqEofi5=-MqX&@Ws0/k4]'Seo9&#-=o7[Wrs12P0+1s1TlTBJ$do9,VSWhjV*X'l)nE/9A:SjgYn]g,th0(<@2qK\I
%T/TgU`QNu#inS[)I]ISudh'4X?]SQ#=&2&q%Eb6dcF]@jo(fM1*dh?5ML9hSD6i!dRqkeA^"!2cdY#]/ZS+K:lf%U'G&-tmGq&[b
%TQI\c^T3KAf4\I-1srf.Kk@G9?d2ZtrSuG9d[YQl:k#\EF^_WIk]OQO?U*4gZZH.o[FoA$i*Yl*g?J%9SsjrJNM,0Xn9(T+AZ&Pr
%bWUB]e6hum?.qGhp`11?G]S#j>ei12p!)[E;RcJcEaaB7FZHu0[,):Ejh[oEopa]PiF7Ke6T1u,K/Z'+i)(K,'jb[P?!2'\-F:DY
%q5)'?g^3[-obu]Uc>?UjfC$DU/Og@[]N!_dW:"R,Q/7j][5Y4K/,\K-B,Yuh3sSF4:f$N>[X;%meZ1<cC861H==kBpIFHpCf]W-Y
%e`Fg)_tr2C%t0s;i<N_''P[]uGUN6oI<o#JW3;W(f&"uLlh6U_g/gEUJ'YTTKAUq^)]Q1R?@@..D?bF!^:)blp>QJIAqDarpTc@;
%1si88PG%D*7=i^e+(2/%-^_PNXr\7eX7>,IY<Jn'c-fJ^gHtRTq>'bgU[dP6=e33S[J$\J]MU^ND[oG;&"7jA,;,&]9#9]bpRtOO
%6g`^]Vq26?2"P=houfcb>1b:tT@lqchlE=ielkI>(q9$[@H7@P>J3Zh1/(V.Ad`P"rk"`tB"ripg0`N[qil7QPjQ2:*IP0&;!pbZ
%7]De]\k@?B._WAP'MPjEY^S`BYBF%$gQ=#UCWgMZJMu"LDfbSbGcu4r1V=d,k/_F$Upmu9Y(%6r8#XnN(Ybc`;I(A4EIIiFe`4f_
%3quN5n^a:2j*lL*Mtbh)'215O&p!>VQ&^&*n_DjHf/efUo3uk>>L5'-5jrH4q#0c/l/e9&?G1Bj'70$@8ZQ03?+q[\R^3N/jc3Mo
%RguTU]B^Q]c]7FsO!"JP!$:[RlINpZ%!0*c6Y.LTe!7DUEI::22;taXiRZPmP:0U:oj<[)A9E7G40>jpD+1IGl/OsWI"2#r\usS.
%jl%N,oYG$JZFttbSI[f*f!A/Fdfb%Z\,0]OGhfk]*IchD0":e+2*Jb>UM$TK[+@CoHul[NW7SmfmpMTL]`mh_JbpRlWB$p/O!!7B
%2r20N?EMoEZq5&9/\Z_G<=6Iq*L+3rlQC%G4'DRXTX;K/oV4kfeMKreRbDV_eCe&1]\e0>3]_SskZB(lSQsbfFn\*IHZQ_oHh6Zn
%2)%fI<_l@4Fpp\-.C+J<:cklKoUgLOn%SR"]e)DYWi&@8<S_rumVlrZCWH27T/Hk%g&ki.G$QaY5G!J&\%Y4nQg]K\SiWM'C0!q3
%pBXZhO4<4Ddc.65/akim:DDBD+I[e')'"$A7DR+4:Z5BONk\E3l6Z3?7.r;4_#aO-5,a]BFh4+L]SQa@nZfB^ksUU*c/c.")4.5J
%h<<J)rDg%gBkX/Sdbl7aj(W\D='83TZCfSC[:G\pktku\/6Za<)KNMPJm/G#4k`B2OMdm_?:*T[4cQerHErWlADDjZRqoIqH7:oe
%%UOEpOe>^PKW1=21r5)\TO^C+W*[ZSGBP7*lXlG-basl7M*j*oTZpV`FjcTD-B.,\kchk(\-4<_Dg;'\f@]&[=8NKT7eSrMbtkT0
%P\aN;Q>,pb0P0YE(WeL<aY]7c#q]k'RR9a/'K=8ga_7-k=j#9%B%UaE4o8?hLoima=-IMfdU6$D;_=)r>A&T:DM[;&(1:3BS(.'a
%@=]$%k.sM(+-@RkV(Hi/1L3POh/4"'&_>OGnM8kOY3+h&/8nqQFIJGU09[ER%h>,[UeI(pC[a[f4\sB/f@n"MGILpsp4m\oV8MW0
%HWdu1KCE;'Y<H4B0%&e7=[)<!.;u-X]ja*n-e2h*EXA=dq#YA[><5UjM]f$F?<3-&0mroAnUQXCXqt?tlF)$KhPkU+1RQ/g]3Of@
%rI\TRPHYF7>+iY5UX2I!%mI(+QK6lZI.M$c>]"V,5M)t,"!=-^=T,I.0?MK#f@=O*h>=&3mgm$u:E,p*s4+Hnc*aD+??Ko>^<?_L
%&D3^AkIOn0NtPl/)RJSsa]UKM;VTGIfC<Ym+:^I/?J=:cr2FuD!H:(h14YCu;_O]Y3'$1DTMEtmm-q%MC>nEH`cp`4LQ,[#53#Ip
%T.s_\H!)$95.'Itpt)pO<UI&a)o))hX^:u%L]Ft"VFfBPHt`6?;mk$/HAdgU7D6\`#X)-!pK6mX(S'BDJLjDV8_gSuJArUE=-`)e
%[806'2b<o,oY>@qW"+RiK%HXTkLJ$_K>ZgEr^UgD5^r@B"i'eOHE9/+T_eAO0Pp9*mXfI%3[2X5-4<nU?gI<]c\j)fmH=Y%r8>be
%oe9ZL<R6sP5Lj$08pp)mT"f^J!5rR0q\\E;O?p'kE\(^_d4n/)</hPO5;5/c,^m;=Pfc:6&O3Ha7*o,9Im)YEWo`(2(J(oQ<&$Kr
%qcJ?\hcV6s:9t?Z4+(akADB##ai6$XB%E-#Z"L0R2SXJu(QE)*lfs[^CuDG&/it,Q::<M^N'qK6HlWB[X3]\\K37F:DScH*Qr\K8
%3o"Iu"&<(h__cc4p"`.Hb2S'8O6cDh4GLZ>iMlf!;9flLZc2`4P`7Xm"7T=Zl0?l@Vu*@NSOSn3,g4$-hp7Qo?Bq.JrTgc0(1.Rb
%q>FP$-2R.).9_/6P^IF\KAqlo6#cHAp3*%`>6TTp(KO=4c@`d/0jr=qrKg5qfFf'J,gjLo>hlNQJ%E7tYd&=uS/K!7]R6unn6f[7
%s4#B__jBot?b`(ZOCV[B288tQ"]!O'bH0.+qsb7Hf^c)CpY`\`CL2C<837H4lUUXEQdaZ`HKis<kkhJ`3kk0p.QoW"qV=maU9Bbo
%H10Zi#mV8\b)r%qXf'?$-"`WM8^<8QUDQ4"8kbrp@nN^qOQ<?=n"%aeP&N,n9/3ZQb4CYDd*@aMcT5uLM-DUA/*A!)+Rs48lhJ!-
%rD\^l2Vrq4@[_+\#JXd;m-a$1Vp3lAd#Y>&iQ9VQOZe&tLs0gkBnH*0e)FZ48\2Xb+*cN^\(21]<En-jS.r@lh,#aeR-SGEg%m(g
%42(uMp'H.udS],f@C:@,>2!5,ER@NU=NZ%Q\bkmL_)i(I5LpTsHe5*-\aq'ec(lR=FYNj$H\<aD.p/p;f._6/UZtP>\S578buIOM
%`RjDHkIoEgf8HpF5)+Adh/4jX!n\)@rdgJeZ#Y"o?NR]Rra'iZHM*tTZL"-uY7L#c(MBf9g<%a[ml4#gH*)2.mc`V^_trp%LBmM4
%rR)7@k9p)hT?UZW*_,lX'Di2mXN>K1GdZJ>4>tg%U"8?bqb,=Zl.)!_BmFD=^)ED^KnX_Xe/uH_++dG1>0.#]$gZ,G[&U7OBJH%r
%<]E;S<o`.COQA>OXlOWicQ8W1T>t<Qg+a5(9:Fhmem/j5esFYMA[Vr78_gL$h(>YS`F[b?XIPTJ5GohWViA+<<o96Fq:Is'_n#X6
%"UO5ha.6#6k0o*kqL&2.@C/8nXhHgJg&4D-N3]^IjK)r62X'!"A`Rj-#'cB9(.T7\*1\XQDn\5[?,iGLEns2@eABf"i:1hZ55Vue
%^8pSTRb\M/j[SW1S\Hej>(&Kq369h$:sjZ5B<[GNq5Uq^\+T!qeD5H,W3:'Cq9blmitYc8haHY"8f\K+l<``5B_/k%Q5eVF_6;[C
%;@5Ui<]4%9IW#I0KnrAlV;<'LEI%)f/0Co'V=(Z;hs5(NVOfXgg;^]:AmB.j>u,eEP[U>bg\G*Kmb\*lij2A0Hgn39C9FJ#\r0(m
%PIt6=V5#tF0/hE?Y$R?!00`gESNN'1X)*tY?l'jpcp!a.c%OSoG/%?4I6N9j9?6_jrZ9CVB!Aeu><7'7_R"PP.NT8TRN,;:UO9.l
%!_5Vl!*X<2]0uN%)Z'8,j]i;iX34kRSs6u!0AGpQDqBCk(^G]I_@q(WHLC9<l0>eVAb40!i@lLc?a$7'SI_?,_'qa(8euKm99kZ%
%8b)84qCN]t5IRVj&"du2fjB/#a$cuuQi6LqVGV$S[R'XMH!%87UF.B!r;mtQ;SUfXqJkBJe`Q":p$D[UpCNh<2eu.\Gcg%Dls,S?
%m:uQf2lf#eYMXn?IC99[rGa><7eeGb8dfFdX822&.:BkI"L%FQfBUYmi3b3k:HhiUO1N;P>We^*8c^?mKp<["/dHsGLr+h=^.+rc
%]dA3i7.`een%cAR&&8^X*L26?i%-CChm@S1J"7si(QNM8U*PIhWhk@9?F=rsHFuF*%5dV<UR+BU6gn$Wq0"P6'fL!7pd'<fGgZTd
%k0^e'K;%_`pE&<X<2r$(:VGOtjG3&fF<ESXN/cG<XX'O1magQnDadE72+;'I\Nf&[MuY-d!?^;nHi7YL#;PXTg="f8V"#,f/-\bt
%m;;KQQHPh6]_:GnC&c_=(Z6a-pG2H^@o;J'4GL<U9Vc),90\XN:TdIc=VY;)?b;'A9kulQp!q$.8bsZ(r(1IJkho0JpBYj:%r0-d
%X]$F*lYR2K^\W$o5NoV`WdAC?bBr2,-Y1qYG4f-bZ[kM*c!.I(#Zb<Gg]t=I2':HJZ<uG%C_,fr\9nTbG#\G+hHVnOh:C)j>Zj.e
%m'V$*='ek_YT2ts3"TNJ>Ai"eHI%o*VRc)S*kqR];S@L^I(A`#7rHQ#kbmf4IIRfU[N/%2E5,Cid]mqTV%hio'd'XG/VoIaUSGA$
%,NbopUA!l2!Y:/72JS;oh9MCL_^FY=4t;8EgQg%6c`]Fk*I6Ydr*r\(0RWVo?E;5AX;6!.WCQW_X#_W-g7ogYeW3d9F7l</Ep'_E
%Ajke/knJnds5Ch@l/a/6$e1JAd*kUjFE"]bZrrB`jr8BcX`e#(X;l]!D[H7)*]j:)W*Pik+93nb(sMZNSXMa/U15S*(i7Q**IVV:
%o#WD$]cJbkQW@0hZ@lS=q:B$0pTHN\I,X)kjj`t(K6Q6"^L":1[aB7tlrL#'Qi2hC$Y.M/j'h=uh=1moK"\3R&:pT8TU`^%&Yik6
%1`JI5JRkh34OX(!%)n"0`V3`sPWMP)B^>Wee^pl`Z^NFB@Yt*4L>1d*es6*WU+JJ.ouc/E\e!"Ac`9.r%Q?0m`Vg=`dF[+Mg>_e'
%[bCNUA@:!9olrW`f;'b>QL!)e&tYM?,LS5FbI\^39P?6!!apDh-hg0&Ka64p4o"@-"7X7?`coN78O?R.^@V04<g/Ap1ul$Z<%r2r
%fc#<XS^=9+Y#@:C[pEXepUlG/ZX,d.Q"OfQ9k8ui<a2tc(U"lH4BcJGH!R/r4)b9oDl[MKh2<mD^S(b;);MiOCPDQBh&E;bClg4s
%H$-=AHlmiCD7o7aX"N#<6!+mD\2^%%b=tqo0:tIE:n1+W'/aK+D-_(o.J6<2C8?8ls1Weh\SlOA4F5@S'*bYJ0W+kN5Mdf:,SmoV
%CulBP_.\a>T^2kY!/W4irH28Ya;tU.po&+;It"`T3'E8-p-t*0+YF0;KWf]WU\<I`B^*Fsg=,V8rGd=6CLdhl+:OjE56F:FYQtZC
%oKJb"=6)VlCQE5Tl[/#aGl@VQ6@oq2kgj@J*4iu8cKUbERYuPNSU0t9ZZQJg=QM\"g#j)#Su\d@qd9G3=$D4Fq-J4WjnsFL+3\]k
%61)i!3sQL%IoNOoO5Er%T7-DGllOP>CR+,^,m;uoo6N85lKrtAq;'H(o`_^+LL'jZNU(%;]A3.ZMY>IbXSTi:h5c7XrO_7*\h3W#
%oteZ`0>>'50(2i40Q>R7%I-_10D_>lhCWQH/[i6uiPY&*X@rX*n$>7JHgg7MiJ.Z7K-!FP(\=964qRa,,H^"dpc=YV9=hMn^g#+o
%H]'RWRC>Yqc(+ZMo;,LV,c4f)DgMAg`^u+B4RD<eU[S,"a2iWYb4t?Ek:?3p^AMdW^HN+a.t#D5$9#I'W5#"Or?gbO.PMnZoG8iH
%K^PGeq.%-^&pIj`::o=7<@sO5_n7q9^YZ+/<XQG20soLGo8]M)I.TBeoGG?ZO1n3Th-Yt+kplL8_HFWW:bbuZQleYI9Ds9h]D*IT
%WhPY]i)A&L(J#S9S$lJF2f1?HJ%96WpI3h0?I=CTgl0FNJn!.:W]pds9D$K'QaX/\@3K0D^oo9\o:!!p'Le0"QCnsCnjjHkrL'']
%.LBA_J&4ml.$aFu9/<-[JqEH:7F%:EmfTNc^?7S+DT'q*0Ht^U^N(<a6D7pe$"8!EKO-B4!A=_^kf]VA_PlZ+i$mb("'AatbWJp:
%Yi%h]3uK1($>*>SKjdf2KrBU]@8RBJ$VYh7'u9_R"?K"\d?B)f!qTPlGS,&h6r@tI!%rgk;A?Y#5\H2-MIr8O#'7Zmp:E'&k7`(B
%31D=N!t3C@if^%><:[/T0Stj?qB>2*aHOM!?;uGL.4QD6n-:V$Toauh,8TfY&AZ@"f&DUD[O36j"Ne:7?JbmUW'5R3!UAf3fW$W4
%.;dfUll;SiqNq%7Vhc3*f.lP-qgFOGl-,p>SUQ^79?t1'[D/-"UL/#E$M0;dn(n];4h2n>Eg?BaVEu^S@KZf(U0q5@er5KL!Ol1`
%Xof%t$:E_&0EERi!9<QU%NG^8&i/Q1!*8_Y`Y&:B0YWe\kaXP?+\7,o%_r2/NmbJBQ\Dt0$()fZ1BV-sFUV8l"EFY!!.Z%G!sruP
%k_#Dp-n9a`8/Wlb"*sSJ;,EK""9fT,6HB=$+O].#7Zu??I8sgO9X+T8:_WqC.0(Y,7EYb:Q\@Hl`/Y6AO:[#%T]cLL3riYcr553U
%k5nH\op7N+!(A?(!t[nu@&4>r':;-Km_Pnh#@q3jINh>;E<aS3A"a!\MD-IFN$rur?lCE>JW'ng"VU$`!rO5YJ-#sE"M,sGl?a]=
%-m$7Vq4O4emh_8XlhQ,#+sCnQ6<JO>)D;/GaT-B74hUt>.8liG!;XUo74t>h"X55]6+iDDK]`I;d+DsI8rc/Y8@brk'fQC("<:cV
%a;,m,-nIn""Y6o56<Y-ld%dr_K)8gAmRUtRn<;IJrckQ[NnJkIZo77H43eL"[LPRQq>TO'kodbWq&TX\_Cbm'q&27$"KN^X9B9.4
%X+5jsH"^P!fGCau.0R^.80AK][KNIbOf+#%bs2TN:'\H`Muh0`E-K,._gp/VQ[Utu!\k<U3$l?Cmpr6ajY\E4-K340$(;\AFuhl-
%#X%NFoS(0C(AJ'j0#SspH79tNSfbd(HnhTNfWCtm6m^j9.-%/>,!eePC'gb3$YiUc@Fjt9@9P;NL1Qp:#rZe,0t>S[-83BVf=*$/
%%=*^]s7*M2o&KS:F2tiHk(7NnDtnpH+5s`?iud?m\`4do]")>34!`N>k=&</DsmD@H-c2,fKb*g\M*N-eoI!!a@n0_InlP;C5Z-,
%mE>k=qU3T7Wk%<EE8bU1'j6M%+"_00XQ3\^dmN':,d27&k\$A;ZFTG7eaR=#i4f/]U9a!-0E'H9j0`Su5g=,u+O=Dac3BRS.UC0@
%.qAVHQ/u27C!idC^uc5;RMHra;N1_L"FSE@=hs>sr+hcN`cXP#IgGNQR#&hMPN\a'R1I*:^lZ\BH90@5dmIBCQa"CpS90UU-Vu6G
%8--JBNW];3*P=(^`5!<?=A`T%0*1Vl?t-uH@fVOj!!e-!.,U^/&ZsMD!1tF<2d-sGD\.Y$J)=0MBFNC`OQsirA^OGTl0R3e>KdQ+
%_AL\bm+RiYP6?8^.=c)76m6b02s#(Zft>$]k[hJ._/Q+n#KcE!5Mc:W[he/nYQOUkF0`u1a-/;82oLJM[f4#S,Mo#*^qQWt!g.F[
%g,g,Zq+>/m,B-H]$*io*G800@,0qM_Os^in!=m1X4e01,&5N!o7UfDG]qPYi(4k!4&E]0&&Rib'TFWTn;urIR4O3I-JcFqp!#':\
%%R^jp@0^(a6?Id"UL/t`PCNaHGUHoT)(;"=H1hCE1dRe9IdnT8TQH9@Q9eP5RHI-[83M.i0<7IB^<qlG;0Bgf?Z62ZNG8Jh2=fZ`
%`%PuXX[n#u4BQmO@!ZDC/8jYKOq3[;(L]-Nl*%E%?"B)g!_g1VGO7gBV*m/4'_#-dHqG9e+S5iC'n\CUqp3$5YN%pBhWUT%`gp-R
%G`3l?9KXE).56XDk^toOiIa?0^eborJB`.\D2Jh9/\APS0Fn<llln0.r8Le`4K0$6LP7L0"Tn>3K91gbY)G/m\cHCHpf=cJ:k"!S
%,(Uf3497r#s/VHUABS<A--I.!`@rA?BONfQ#D#>p!V0\*2O^G4dL3bjTI;:^X)Xe33o?NP#?<9sk/@ADU5/k2dTu+Ue/2#%2UYkk
%-mc[%(^N2bN"=&G)lb"dZ7q-IC.@:'J5Z5oAZ.pZ%[9k'H\:Y"CdSRD75'65cD"f^RH?nV)k>5ASQiZF!CgKC7S"(*JUp9L!.[\@
%m$sG5;LF-Mi!N%T/t),>k*!S$@),7?$@jQt#uD='$oD6>?k,7,=Vf#7!KUcWXFOjrKK2<i!AhDd&Ao+V7n!o&I>$1+QBQ!Argp;<
%H3X_I@hap,0E=Hd`&Q+!;:6DY?,9$]!O.l$Nhgk)_7o"i(Dr1<9GBK(3P\1G:c^.^OVJQ<"7HSeWtD(X#n3r+\A1@@3>bdAKPbC2
%n6[M3\\V*_PgU]8&P.et_l#a;8gck.)GXg4c\Iq6]6PW]cA35f!#+`+I:.2c!J3TIKV'8*FFb6f^a/9@QY\T^4<PbFWPUGVd*_r]
%g"rA>PqPVY'h24YNoK7J?BM&AMZe\`(S8"XR0)n4CtG%dme\i"o[sKYZP5^BLY3iW2"U@P]SK,gE&1l)@<RMEnaI&t`1@*n[-X_>
%n2lU9K&.2.\5*EFJtZdB(m@io/)W'M&.];W*!iK$Y["VH!`T6n#RqLP!C;+10aJu1M?)S_F;+<1Kb=WF%8hX+5s2:n11FZ!d=&A?
%G+&F>K:t4kE<>q1#>KnI=&X%M@T!:3T'[YRNb^K"?Bg.382o#F!.b:BM/J%tMoZU"NX?Hp6qh[c69q=Mm/f5kkfAMP8pEZin6cJE
%$CoV'iB5H8]:bBa>*+7u$Va]ZX2H5&VQhf_Or0hT$-=#@F[q8'ofeS5,7'KZOiVu(J4u'lAmh,4+Z87Cc4<r9;L1&0j,>)nh&Nb5
%)$CjKB3_f*RL4TUm%%uN&@8KNI82R&JNcAe#98aT'S_/[M?PcBXJ\n)Bh$q"7q74u63]V>-nhS49c0118HoXm$dG<8Q3U7!fGp_@
%!gTVX$<U5N"EiWAp7kP1Jp<#Cl)6<=$%ti2=s+,26("Prf2KE5&0C*gjdm2"S5EJ;<G).op[a#.pPYCC:gUJkUD>2D;TZ_n&6rd?
%WFS]gRpAZp3>ps`%Rlojj<^J[7TJBo+@/?1oi?ae$iij)"&;H*k^F_?>'GK]k7bec*"!6QkR")AP!/H)d"A%Y&/flE0*&0*PR;iP
%T[;?t@IT5';K?qr0RKUKbX0+1Qe<A^+;H6!4,BkJch!\JAEI:KCdfHP0*=&l$;<O!Lo!B"kg<D'M5:8Q49.s<$F.3tEMM3P@X9<^
%/")*9T_$T\9WpL9X?uV;C$>JY`(R:pkqX4,0-ml`PfGRMPfnaH53NA+W>Hrn6ni0URZkI`D'cX0'5k->6:OEXTUnUQ$C0ilE,JfH
%BetieU(E9G:8&nc"CfoY&1Pg\ig.]1o/M5!1:WW&L090P[.[Jp`:1!U9SX0t9@SCj!H"MR4OO31r`>h+d'=cj1=OAj'+9o;djuDg
%Z6fSMOiTZDM!g\'iCNI568Bkt"IM(aiDBl'6Hc-M.#CI*OZOfAPVBr'hut/90Ohl7?%Q5;J[7\B9sD&'RLVs19U]##0a^T>V#,jV
%W;o8:A+nT68/2+Y$8jaRi=H%k[>$(qX"b170gnglBndcNRWa@/6CUuV+JQ-O8/qWoLUnQ4RF?=aOFDeKPj<nA&#U0%hA],O8O<fZ
%#-,SHB28ea:f^ds+GeAiNMNp%.8D#.UN_e:<JIA,a?6@^R)/t@E2CJIg)rG_+XpNFVEr?-m1/,X"/A2,I3PZ]E2\:rD#>YJ.G,m&
%TdE<`A^H+k>$@G%iM:1Y^#Q*WKk[BJR7>D1ap\q%-0.[*e+Kr!4uT6[j%bu7KR%1cTa8'H!IO5RnrQ0-[=08:6Z+bSn.kIPBG3jI
%'V-s'4NoT6,,H%d_RW2W6DZ-u>7G.L7"G%5M7E^[\(1S7T(+(iTd&C;b_WkYP)]`$MI[&(m_B1X5g0ie<aQ0fcVQr3*K2LI)FAQm
%R]&^FI@*'X0e;N#o5hU9+k'=34l`a3LrD]^f%8-11rE3SBnd7,?m5VcO:PK'B;AQ5VSFU>.2$?7!%CV_TMRs7OU(:ur,P+7h#8]f
%eFU&U-@_%08$,%63FL9@TRiJZ.SsQ^=ic<](eS*OkL4$LfZ$TIN7D<&,e4<c<$8/L,jNSWEXs^ZQR"A/pKSgsd7VD4k.qHm]6RM=
%)G@%?pqU/8O4>(?W=+S/kEKRM<#S8VOSKcEa-k084jJ/G*GIMB@M%NRVO<bj2I)i2r.N+U5fEgj&Ju927uDXOF:m4A[Xc<o+IAn+
%cpL,mL'($/"qEU7c=&8?'F7.C#iZK;&9BC)on+e@["V"!ckof88<bQRLe)2h*FW(j6>YHaR:_?4Oe+Th5mJ8J/rmJ)-&c>.K7cX)
%N_GS)KUX2[1La47#d""L3X?*";W6P9#*6Pf92JrK+NgX0+s/sLXBd.a_p]nF'Yn</XF!EEj;VB`[L3)B9r-RSJP]'MU19$:i-$G5
%[q1=;1pOB<TV(OP1CN9tCB4\O%/WW89XLr'b%I\OpUCE^4OC2U<\<>E4n*Bten#muR(\Y-!1g4)i`$%S]BLbk3oFFP3!(8o2^V<;
%!,'<&%u'-Rnn7<$OqkujBf1P/1&U)M[a5#5%saV30ed1hWm:L7TRm.(`#6&c(sZ6u+3?eF'Gq#<OZK;?N&238opHi(j=P[Ec76\g
%*6BLl7:pRggt1;K<HHSK9Al7a-!.OFd:jF3fi[E69AFDsC8D"A=7pRW9a+r@"p<RP#:KeT=0])uA;b:l:f!dObp[&[.qbV5lU=TA
%\aiS[*AT'F*i1<$4*D+TFPY1\Dc-c>$[,B"1)U(Cg<(BI,J>Bmh\1S)E1!;!M`Un`'C?o89*$,R@<*j=g4DE!AhtD.NHsaO:Otee
%O0T<h>%KOj&DHs-ToH6!b,-3$pI7\%dNBGmPQEg=Vr:>*/OE-m,]j5IJ[cl#Kt4"7nTf.1!_O&c=;##^B"2N>#"YITTe8Wi>%JOI
%&;80T<08@kTQ-VKZg8t0%)G*W&3ieX.KNV^)d!4fkU8e(nYC*/ZsaM[Z3Gaj$>P8G0_Y7;j*BU4KKd^K.,)l>@^M1CDZdr;HFoG>
%>)KV3_A#5hj901DA.tGV%e,P[+XC_^&]&T/;TFV1(M\,QUfLCS4VE8_*Mll2fec<B'-]c>NBj%M6,=$?7/D4N-o%)S1(7Pu)$Vd(
%[$rFIPM@JsBY%jS-B[@7NDBZWjQcA?l'"-ZDZUd-ggU..!HEGt$HI&t;MP]!^I]P#691'in9#1hi]((+`c4UT=iUh=ikk5TK[cFS
%N8Fb'nt7#n7:jV1(*Z8TDF3UG20GC=/>R,\[g=1oZ$b8B![%u=H;+AFCk>Q39`P2o)J-T/OW6&WY6c@5a'lY.J5FZGj#$k!HQICD
%-A6@"qFq`gnXP+dPcMoN:'dZL@d?#\WHG97Rt*1dKL+1-!h`qPms%Dp;r:'F(.--cN8Fc6+TE_[RumNWnYF6E_CH_j6:C)t+dF8a
%3dqa*3Ac!sm5J0cYN1O*Y31HWM?97:S.I*&9KacA&EP).S;9%s.-inPd\I=(V'/)H1X@PEA-t-W.I/seUbONC*%,4RJ7T`Kga;Dq
%=iZABdQ$&pH"OrEH#'#03(Y)=da%]c!t+^<]<(kN"e*^@BOos'H<;R)/+rG22U%Ho9E:dl.$JZZ6mrT,G/`\#F+B#0"o"OTM0I<[
%!l3mPJ\=T'+iFg+PfCt<GM6#Sn*(4))$le&B/24Be=;'[K;V4q4nB*2UY,YJjb-kpJ2!Z[3IUZ<kb03X4_MY=Gp"mC+!;Ho9c%\@
%[Z;lN+iY(ETJ6"I77?-JnCAXGPieJ!G#5K*Pl%.*MhP-Mfr$WH]k=F6H0e.A>5;ul$3;,u_(cbWCl'4N]4b*7Ug'4c,4ob&-PVu#
%Am8-B`8K>(Xob:%+,OmX,W1.]VUuRdb6$5t#C(uhi"QNX-XDsn]MRk4!Gq%G0*ps!gJ=1u1-[O&H'Sb"Vu;QCb7"d6U^Z;p<9tnM
%8@Jbm/Y"oJgVae@G0c2QqboAqPBZc9<3gmeOuW]#_0Fr0:DX:4/1h:H`0,rB?*]N9X5&n2h,%%Kn@TM6fpO@]a""=0E.f&u-hHXo
%SDWMW9pO;=SU[GUfbH8_e1VimK)Pi'Kk5cg7pgcac'#GXe;ap+UiQC?K%[,tQU,<J<*6D"G>,>H#J3f\1#D'#G:W/'!9e!XStQMR
%9Y2FaK:,EVXCdk]BK:Q=00@f^?8]KS#lg(b"?50)nL#-MO5E4KM"Rr#+_IJq`&YfkM-sgU%*kt"le]l4gUEG(`rP0oS-$AC$ajn+
%iJATbD5$ZQX[kWWT,ImqdTM48?`_I`.+#t<rHJhudf(K&nQ9&t6&NI9h\]T4I>USCK3+Ff0)BZu?A//kQEE"?*aj^FZn%#C=W\_'
%=6Us0b=F^a.7f4N0U*qn!!SKI3hIOEGd@apTMQ_R@\FOnGf?iDk@5cs=Z[%CYkSOnO^Q.qI;U6/V8DOoBp4A0bCN$2HQ7TDO)ZMl
%T`fZ0&IaP.CPW0Uc;>/WN>%ag8tF#L*,Hsp:nNk>R)qcR6CmrQ8!tPsGkOQkW>g57""(-%B\*8N3:#lko)S*2<1"&N&0(#uHMXSe
%JiX$dE'$AtA_%\=7aYi+]6MQc!,1sPnmGGL9qRX0L!Ouf:+OckolHc^H_u]%;/J.!JQ6&B2QABgbe72=4&%1X_Fk1H'jr?o&VatM
%&k`:A4FAD+UN899$i/Ro?V"oA;`>7*(@YT\(sWJf1ZOkk^k6D!9K[o,,U*8g@Nb10(e5%?Oq7$joW3/S%:+'JK/cZiW%m67s/"cY
%cTKtD-_O;NXok71Sn')?;sk=BVa@@sXRj*/C5sZ1,XY\T<t$qSL&0:m@_i%"*marFF+FqOLh(+-n,SZ1^lfC2"r)Mr8cb1o"aP>`
%#t"q!+!^^e.i&9q'SV\'0Z%tjgMNaAEZ,-'UUT&Mb/pO,JT#Q9(51fIG[q#"@/^8"'j_g!;G6qkcZQo'm>4j[^<j\@ehgiFfGFB$
%2l'Ct:S(-E8<b^%K9/Vh*1;>-\#F1pSpbuuHElUWOZ6*4WAT6WI3M9Cl6.th.Y3-^4U4IS6coWX8.o,o+=uahbCPfCl12:0AV(XK
%#m<$ZAg;e-r8F-.6PPPGQtK4C1IUj0(hh0Ko=uaW_V>/S,<O;J+DD1WjGD4dp&])^+K;1H;a0i0)@.b;V1#GlZ4_tskt+h3D'?&X
%!Y?fXOb?hpOJWiWTMqaEj1%udhT-*2Z8quR"d<fKZTYsD5bo?=:iq2L6*XaI-m@j.^3L%TiWu222_*7e4K\GL4Y<@$*f1I'hP&#)
%iDEM&-Po>UCPAPo0L)>Q&&FbYG*JOpfL""jD%Hkso+#UEoa$d7H,1D9<+7+Cpf\N1(h^3*9_?4YP7^@m>'&uFWQ5JjFS:=<D=L:'
%SeY?dpR+-UickRBiujNX!:*!7DBU,[T$g:uF\;b#*RHUmeW?HGOA"k)kok<6\-AH-X.u4u15i`%"jrdsR1;i//LZ/N-Cc:.&70#s
%dCKddJRt^G=N(UN,T)j.#'d?hl9.Q<?5ZgE:3P/k92nMcAp[)l3]A:(&pK+QE<oF[&kV7hH-Fp,";G<j)NO)u,mF,VT-`$_+g(7@
%Mn8[?$.nk;W%66>+R484$"_BO;&:%C^0sp_,T_SJ]fKJ42S0XN@:ZZH[%ReZ1;t7="T&49MOg]=OsCBi%-]MS/hGK[6iLYK(l=FM
%+g$fopirJ=Y<?9I"j3>B%>0</:t11s\.P</kq4OX89%+RHg0=If#Hn^!]M"?h9dmmKI8tDM-4AZ48Z,X,Z7*G'4p'bk$]FLke?1Z
%*DuVOXPVR,@[@QQ]fd*<&f$'N+%0au,V*,mL[%O7g&iho&GSrU,s6P<WPYtuLBUeVNqNS`8q"bP8c<h2jOlQ?83u<*#':dIj"pKF
%!ER!g@e9b.cVMDE[H9YZ#6<'W"bGuP@NtFuLsU]:\BoItEM">?Z912t\/JIVi&l'hmOP(UWbKIS]RY'_cZI>5d6i6ol;JEa$bSC1
%kGO4<')=q%nSo_BhJ7hk=9kc&WdpkA7UCpJ)bE*FKP.<iK*;DQ/h25YI%r)V.\ZM[ICbFH#S@Spa&@e_QBS/Rc`Su[TNqd:C?n7$
%Z62SD5pTT<0U*gb_AWe;Gke@::-:RU_Io`_P<S5>)C//NO[T_%ob71JGc_1BQ$3!*3gM-eW2:N"9J<NbSHq%Yk`,m3S,3hLM'dUK
%o+@@V.cP'7e0N@j$kp(-"U.Ffbo&^M#T=R+1mSdMJNat$Le2'T5SE'?EIORag&r,,;1GTe-Oo$sogKG3SE>J9R1q.od2bTfMpG!6
%2<<6B0B-IuR=m.UTs+Q)TsJ8Oh0h+&G9??,66aY?UB.q&BL'['ij7h7UU!rZP&8/&l6+bL/FF"<D,e)=g"f-!]N3<9.Xh/XCa7O&
%GhHq571]@!A</F#Lq*=UQ)a71@OU.pgPC%TQ*ZGeQh\iaU;Gp82O\^^A/f*cOCT<,^'eG[;<f*6aYmT[[`E?]Y1ubF;<lV9]8u+%
%h+%QfpX*[Ah/PlTNDmp=_kS<E^VA:tEC@d*\ldL/M%["a"DPLt=]0G1JEUkYH)GblMlOS?Bk1>Ji'Cc5fl3,^25R4OmN]XZ6Sj,'
%SWDJpl/EfV9]TW>::Uf>YC(]2*Wf\L)IVC,*^U'SRm#1I!$Wf3Wa\QONnd,[16/Z+`\g&1n+f?[JQH[8,g[2>=mN-o<Sme4`X!t,
%_,;`g!f0d&WF+d[QU/!67N@@4%lH#f6(>Su$ENg_M9=DVHRjN:G)6'>]RWQIU4h)?kYNZg$eEW=m:-\5XM)0j("$l5=t2-P6;rOr
%iL#&p9nX83N1TE`_=6GED((-5eq6=^U#1qoS#[ZlP6W5$@aKh`k`9]lmc\h`1dsg^?=>]GdOh,B&RpNO=qE"m?-VC9@ogTOeT"Mb
%jjS'9Y3QiOA*3mP)MF[mq7VBOIH4QGB/HKqZ+b@h'ibY#$3X$#F'KuFgW=M?WU#'[Z3q..V;aOt6=gqtNM+^HD0@-q2=>RB93!08
%JZa,sZ4aKdQ1;iTSFrYgU/H<=jRB!@2CM=ZN:0Rcq^Fln/m$ca[?6-,Y&-P8"!D]$1Kg3s2*9)>'fNYHQeK3.B8Jp9PkqO)?AVbU
%Z$"J+;e0quXbdL/2'#^'&^;P@;!kSiUu9Al$&EKei_$#\C5GDNcm)gPd@*B<#m)"d.2,H[)puS3c(W67iC^>O:J2RZp<jc\oJ>^j
%PLQ!g9Ee$U0!<Bl0GFsmEg87^`:Oiq)5K6i:_cY*(-F#DNXlfZU2M5M`D(AnAo_,>nG0F]P`a@5%HVR06psQF%b$^<N'\cQ!g\9j
%IQs]amDf7Xj5Q7m6EJA?PeKY$_KjH]Nj!M\Qk2`OL!DG]\qlY_@Q@ETUihmq'&qGN+q1;p.=\=1KC-Vc8mnCORTh"n[4lecS7a%5
%CJ]Ca:.=pG1n.mYMIshL.QgYg#UN>YK\'!F(0lTV<dI6TrG6/)ULpm#eBY\,`JdAW225*Td[YVni.PDQY([b,Vt=g?8Jh"D]KEA8
%S72[2c7l3*cT3S.n+BF[0O;'j"6^.Ne$WgdhepeG+=#.XA3(pZg'X6!dY_:uGa))LYWtm`?p%$t0knHj,n[9/KdtRsO[#iW$`V39
%BTi2D6d^U)l"^LN=aPR\(&SA0.a-Gq\U<edKG]VTiNo.EYaB4(X6[L&h?*eTO74#;DF!JQ/q`4f]3A7"Rl4,cnJRthl7i(`A;\XV
%*?>9FNCLiG3<Yl?Pp>^ap8'`@.hWs&6K91b&[8J;5)dIF`ndM*ag"9dL45;MALPI31fP]44U,UQLSW7(=_5UP5jskBr<YAYcmI2L
%.(a=o^N7E7^QOt7ntqcp`WH`cia&&*Q,]#bI'cX>+\85/N1,I%jhT=\dLO?KbT,G[ic5F\9gK+ZQ1RcmgG&qD4(`-BA^[tpI+ND7
%?SH(X^4&.j`rQ2a'f(\%SkA;"3(oH[K',CfP6$5GMc/0TP9Ij(0_5?]<6H-B_6Zt\A/,rp=H?dGN2>9nq5%^=@[XXo^u7;09FjSk
%Ro6,t)6]ri>u8$S'YcBn\*^NIVc.u82Gk1&j0R%PKqqsn81uetkg?MGAR:!2RWh1KrCSWb=/'t:8r(aHpeX^'5a28%k6U[U$Hif%
%e-hGFf*[R74C^mH/lRtf$P2ceoXK.F>r:`4iTm&Uoe7Lq+##YT7NTWen*]t242+l`Q]5Q3^nh-rqX$,1%#FON5Sa+%g#UlH;&cbI
%AS&8ZTkg*n/s+%N%A=(nn#$RJHutsfN)?&#Jq3Xg_>kJUDa:%pbr!=XcZG<GShfSG/0`-)Ii)iU.34X8dn3.^%4EOT-jaoV3_Rr;
%dhTQ_)3F%G\,G5N"*u=T+;H2SKgm*/.hn9U$D#bG9?iU5;5t-pk]:bcN;XJ>4-@h'>'m>)jlAU\qNXX4a]@QS(-!e8b,\@RJ-3&a
%-sK!sfgR5nW\@"=;21n+?PR6o"D'nID"bE&#.#*+`4%5GYm%*O$9g#ZS57O=)\B_Q"4IMMN$f6_]SUhG<9Rkp\O+4H`$dDLC*]HB
%5s9ULIKhtdisA6h=+CE7aAPu[MU..g44#:H3QO?@5o,0BJ0,]F#`J@QnfrR%lTDM(RCF[HRE/Mm3OjF'30&rQXWhf*NJlfDhN8lj
%E">O5,(5S"19N78LM)#R:)G3HdF&m9;92_XK'8J_hMdWl&>8@JlWNlGqt1OE511DLboIbpkjG5I3BLrCIWo$,7P73`%ZL%fPG/P7
%WjacbOBuk`J2$jc>(g[heHPa_Lh>ep!T>u[KLXlJNccIh,m2D;@.)IT+H>UQ)!Vdc-1r.6]<G,PDskJ?:pLF<nQc^G9j1%4X2k<5
%m5m<99-MD,9Zl&m),,7pOWX6"n0C9Wg_;tX3hRmHs&t"L%`ibI*?QdjZPA?A*<S9h/c;=RH83!.=niIkWo:804K/]Z5YSr%c=XLO
%I(>2F8STbd8W[R`>?I`%KghoJi&T0[=In0OcVA5uJo#00^JlSV`3`9VL!2Qgd&F./R5/sG@ts-229@Z+0sBVlL>9H7_;r$kI7Hu/
%[R.W-AlJ1[[1s$3KM?<;k%:A[D;gs+Ke4UtW@apVU)'-M$M""IaPfBA$;VAs3iO\6d:o#oCuJm&bCRacgLhn?'q3$/-aSLL(8\"4
%&-XfpPLL?\`q\SYg;4XIA*@SN4sUijgj(6GGCm\n><>:9"mHfN&K^&BOE-2l%5d6F]r=_C+l3&AZ"<a:1<-:RM(RErl/oB?F*ZO&
%[?-/dnlqRc7*`Gi`TFStAY/+EfrPYRJY7EcSo)F*JB0H&GqG6^X@f^B/RgX&VR;NN`'u)W($bNF-0m8^<Z,,qo_SgG-c5UB,(W'Z
%:m1mF!mK>J7[S\q\FAS)+22ZF1#"GaN4-\$=@qEB!sXf;8;I:f!_?P`@YlXbR9H`IU9@I!=ouLpIcDtCl8RE;r,/pK60$;$d-,YX
%fIssjNs]OuGVJLWj20`epD60#;po)lY4f/MkE#WZ=\DEO~>
%AI9_PrivateDataEnd
