%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Quiz_Jeopardy_GB.eps
%%Creator: Adobe Illustrator(R) 12
%%AI8_CreatorVersion: 12.0.1
%AI9_PrintingDataBegin
%%For: Alice aus dem Wunderland
%%CreationDate: 4/12/2007
%%BoundingBox: 0 0 473 305
%%HiResBoundingBox: 0 0 473 305
%%CropBox: 0 0 473 305
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%+ procset Adobe_CoolType_Core 2.23 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x204 R agm 4.3861 ct 5.530
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 70 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/set_gvm
{
	currentglobal exch setglobal
}bdf
/reset_gvm
{
	setglobal
}bdf
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/thold_halftone
{ 
	level3
		{sethalftone currenthalftone}
		{
			dup /HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}
			{
				begin
				Width Height mul {
					Thresholds read {pop} if
				} repeat
				end
				currenthalftone
			} ifelse
		}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			/srcDataStrs [ imageDict begin
				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
				{
					Width Decode length 2 div mul cvi string
				} repeat
				end ] def		
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put
			imageDict /Decode [0 1] put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		DataSource 0 get type
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch get exec length exch 0 ne {pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup /filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type /dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{ 
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		dup /CSDBase known {
			/CSDBase get /CSD get_res /Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5 {cleartomark} bind def
}{
	/pdfmark_5 {pdfmark} bind def
}ifelse
/ReadBypdfmark_5
{
	2 dict begin
	/makerString exch def string /tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
		pop pop cleartomark exit
		}{
			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5
		} ifelse
	}loop
	end
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.
%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for
%% definitions of some fundamental procedures.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 201 dict dup begin put
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_in_pattern false def
/AGMCORE_currentpagedevice nd
/knockout_unitsq nd
currentglobal true setglobal
[/CSA /Gradient /Procedure]
{
	/Generic /Category findresource dup length dict copy /Category defineresource pop
} forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_&setoverprint /setoverprint ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not AGMCORE_currentpagedevice/OverrideSeparations known and
						{
							AGMCORE_currentpagedevice/OverrideSeparations get
							{
								/HqnSpots /ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
						}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace
							false
							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup (Cyan) eq exch /Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup (Magenta) eq exch /Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup (Yellow) eq exch /Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup (Black) eq exch /Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type /dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading /AGMCORE_ignoreshade known
					currentdict end exch
					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where {
						begin
						dup 0 get dup /Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[ 
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get [ 
									exch {
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									} forall 
								] 1 xpt
							}if
						}ifelse
						end
					} if
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin /clonedict load end def
	/clonearray Adobe_AGM_Utils begin /clonearray load end def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/getrampcolor
	{ 
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type /stringtype eq {indx get} if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		} for
		ColorSpaceFamily /Separation eq 
		{sep}
		{
			ColorSpaceFamily /DeviceN eq
			{devn} {setcolor}ifelse
		}ifelse
	} bdf
	/sssetbackground {aload pop setcolor} bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		c1x c2x eq
		{
			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
		} ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			/max { 2 copy gt { pop } {exch pop} ifelse } bdf
			/min { 2 copy lt { pop } {exch pop} ifelse } bdf
			rampdict begin
			40 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}
						{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{ /theta 89.99 def}
							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}
							{
								/L1maxX 0 def
								/L2maxX 0 def
							} ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						} ifelse
					} ifelse
				} ifelse
			} if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt { exch } if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			} if
		} if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		newpath
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}
		{
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			} repeat
			pop
		} ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}
			{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}
				{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}
					{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{ /theta 89.99 def}
						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}
						{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					} ifelse
				} ifelse
			} ifelse
		} if
		grestore
		grestore
		end
		end
		end
		} ifelse
	} bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where {pop /setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			newpath
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			newpath
		} if
		x1 x2 eq
		{
			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
		}
		{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{ pathbbox } stopped
		{ 0 0 0 0 } if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}
		{
			rampdict begin
			20 dict begin
			background length 0 gt { background sssetbackground gsave clippath fill grestore } if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt { exch } if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				} if
			} if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				} if
			} if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling { round cvi } if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			} repeat
			pop
			ext1 {
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				} if
			} if
			grestore
			grestore
			end
			end
			end
		} ifelse
	} bdf
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
/capture_currentpagedevice {
	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf
} def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup //Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name /MappedCSA xdf}ifelse
} def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup () eq exch (All) eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc {setcolor} bdf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		7 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {
					/AliasedColorants false def
					exit
				}
				{
					new_LookupTables names_index get 0 get null eq {
						dup /Names get names_index get /name xdf
						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
						or or or not {
							/AliasedColorants false def
							exit
						} if
					} if
				} ifelse
			} for
			lut_entry_len 1 eq {
				/AliasedColorants false def
			} if
			AliasedColorants {
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	dup not {
		CSA map_csa
	} if
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants {
				/currentspotalias current_spot_alias def
				false set_spot_alias
			} if
			Names {
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				/names_index names_index 1 add def
			} forall
			AvoidAliasedColorants {
				currentspotalias set_spot_alias
			} if
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
 					0 0 0 0 /setcmykcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				{setcolor} bdf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSDBase known {
			CSDBase /CSD get_res begin
			currentdict /Names known {
				currentdict devncs
			}{
				1 currentdict sepcs
			} ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt /Names where {pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal {
					/tableIndex xdf
					Lookup dup type /stringtype eq {
						compCnt tableIndex map_index
					}{
						exec
					} ifelse
					/Names where {
						pop setdevicencolor
					}{
						setsepcolor
					} ifelse
					currentgray
					tableIndex exch
					HiVal mul cvi 
					NewLookup 3 1 roll put
				} for
				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
				end
			}{
				level3
				{
					currentdict /Names known {
						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt
					} ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict /Names known {
						Lookup dup type /stringtype eq
							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
					}{
						Lookup dup type /stringtype eq
							{/exch cvx /get cvx 255 /div cvx}
							{/exec cvx}ifelse
							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx
					} ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			} ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 
			begin
			CSDBase /CSD get_res begin
			currentdict /Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
			end
		}{
			/Lookup get 4 3 -1 roll map_index setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {
			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup /CSD eq {
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	} ifelse
}def
/del_res
{
	{
		aload pop exch
		dup /CSD eq {
			pop 
			{
				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef
			}forall
		}{
			exch
			{
				1 index undefineresource
			}forall
			pop
		} ifelse
	} forall
}def
/get_res
{
	dup /CSD eq {
		pop
		dup type dup /nametype eq exch /stringtype eq or {
			AGMCORE_CSD_cache exch get
		} if
	}{
		findresource
	} ifelse
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		/CSA get_res
	} if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	clonedict
	begin
	/OldPaintProc /PaintProc load def
	/PaintProc
	{
		mark exch
		dup /OldPaintProc get stopped
		{closefile restore end} if
		cleartomark
	}  def
	end
  } {pop} ifelse
} def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	1 index dup /ID get exch /Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}{null}ifelse
	Intent ne {
		Intent /ColorRendering {findresource} stopped
		{
			pop pop systemdict /findcolorrendering known
			{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				true
			}
			{false} ifelse
		}
		{true} ifelse
		{
			dup begin
			currentdict /TransformPQR known {
				currentdict /TransformPQR get aload pop
				3 {{} eq 3 1 roll} repeat or or
			}
			{true} ifelse
			currentdict /MatrixPQR known {
				currentdict /MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true} ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR [
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind
				] def
				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def
				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def
				currentdict end
			} if
			setcolorrendering_opt
		} if		
	}if
} def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict /ColorRendering known{
			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0} ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get /CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		currentdict/TintProc known currentdict/CSA known and 3 1 roll
		//Adobe_AGM_Core begin
		dup /customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			4 -1 roll{
				exch pop /sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
			pop
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
/set_def_ht
{
	AGMCORE_def_ht sethalftone
} def
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.25 0
%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.25 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.25 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict /Adobe_CoolType_Data 2 copy known not
	 { 2 copy 10 dict put }
if
get
	 begin
	 /@opStackCountByLevel 32 dict def
	 /@opStackLevel 0 def
	 /@dictStackCountByLevel 32 dict def
	 /@dictStackLevel 0 def
	 end
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup /args
			7 index
			5 add array put
			put get
			}
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{ pop count }
			if
			dup /argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					 { (*) { pop stop } 128 string /Category resourceforall }
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup
					 {
						  /@shouldNotDisappearDictValue known
								{
										  {
												end
												currentdict 1 index eq
													 { pop exit }
												if
										  }
									 loop
								}
						  if
					 }
				if
				end
		}
		{ false }
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
		currentglobal false setglobal
	  userdict /Adobe_CoolType_Data 2 copy known not
		  { 2 copy 10 dict put }
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0
%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.
%%Version: 1.21 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 27 add dict copy }
	{ 27 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
				mark
				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put
					 {
					 ((Hex) 57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
					 }
				stopped
					 {
					 cleartomark
					 Adobe_CoolType_Utility /@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						  {
						  2 copy get 3 index eq
								{ 1 index length exch sub 1 sub { end } repeat exit }
								{ pop }
						  ifelse
						  }
					 for
					 pop pop
					 Adobe_CoolType_Utility /@eexecStartData get eexec
					 }
					 { cleartomark }
				ifelse
			} }
			{ {
				Adobe_CoolType_Utility /@eexecStartData get eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/AGMIMG_flushfilters
{
	dup type /arraytype ne
		{1 array astore}if
	aload length
		{
		dup type /filetype eq
			{
			dup status 1 index currentfile ne and
				{dup flushfile closefile}
				{pop}
			ifelse
			}{pop}ifelse
		} repeat
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator /imagemask eq{
 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									[ /Separation Name [/DeviceGray]
	 									{ 
	 										sep_colorspace_proc AGMCORE_get_ink_data
											1 exch sub
	 									} bind
										] AGMCORE_&setcolorspace
										/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0 () /SubFileDecode filter
				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0 () /SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx
			}for
		/convProc load /exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2 /add cvx /index cvx
			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx
			}for
	]bind cvx 0 () /SubFileDecode filter
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt {1 add 2 div cvi}{exit}ifelse
			} loop
			string
		} repeat
		end ] def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [ [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA get_csa_by_name 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							devn_alt_datasource
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get get_csa_by_name
				}{
					/Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li/>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Quiz_Jeopardy</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-12T11:15:25+02:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-12T11:15:25+02:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-12T11:15:25+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>168</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8An2ePvZOxVdEQJATk4Hdj&#xA;LkisyWp2KoWQguxHjmLLm3DktyKXYq7FXYq7FXYq7FXYq4Kx6A4aKLcQR1xVEQhSg9jl+MWGEubc&#xA;wBjNe3TDkGyI81GH+8GU4+bOXJE5ktSGn/vDmPk5tseSzK2TsVdirsVbVGboMkIkoJXejJ4ZLwyj&#xA;iCwgg0IocgRSXYEuxV2KuxV1MKG+JHXDS21TAqqszAUO+WDIQxMXNMzCg2xlkJURUqZWydTFWwjH&#xA;oK4QCVtf6EnhkvDLHiDvQk8MfDK8QWFGHUEZEghlbVMCupiqpGhIJAqegyyEWJLZaVG3OJMgV2Ku&#xA;VV136HLiAQwukNVo2IB6Zj2Yls5tM7N1O2JkSoFKtun7R+QyzFHqxkVY0AqemWlghHPJifHMWRst&#xA;oXCMCnKor37ZLh70W1JHwPWoPTGUKSDaymQS2BUgeOEBVdoCe9AOi5ccZLASWwEhuPY5HGd6TJUm&#xA;QFCe43GWZBYYxO6FpmM2OpirqYq6mKqvqOOg4jwplnGQxoK0T8xv1HXLYSthIUtlhBBKihGCcO5M&#xA;ZIemUNjqYq6mKqiRinNvsj8cnGPUsSXGVui/COwwmZ6LwuEsg71wCZXhCvG4cV79xl0ZWwIpcRXr&#xA;kqQoSw8fiXp3GUzhW4Zxko0ypmqRScKgioOWQlTEi3OxkYAD5YJHiKgUiQKD5ZkU1oR92J8TmLLc&#xA;tocicmA+/DGNlSaRWyjwAzJ5NSHkkLbDZconO2wClOmVslWPk5AY/Cu+Wxs8+jA7NTOGIp0GCcrT&#xA;EUp0ytk3TFCp67UpTfxy3xCx4W7dDUt9AxxR6rIr5jRCO5yeQ0GMeaGpmO2upirqYq6mKoucD0zX&#xA;r2zKyDZqjzWW4+M/LK8Q3ZTV6ZfTWg6ZiNzVMVbpjSq7xE8UH2R1OXShdBrEnG2WmxNcfCC8agyF&#xA;SQeoyoimwFfBtIB45LHzYy5ImmZDW4qCKHviQtoMrQkeGYhDdbVMVV4EABc/Rl2OPVhIrZZeWy9P&#xA;15Gc75JiFKmVsla3AqflluIMJrZXLn/JHTITlbIClOmRS6mKqiI5Vgo275OMSQWJKnTIMnUxV1MV&#xA;bVakDxxAtSUSzLGoH3DMgkRDUN0OxLGpygm2wLaYEupirqYq6mKryWPU1yR3YoiKPiu/U9cyIQoM&#xA;JG3SvxWnc9MZmgsQhqZj02OpjSt0xpUWpBAI75lDdpLeGlQ01DIcx8nNsjyahH7wYIDdZckVmTTW&#xA;7GlQjj42+ZzFkN20LaYKSqcv3PHwO+Tv00x6qdMhTJ1MaVfG3Fq9u+SiaKCLWkCu3TI0lqmNK6mN&#xA;KuDMoIBpXrhBIQtpgpLqY0rqY0q5NmB8MI2KC3Ju5OGfNRyWUyNJdTGlXhFABbv0AyXCBzRa5PRJ&#xA;oVp9OSjwnoxNr2t1P2djkjiHRAm1DHVqnoMGONlMiqyOF26nwy2UqYgWhzUmp65Qd2bVMFJdTGld&#xA;TGlXKzL06eGSiSEEWuMrkdh8skZlHCFOmV0yV4I+rH5DLscerCRVaZbTBpvhUnAdgkISmYtNrqY0&#xA;qISBOIqKk98vjjFNZkoslGI8MpMaLMFbTBSVaGJSORFfDLscBzYSkukhXiSBQjwwzgKQJIemUU2O&#xA;pjSupjSupjSupjSupjSr44wzUPTrkoRssSaVJIVCkjYjLJ4xSBJQplNM3UxpUV6SE1IrXMngDVaH&#xA;kQK5A6ZRKNFsB2RQG2ZIalOHbl40r92V42UlMgk1PXK2TVMaV1MaV1MaV1MaV1MaV1MaVckZZqff&#xA;hjGyglFBQBQdMyQGu3UxpUPK3I0HQZRM2ziKU6ZCmTqY0qoryUoN8mJFiQFpjkO5U4OApsNFSOop&#xA;kaTapE4UUPTscshKmMgukkUqQvfDKYrZAChTKqZupjSupjSupjSupjSupjStrVTUdcI2Ur3kZhTo&#xA;MlKRKAFOmQpLqY0q8O4FAdskJEIp0cZd9+nU4YxsqTSJIpl9NalHG5NV2p3yuMT0ZEtPEy9fvwGB&#xA;CiVraZGk26mNLbqY0tupjS26mNLbqY0toiGPite5y+EaDCRXmgFT0yZYqEjlthsMolK2wClOmQpN&#xA;upjS2uRATv0G5yUY2pLZZ+3wr2phJKKXRyGoDbg98lGXeghWKAihFcsMbYWhnj4tTt2yiUaLYDa2&#xA;mRpNthSTQYRFbXekeJINadclwI4llMhSbdTGlt1MaW3UxpbdTGlt1MaW3UxpbdTGlt1MaW0SihE3&#xA;27nMiMaDWTZUpHLbDZcqlK2YFK8IHCncZfjGzXJuYDhTuemOQbLFQVCTQZUI2zteIag0O46gimSG&#xA;O0cSnxyFJt3HGltUSNDQUrXrlkYhBK0oOdO1aZEx3TeyIIAFT0GXkNag3KRqduwyk3Is+Tawg1FS&#xA;COxGIx2vEsKUNPDIcKba440tqsKg8gcsxhjIqpUU36ZaQxtDBdxmMA2WiuOZVNalOv2fpyrIGUSo&#xA;8cqplbYBBqOuICqh2SnVm3P05Ydh72KlxyumVu440tu440tu440tu440tu440tu440tu440tu440&#xA;tqstSF8CK5ZPdEVLjldJtV40yymLiteuNK2AQajrhGyqo+FeR+029MsGwtjzUeOVUyt3HGlteqsF&#xA;YgfTkgDSCtC0NcjSVWYfAKdDls+TGKkAQajrlY2ZKqCgLt1PTLB3lie5SIqSfHKyGTXHBS22AQaj&#xA;riArZLkUJ2yRJKKC6KKrV7DDCG6yKvxy6mFoeX4m26DKJ7lmFnHI0m3ccaW1zqu3Hw3yUgEAreOR&#xA;pNu440tu440trliFOTbD9eSEepQSuDKOiDDY7lpenBu1D4ZONFidm2gQ9qfLCcYK8Si0RU0OUmFM&#xA;wWglTQYOFbVPq5p1+jLPCY8SkUptldMrVeOW0xt3HGlt3HGlte8ZFCclKCAVnHI0m3ccaW26GlOx&#xA;xpWuONLa/qnE/RkulIWccjSbXtG3FSemSMTSAWljr8hgEVJbAANCm2Hl0QvaBSKrscmcYQJKQSpp&#xA;lXCztELGFWmXiNNZKlI1dh08crkWQCnxyFMrdxxpbdxxpbdxxpbb9M+GPCttccaW3cMeFbVzDUiv&#xA;2QNstOO2HEseAAVGRljpIktVaMDkQN0lEccvphayVKrXwyE47JBUVFGB8MrAosir8kpWuW2GNKDC&#xA;pJ8cpIZKvHLeFjbuOPCtu448K27jjS22Ix3NMPCtttCQK9RhONHEt45HhTbaxljQYRC1JVRbp88s&#xA;8MMeJY8FBUdMjLGkSWkEih6DI0luOik16HDHZBbcB2AAwy3UbKvEAfLLKY2oxqOYyqI3ZE7LpevE&#xA;dB1wz7lCnxyHCm3cceFbdxx4Vt3HHhW16RGlR1PfJxgglteSvRsRYKrpIgQT3GSlBAKjxyqmVq6l&#xA;SPfwy4bsCtkpxoNycEuSQpqlWAysR3ZEojjl9NdrZF+A5GQ2ZBQ45Twsrdxx4Vt3HHhW1bhlvCwt&#xA;3DHhW3cMeFbdwx4VtftxpTfJdEL+HGPfwydUEXuo8Mq4WVqkSdcnAIkVTjllMbaKbHEhbUOGUcLO&#xA;3cMeFbVI4x9o5OEeqCWnNdh0xkbULAtDXIAJttlBaowkbqC1wwcK27hjwrbuGPCtu4Y8K2uUlRSl&#xA;clE0gtqhZ64QLKk0F7iinJyGyAVHhlPCyt3DHhW3cMeFbVI4qb/dlkIMTJU45OkWpSbmg6DK5bsg&#xA;s4ZDhTbuGPCtu4Y8K2rcMu4WNu4Y8K27hjwrbuGPCtrkQct+2GMd0EuYFjid1C3hg4U22oINcIFI&#xA;KoGXJ2GNLXNRQYJFIWcMhwsrdwx4VtdT4Ke+GtkLeGDhTa+OME79slGDEleYlI6ZMwCLUhHufAdT&#xA;lYgytvig7Vw0ELwiMOmSEQUWWmhHb7sBxpElPhkOFlaqFCr7nLAKDC7U2BJqcgRbINcMHCm3cMeF&#xA;bXLHU4RG0EqvEZbTC1NzXYdMhJkFnDIcLK3cMeFbdwx4Vt3DHhW0R6beGX8DXbvTI7YOFba4Y8K2&#xA;7hjwra5I6nfDGKktNHQ0GJioLXDBwrbuGPCtu4Y8K27hjwrbuGPCtu4Y8K2qrGOI2ywRFMSVMpua&#xA;ZAxZW2oofbEClK8kU2ybFpY6r9O+AQ2SS5oQBUYmCiS1FPLBEbqSq8Ms4WNqTp8RyqUd2YLitQPb&#xA;EhbW8MHCtu4Y8K27hjwrapGnXJwiglpwSaDpgkoWcMjwpt3DHhW3cMeFbdwx4Vt3DHhW0TRhmRRa&#xA;1QJUZPhRax4gNxkJQSCt4YOFNu4Y8K27hjwrbuGPCtu4Y8K27hjwrbuGPCtu4Y8K27hjwrbuGPCt&#xA;u4Y8K27hjwrbuGPCttqKfLCBSC2wqKYSocke9cYxUlfwyfCxtTZAWysx3ZArygp7ZPhRanwyvhZW&#xA;7hjwrbuGPCtrkWh+eGIQSt9PBwpt3DHhW3cMeFbdwx4Vt3DHhW3cMeFbRLpvmRKLWCuVPhyQiglz&#xA;ptglFQVP08jwpt3p48K2708eFbd6ePCtu9PHhW3enjwrbvTx4Vt3p48K2708eFbd6ePCtu9PHhW3&#xA;enjwrbvTx4Vt3p48K236ePCtqgjoKZMRY2tYdhgISFnp5HhTbvTx4Vt3p48K2708eFbd6ePCttiI&#xA;nEQW2zCRhMF4lvp4OFbd6ePCtu9PHhW3enjwrbvTx4VtEiOpy8Qa7VPTGT4UWsZK5ExSC16eDhTb&#xA;vTx4VtsQ4eBHE36Iw8C8TvRGPAvE70RjwLxNejg4F4mvTwcC2708eFNu9PHhW3enjwrbvTx4Vt3p&#xA;48K2708eFbbWPfCIoJbZewwkLa308jwpt3p48K2708eFbd6ePCtu9PHhW3enjwra9YxTJCLG2+GH&#xA;hW1P08hwpt3p48Kbb9MDrh4UW2I1OHhC20YfDAYLxIkR7ZkCLXbiuJC216eDhW3enjwrbfpgdt8P&#xA;CttcTg4Vt3A48K23xw0tt8MPCi3cMeFbd6ftjwra0xZEwTbvTx4Vt3p+2PCtu9PHhW3enjwrbvTx&#xA;4VtwTERW3enjwrbvTx4Vt3p48K2708eFbd6ePCtu9PHhW3enjwrbglMeFbb44aW2vTwcK24R74iK&#xA;236Q8MPAjiaEe+ARTa7hkuFFoj09su4WFtenjwrbvTx4VtsR48K216ePCtu9PHgW3enjwrbvTx4V&#xA;tsR4iK2708PCi3enjwrbvTx4U216eDhW2xHh4Vtr08HCtu9PHhW3enjwrbvSx4Ft3pY8C8TvTx4V&#xA;t3p48K2708eFbd6ePCtu9PHhW3enjwrbvTx4Vt3p48K2708eFbd6ePCtu9M48K24R48K236eHhW0&#xA;RwGX8LXbuAx4Vt3AY8K27gMeFbdwGPCtu4DHhW3cBjwrbuAx4Vt3AY8K27gMeFbdwGPCtu4DHhW3&#xA;cBjwrbuAx4Vt3AY8K27gMeFbdwGPCtu4DHhW3cBjwrbuAx4Vt3AY8K27gMeFbdwGPCtu4DHhW3cB&#xA;jwrbuAx4Vt3AY8K27gMeFbdwGPCtu4DHhW3cBjwrbuAx4Vt//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:977451B6D5E8DB11BEABEC7FCA19B52D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:987451B6D5E8DB11BEABEC7FCA19B52D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:967451B6D5E8DB11BEABEC7FCA19B52D</stRef:instanceID>
            <stRef:documentID>uuid:957451B6D5E8DB11BEABEC7FCA19B52D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Keywords/>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_AGM_Core/capture_currentpagedevice get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -305 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 305 li
473 305 li
473 0 li
cp
clp
[1 0 0 1 0 0 ] concat
472.869 305.001 mo
456.075 305.001 li
458.334 303.03 460.197 301.41 461.655 300.15 cv
463.707 298.368 465.309 296.928 466.452 295.839 cv
467.595 294.741 468.459 293.76 469.053 292.896 cv
469.647 292.023 470.358 290.952 471.177 289.674 cv
471.842 288.59 472.394 287.439 472.869 286.241 cv
472.869 305.001 li
442.386 305.001 mo
277.056 305.001 li
278.073 303.264 278.595 301.257 278.595 298.962 cv
278.595 295.623 277.461 292.824 275.193 290.556 cv
272.934 288.297 270.243 287.163 267.12 287.163 cv
263.772 287.163 260.973 288.297 258.714 290.556 cv
256.446 292.824 255.321 295.569 255.321 298.8 cv
255.321 301.149 255.888 303.21 257.004 305.001 cv
198.288 305.001 li
198.585 304.704 198.891 304.407 199.242 304.101 cv
200.934 302.607 202.266 301.455 203.22 300.627 cv
204.174 299.799 204.912 299.133 205.443 298.62 cv
205.974 298.107 206.379 297.657 206.658 297.252 cv
206.928 296.847 207.261 296.352 207.639 295.758 cv
208.701 294.012 209.232 291.978 209.232 289.638 cv
209.232 286.587 208.215 284.184 206.181 282.447 cv
204.138 280.701 201.321 279.828 197.712 279.828 cv
195.804 279.828 194.202 279.999 192.906 280.341 cv
191.61 280.683 190.413 281.277 189.315 282.123 cv
188.289 282.933 187.497 283.923 186.921 285.084 cv
186.354 286.254 186.066 287.478 186.066 288.747 cv
186.066 290.196 186.498 291.375 187.38 292.284 cv
188.253 293.193 189.369 293.652 190.728 293.652 cv
191.961 293.652 192.942 293.292 193.689 292.572 cv
194.436 291.852 194.805 290.898 194.805 289.701 cv
194.805 288.558 194.481 287.667 193.851 287.028 cv
193.212 286.389 192.321 286.074 191.178 286.074 cv
190.116 286.074 189.324 286.479 188.82 287.289 cv
188.604 287.667 188.442 287.91 188.343 288.018 cv
188.235 288.126 188.118 288.18 187.992 288.18 cv
187.776 288.18 187.668 287.982 187.668 287.604 cv
187.668 285.903 188.289 284.481 189.513 283.338 cv
190.746 282.186 192.276 281.619 194.094 281.619 cv
196.173 281.619 197.766 282.267 198.864 283.563 cv
199.971 284.859 200.52 286.713 200.52 289.134 cv
200.52 289.935 200.466 290.664 200.367 291.294 cv
200.259 291.933 200.052 292.617 199.755 293.337 cv
199.458 294.057 199.035 294.885 198.477 295.821 cv
197.928 296.757 197.181 297.918 196.245 299.322 cv
195.228 300.897 194.481 302.274 194.013 303.462 cv
193.806 303.984 193.653 304.497 193.545 305.001 cv
182.88 305.001 li
180.918 291.69 175.086 280.881 165.375 272.601 cv
153.198 262.224 136.323 257.031 114.759 257.031 cv
103.347 257.031 93.771 258.039 86.04 260.055 cv
78.3 262.071 71.136 265.599 64.539 270.648 cv
58.446 275.472 53.685 281.367 50.265 288.351 cv
47.637 293.715 46.026 299.268 45.414 305.001 cv
12.141 305.001 li
11.367 304.821 10.566 304.722 9.72 304.722 cv
8.811 304.722 7.956 304.821 7.137 305.001 cv
0 305.001 li
0 0 li
472.869 0 li
472.869 69.8142 li
472.423 69.346 471.954 68.9052 471.456 68.472 cv
467.091 64.737 461.052 62.865 453.33 62.865 cv
449.235 62.865 445.806 63.234 443.034 63.963 cv
440.262 64.701 437.697 65.979 435.33 67.806 cv
433.152 69.543 431.451 71.649 430.218 74.151 cv
428.994 76.653 428.382 79.272 428.382 81.999 cv
428.382 85.095 429.318 87.615 431.19 89.568 cv
433.053 91.53 435.447 92.502 438.354 92.502 cv
440.991 92.502 443.106 91.728 444.699 90.189 cv
446.292 88.641 447.093 86.589 447.093 84.042 cv
447.093 81.594 446.409 79.677 445.041 78.318 cv
443.682 76.95 441.765 76.266 439.317 76.266 cv
437.04 76.266 435.357 77.13 434.268 78.858 cv
433.809 79.677 433.467 80.199 433.242 80.433 cv
433.017 80.658 432.765 80.775 432.486 80.775 cv
432.036 80.775 431.811 80.361 431.811 79.542 cv
431.811 75.906 433.125 72.855 435.753 70.398 cv
438.381 67.95 441.648 66.717 445.554 66.717 cv
450 66.717 453.402 68.103 455.76 70.884 cv
458.118 73.656 459.297 77.634 459.297 82.818 cv
459.297 84.546 459.18 86.094 458.955 87.453 cv
458.73 88.821 458.289 90.279 457.659 91.827 cv
457.02 93.366 456.111 95.139 454.932 97.146 cv
453.744 99.144 452.151 101.646 450.153 104.643 cv
447.966 108.009 446.373 110.97 445.374 113.517 cv
444.375 116.064 443.871 118.521 443.871 120.879 cv
443.871 122.247 444.078 123.75 444.492 125.388 cv
444.906 127.026 445.401 128.574 446.004 130.023 cv
446.598 131.481 447.255 132.687 447.984 133.641 cv
448.722 134.595 449.361 135.072 449.901 135.072 cv
450.36 135.072 450.585 134.802 450.585 134.253 cv
450.585 134.073 450.45 133.479 450.18 132.48 cv
449.721 131.211 449.424 130.203 449.289 129.483 cv
449.154 128.754 449.082 128.025 449.082 127.296 cv
449.082 125.208 449.676 123.201 450.855 121.293 cv
452.043 119.385 453.951 117.243 456.588 114.876 cv
460.224 111.699 463.068 109.215 465.111 107.442 cv
467.154 105.669 468.747 104.238 469.881 103.149 cv
471.024 102.06 471.888 101.079 472.473 100.215 cv
472.602 100.031 472.732 99.8369 472.869 99.6364 cv
472.869 267.518 li
471.772 265.031 470.161 262.868 468.036 261.045 cv
463.653 257.292 457.587 255.42 449.829 255.42 cv
445.716 255.42 442.269 255.789 439.488 256.518 cv
436.707 257.256 434.124 258.534 431.757 260.37 cv
429.561 262.107 427.851 264.231 426.618 266.733 cv
425.385 269.244 424.773 271.872 424.773 274.608 cv
424.773 277.713 425.709 280.251 427.581 282.213 cv
429.453 284.175 431.847 285.156 434.772 285.156 cv
437.418 285.156 439.542 284.382 441.135 282.825 cv
442.737 281.277 443.538 279.225 443.538 276.669 cv
443.538 274.203 442.854 272.286 441.477 270.918 cv
440.109 269.541 438.192 268.857 435.726 268.857 cv
433.449 268.857 431.757 269.73 430.659 271.458 cv
430.209 272.286 429.867 272.808 429.633 273.033 cv
429.408 273.267 429.156 273.375 428.886 273.375 cv
428.427 273.375 428.202 272.97 428.202 272.142 cv
428.202 268.497 429.516 265.437 432.162 262.971 cv
434.808 260.505 438.093 259.272 442.017 259.272 cv
446.481 259.272 449.901 260.667 452.268 263.448 cv
454.644 266.238 455.832 270.234 455.832 275.436 cv
455.832 277.164 455.715 278.721 455.481 280.089 cv
455.256 281.457 454.824 282.915 454.185 284.472 cv
453.546 286.02 452.628 287.802 451.44 289.809 cv
450.252 291.816 448.65 294.327 446.643 297.342 cv
444.789 300.195 443.385 302.733 442.386 305.001 cv
3.996 224.046 mo
8.874 224.046 12.6 225.567 15.183 228.6 cv
17.766 231.633 19.062 235.989 19.062 241.668 cv
19.062 243.558 18.936 245.25 18.693 246.744 cv
18.441 248.247 17.973 249.84 17.271 251.523 cv
16.578 253.224 15.579 255.159 14.292 257.355 cv
12.996 259.542 11.259 262.278 9.072 265.563 cv
6.687 269.253 4.95 272.484 3.852 275.274 cv
2.763 278.064 2.214 280.755 2.214 283.338 cv
2.214 284.832 2.439 286.479 2.889 288.27 cv
3.339 290.061 3.888 291.753 4.545 293.346 cv
5.193 294.939 5.922 296.262 6.723 297.306 cv
7.524 298.35 8.226 298.872 8.82 298.872 cv
9.324 298.872 9.567 298.575 9.567 297.981 cv
9.567 297.774 9.423 297.135 9.117 296.037 cv
8.622 294.642 8.298 293.544 8.145 292.752 cv
8.001 291.951 7.929 291.159 7.929 290.358 cv
7.929 288.072 8.568 285.876 9.864 283.788 cv
11.151 281.7 13.23 279.36 16.11 276.768 cv
20.079 273.285 23.184 270.567 25.416 268.632 cv
27.648 266.688 29.385 265.122 30.627 263.925 cv
31.869 262.728 32.805 261.657 33.453 260.712 cv
34.101 259.767 34.866 258.597 35.757 257.202 cv
38.241 253.116 39.483 248.337 39.483 242.865 cv
39.483 235.692 37.098 230.076 32.328 226.008 cv
27.558 221.94 20.952 219.906 12.501 219.906 cv
8.028 219.906 4.275 220.302 1.242 221.085 cv
.819 221.202 .414 221.346 0 221.481 cv
0 224.496 li
1.26 224.208 2.583 224.046 3.996 224.046 cv
261.027 199.629 mo
266.337 199.629 270.405 201.276 273.222 204.57 cv
276.039 207.864 277.452 212.589 277.452 218.736 cv
277.452 220.797 277.317 222.624 277.038 224.244 cv
276.768 225.864 276.255 227.592 275.49 229.428 cv
274.734 231.264 273.645 233.37 272.232 235.737 cv
270.819 238.113 268.92 241.083 266.526 244.647 cv
263.916 248.643 262.017 252.153 260.82 255.168 cv
259.623 258.192 259.029 261.108 259.029 263.916 cv
259.029 265.536 259.272 267.318 259.758 269.262 cv
260.244 271.206 260.829 273.042 261.531 274.77 cv
262.233 276.489 263.016 277.92 263.88 279.054 cv
264.735 280.188 265.491 280.755 266.148 280.755 cv
266.688 280.755 266.949 280.431 266.949 279.783 cv
266.949 279.567 266.787 278.865 266.463 277.677 cv
265.923 276.165 265.572 274.977 265.41 274.122 cv
265.248 273.258 265.167 272.394 265.167 271.521 cv
265.167 269.046 265.869 266.67 267.282 264.402 cv
268.686 262.134 270.963 259.596 274.104 256.788 cv
278.424 253.017 281.808 250.074 284.247 247.968 cv
286.677 245.862 288.576 244.161 289.926 242.865 cv
291.276 241.569 292.302 240.417 293.004 239.391 cv
293.715 238.356 294.552 237.087 295.524 235.575 cv
298.233 231.156 299.583 225.972 299.583 220.032 cv
299.583 212.265 296.991 206.163 291.807 201.726 cv
286.623 197.28 279.441 195.066 270.261 195.066 cv
265.401 195.066 261.315 195.498 258.03 196.371 cv
254.727 197.235 251.676 198.756 248.868 200.925 cv
246.276 202.977 244.26 205.488 242.793 208.458 cv
241.335 211.428 240.606 214.533 240.606 217.764 cv
240.606 221.436 241.704 224.433 243.909 226.755 cv
246.105 229.077 248.931 230.238 252.378 230.238 cv
255.51 230.238 258.021 229.32 259.911 227.484 cv
261.801 225.648 262.746 223.218 262.746 220.194 cv
262.746 217.287 261.936 215.019 260.316 213.399 cv
258.696 211.779 256.428 210.969 253.512 210.969 cv
250.812 210.969 248.814 211.995 247.527 214.047 cv
246.987 215.019 246.582 215.64 246.312 215.91 cv
246.042 216.18 245.745 216.315 245.421 216.315 cv
244.881 216.315 244.611 215.829 244.611 214.857 cv
244.611 210.537 246.177 206.919 249.327 204.003 cv
252.468 201.096 256.365 199.629 261.027 199.629 cv
386.334 244.701 mo
382.311 244.701 378.927 246.069 376.2 248.796 cv
373.473 251.514 372.114 254.826 372.114 258.732 cv
372.114 262.755 373.473 266.103 376.2 268.758 cv
378.927 271.422 382.311 272.754 386.334 272.754 cv
390.357 272.754 393.669 271.458 396.27 268.857 cv
398.862 266.256 400.167 262.944 400.167 258.921 cv
400.167 254.898 398.799 251.514 396.072 248.796 cv
393.345 246.069 390.105 244.701 386.334 244.701 cv
0 234.837 mo
0 251.64 li
1.161 251.217 2.178 250.578 3.051 249.732 cv
4.788 248.04 5.661 245.799 5.661 243.018 cv
5.661 240.327 4.914 238.23 3.42 236.736 cv
2.511 235.827 1.368 235.197 0 234.837 cv
378.864 139.5 mo
385.254 139.5 390.15 141.48 393.534 145.44 cv
396.927 149.4 398.628 155.07 398.628 162.477 cv
398.628 164.943 398.466 167.148 398.133 169.092 cv
397.809 171.036 397.188 173.115 396.279 175.32 cv
395.37 177.525 394.065 180.054 392.373 182.907 cv
390.681 185.769 388.404 189.333 385.542 193.617 cv
382.419 198.423 380.142 202.635 378.702 206.271 cv
377.271 209.907 376.56 213.408 376.56 216.783 cv
376.56 218.727 376.848 220.869 377.433 223.2 cv
378.009 225.54 378.72 227.745 379.557 229.824 cv
380.394 231.903 381.33 233.622 382.365 234.981 cv
383.4 236.349 384.3 237.024 385.083 237.024 cv
385.731 237.024 386.055 236.637 386.055 235.854 cv
386.055 235.602 385.857 234.756 385.47 233.334 cv
384.822 231.516 384.399 230.085 384.201 229.05 cv
384.012 228.006 383.913 226.971 383.913 225.927 cv
383.913 222.948 384.759 220.095 386.442 217.368 cv
388.125 214.641 390.852 211.59 394.614 208.215 cv
399.798 203.67 403.848 200.142 406.764 197.604 cv
409.68 195.084 411.948 193.032 413.568 191.475 cv
415.188 189.918 416.421 188.523 417.267 187.29 cv
418.104 186.057 419.112 184.536 420.273 182.718 cv
423.513 177.399 425.142 171.171 425.142 164.025 cv
425.142 154.683 422.028 147.348 415.8 142.02 cv
409.572 136.692 400.95 134.028 389.925 134.028 cv
384.084 134.028 379.188 134.55 375.237 135.594 cv
371.277 136.638 367.614 138.456 364.239 141.057 cv
361.134 143.523 358.695 146.538 356.949 150.111 cv
355.194 153.684 354.321 157.41 354.321 161.307 cv
354.321 165.717 355.635 169.317 358.272 172.107 cv
360.909 174.897 364.302 176.292 368.451 176.292 cv
372.222 176.292 375.237 175.194 377.505 172.98 cv
379.782 170.775 380.916 167.859 380.916 164.223 cv
380.916 160.722 379.944 157.995 377.991 156.051 cv
376.047 154.107 373.32 153.126 369.819 153.126 cv
366.57 153.126 364.176 154.359 362.619 156.825 cv
361.971 157.995 361.476 158.742 361.161 159.066 cv
360.828 159.39 360.477 159.552 360.09 159.552 cv
359.433 159.552 359.109 158.967 359.109 157.797 cv
359.109 152.613 360.999 148.266 364.779 144.756 cv
368.568 141.255 373.257 139.5 378.864 139.5 cv
317.286 221.337 mo
315.126 221.337 313.308 222.066 311.85 223.533 cv
310.383 225 309.645 226.773 309.645 228.87 cv
309.645 231.03 310.383 232.83 311.85 234.261 cv
313.308 235.683 315.126 236.403 317.286 236.403 cv
319.446 236.403 321.228 235.701 322.623 234.306 cv
324.018 232.911 324.711 231.138 324.711 228.978 cv
324.711 226.809 323.982 225 322.515 223.533 cv
321.048 222.066 319.311 221.337 317.286 221.337 cv
187.056 208.287 mo
184.959 208.287 183.195 208.998 181.773 210.42 cv
180.351 211.842 179.64 213.57 179.64 215.604 cv
179.64 217.701 180.351 219.447 181.773 220.833 cv
183.195 222.228 184.959 222.921 187.056 222.921 cv
189.162 222.921 190.89 222.237 192.24 220.887 cv
193.599 219.528 194.274 217.809 194.274 215.703 cv
194.274 213.606 193.563 211.842 192.141 210.42 cv
190.719 208.998 189.027 208.287 187.056 208.287 cv
72.864 211.329 mo
71.406 211.329 70.173 211.824 69.183 212.814 cv
68.184 213.813 67.689 215.01 67.689 216.432 cv
67.689 217.899 68.184 219.114 69.183 220.086 cv
70.173 221.049 71.406 221.535 72.864 221.535 cv
74.331 221.535 75.537 221.067 76.482 220.122 cv
77.427 219.177 77.904 217.971 77.904 216.504 cv
77.904 215.037 77.409 213.813 76.41 212.814 cv
75.42 211.824 74.241 211.329 72.864 211.329 cv
226.08 193.743 mo
222.714 193.743 219.897 194.886 217.62 197.163 cv
215.343 199.44 214.209 202.203 214.209 205.452 cv
214.209 208.818 215.343 211.608 217.62 213.831 cv
219.897 216.054 222.714 217.161 226.08 217.161 cv
229.437 217.161 232.2 216.081 234.369 213.912 cv
236.538 211.743 237.627 208.98 237.627 205.623 cv
237.627 202.257 236.484 199.44 234.207 197.163 cv
231.93 194.886 229.221 193.743 226.08 193.743 cv
313.362 164.646 mo
316.782 164.646 319.392 165.717 321.21 167.841 cv
323.019 169.974 323.928 173.025 323.928 177.012 cv
323.928 178.335 323.838 179.523 323.667 180.567 cv
323.487 181.62 323.163 182.736 322.668 183.924 cv
322.182 185.103 321.48 186.471 320.571 188.01 cv
319.662 189.54 318.438 191.466 316.899 193.77 cv
315.225 196.353 314.001 198.621 313.227 200.574 cv
312.462 202.527 312.075 204.417 312.075 206.226 cv
312.075 207.279 312.237 208.431 312.552 209.691 cv
312.867 210.942 313.254 212.13 313.704 213.246 cv
314.163 214.362 314.676 215.289 315.234 216.018 cv
315.792 216.756 316.287 217.125 316.701 217.125 cv
317.052 217.125 317.223 216.909 317.223 216.495 cv
317.223 216.351 317.124 215.901 316.917 215.136 cv
316.566 214.155 316.332 213.39 316.233 212.832 cv
316.125 212.274 316.071 211.707 316.071 211.149 cv
316.071 209.547 316.53 208.008 317.43 206.541 cv
318.339 205.074 319.797 203.436 321.813 201.618 cv
324.603 199.179 326.772 197.271 328.338 195.912 cv
329.904 194.553 331.128 193.455 331.992 192.618 cv
332.865 191.772 333.522 191.025 333.981 190.359 cv
334.431 189.702 334.971 188.874 335.601 187.902 cv
337.338 185.04 338.211 181.683 338.211 177.849 cv
338.211 172.818 336.537 168.876 333.189 166.014 cv
329.841 163.152 325.206 161.721 319.284 161.721 cv
316.152 161.721 313.515 162 311.391 162.558 cv
309.267 163.116 307.296 164.097 305.487 165.483 cv
303.813 166.815 302.508 168.435 301.563 170.361 cv
300.627 172.278 300.15 174.285 300.15 176.382 cv
300.15 178.749 300.87 180.693 302.31 182.196 cv
303.75 183.69 305.586 184.446 307.827 184.446 cv
309.843 184.446 311.472 183.852 312.696 182.664 cv
313.911 181.476 314.523 179.901 314.523 177.948 cv
314.523 176.067 314.001 174.6 312.957 173.556 cv
311.904 172.503 310.437 171.981 308.556 171.981 cv
306.81 171.981 305.523 172.647 304.677 173.97 cv
304.335 174.6 304.065 175.005 303.894 175.176 cv
303.723 175.347 303.525 175.437 303.318 175.437 cv
302.967 175.437 302.796 175.122 302.796 174.492 cv
302.796 171.702 303.804 169.362 305.829 167.481 cv
307.854 165.591 310.365 164.646 313.362 164.646 cv
70.173 173.025 mo
72.486 173.025 74.259 173.745 75.483 175.185 cv
76.716 176.625 77.328 178.686 77.328 181.386 cv
77.328 182.286 77.274 183.087 77.157 183.789 cv
77.031 184.5 76.815 185.256 76.482 186.066 cv
76.149 186.867 75.681 187.785 75.069 188.82 cv
74.448 189.864 73.629 191.16 72.585 192.726 cv
71.46 194.472 70.632 196.002 70.11 197.325 cv
69.597 198.648 69.336 199.926 69.336 201.15 cv
69.336 201.861 69.435 202.644 69.651 203.49 cv
69.858 204.345 70.119 205.146 70.425 205.902 cv
70.731 206.658 71.073 207.279 71.451 207.783 cv
71.82 208.278 72.153 208.521 72.441 208.521 cv
72.675 208.521 72.792 208.386 72.792 208.098 cv
72.792 208.008 72.72 207.693 72.576 207.18 cv
72.342 206.514 72.189 206.001 72.117 205.614 cv
72.045 205.245 72.009 204.858 72.009 204.48 cv
72.009 203.4 72.315 202.356 72.936 201.366 cv
73.548 200.376 74.538 199.26 75.915 198.036 cv
77.805 196.38 79.281 195.093 80.343 194.175 cv
81.405 193.257 82.233 192.51 82.827 191.943 cv
83.412 191.376 83.862 190.872 84.168 190.422 cv
84.474 189.972 84.843 189.414 85.266 188.757 cv
86.445 186.813 87.039 184.554 87.039 181.953 cv
87.039 178.551 85.905 175.878 83.637 173.934 cv
81.369 171.999 78.228 171.027 74.205 171.027 cv
72.081 171.027 70.299 171.216 68.85 171.594 cv
67.41 171.972 66.078 172.638 64.845 173.592 cv
63.711 174.483 62.829 175.581 62.19 176.886 cv
61.551 178.182 61.227 179.541 61.227 180.963 cv
61.227 182.565 61.713 183.879 62.685 184.896 cv
63.666 185.904 64.908 186.417 66.42 186.417 cv
67.788 186.417 68.886 186.012 69.714 185.211 cv
70.542 184.41 70.947 183.348 70.947 182.025 cv
70.947 180.747 70.596 179.757 69.885 179.046 cv
69.183 178.335 68.184 177.984 66.915 177.984 cv
65.727 177.984 64.854 178.434 64.296 179.325 cv
64.053 179.757 63.873 180.027 63.756 180.144 cv
63.639 180.261 63.513 180.324 63.369 180.324 cv
63.135 180.324 63.018 180.108 63.018 179.685 cv
63.018 177.795 63.702 176.211 65.07 174.933 cv
66.438 173.664 68.139 173.025 70.173 173.025 cv
183.177 153.234 mo
186.489 153.234 189.027 154.269 190.782 156.339 cv
192.537 158.409 193.419 161.37 193.419 165.231 cv
193.419 166.518 193.338 167.679 193.167 168.687 cv
192.996 169.704 192.672 170.793 192.204 171.945 cv
191.736 173.097 191.061 174.42 190.179 175.905 cv
189.306 177.399 188.127 179.262 186.642 181.503 cv
185.031 184.005 183.852 186.21 183.105 188.109 cv
182.367 190.008 181.998 191.835 181.998 193.599 cv
181.998 194.616 182.151 195.732 182.448 196.956 cv
182.754 198.171 183.132 199.323 183.564 200.412 cv
184.005 201.492 184.5 202.392 185.04 203.103 cv
185.58 203.814 186.057 204.174 186.462 204.174 cv
186.795 204.174 186.966 203.967 186.966 203.562 cv
186.966 203.427 186.867 202.986 186.66 202.239 cv
186.327 201.294 186.102 200.547 186.003 200.007 cv
185.904 199.458 185.85 198.918 185.85 198.378 cv
185.85 196.821 186.291 195.327 187.164 193.905 cv
188.046 192.483 189.468 190.89 191.43 189.126 cv
194.13 186.75 196.236 184.905 197.757 183.582 cv
199.278 182.268 200.466 181.197 201.312 180.387 cv
202.149 179.568 202.797 178.839 203.238 178.2 cv
203.67 177.552 204.201 176.76 204.804 175.806 cv
206.496 173.025 207.342 169.776 207.342 166.05 cv
207.342 161.172 205.713 157.338 202.464 154.557 cv
199.215 151.776 194.706 150.381 188.955 150.381 cv
185.904 150.381 183.348 150.651 181.278 151.2 cv
179.217 151.74 177.3 152.694 175.536 154.053 cv
173.916 155.34 172.647 156.915 171.729 158.778 cv
170.811 160.641 170.361 162.594 170.361 164.628 cv
170.361 166.932 171.054 168.813 172.458 170.271 cv
173.853 171.729 175.635 172.449 177.804 172.449 cv
179.775 172.449 181.35 171.873 182.538 170.721 cv
183.717 169.569 184.311 168.048 184.311 166.149 cv
184.311 164.322 183.807 162.9 182.79 161.883 cv
181.773 160.866 180.351 160.353 178.515 160.353 cv
176.823 160.353 175.572 161.001 174.753 162.288 cv
174.42 162.9 174.168 163.287 173.997 163.458 cv
173.826 163.62 173.637 163.71 173.439 163.71 cv
173.097 163.71 172.926 163.404 172.926 162.792 cv
172.926 160.083 173.907 157.815 175.869 155.979 cv
177.831 154.152 180.261 153.234 183.177 153.234 cv
129.267 166.815 mo
124.128 166.815 119.808 168.552 116.325 172.044 cv
112.842 175.527 111.096 179.757 111.096 184.734 cv
111.096 189.882 112.842 194.148 116.325 197.55 cv
119.808 200.952 124.128 202.653 129.267 202.653 cv
134.415 202.653 138.645 200.997 141.966 197.676 cv
145.278 194.355 146.943 190.125 146.943 184.986 cv
146.943 179.838 145.197 175.527 141.714 172.044 cv
138.231 168.552 134.082 166.815 129.267 166.815 cv
219.843 105.93 mo
225.18 105.93 229.266 107.586 232.092 110.889 cv
234.918 114.192 236.34 118.926 236.34 125.109 cv
236.34 127.161 236.205 129.006 235.935 130.635 cv
235.656 132.255 235.143 133.992 234.378 135.828 cv
233.622 137.673 232.533 139.788 231.12 142.164 cv
229.707 144.549 227.808 147.528 225.414 151.101 cv
222.804 155.115 220.905 158.634 219.708 161.667 cv
218.511 164.7 217.917 167.625 217.917 170.442 cv
217.917 172.062 218.16 173.853 218.646 175.806 cv
219.132 177.75 219.726 179.595 220.419 181.332 cv
221.121 183.06 221.904 184.5 222.768 185.634 cv
223.623 186.777 224.379 187.344 225.036 187.344 cv
225.576 187.344 225.846 187.02 225.846 186.363 cv
225.846 186.147 225.684 185.445 225.36 184.257 cv
224.82 182.736 224.469 181.548 224.298 180.684 cv
224.136 179.811 224.055 178.947 224.055 178.074 cv
224.055 175.59 224.766 173.205 226.17 170.928 cv
227.574 168.651 229.851 166.104 232.992 163.287 cv
237.312 159.498 240.696 156.546 243.135 154.44 cv
245.565 152.325 247.464 150.615 248.814 149.319 cv
250.164 148.023 251.19 146.853 251.892 145.827 cv
252.603 144.792 253.44 143.523 254.412 142.002 cv
257.121 137.565 258.471 132.363 258.471 126.405 cv
258.471 118.602 255.87 112.482 250.677 108.036 cv
245.475 103.59 238.275 101.358 229.077 101.358 cv
224.208 101.358 220.113 101.799 216.819 102.663 cv
213.516 103.536 210.456 105.057 207.639 107.226 cv
205.038 109.287 203.013 111.807 201.546 114.786 cv
200.088 117.765 199.359 120.879 199.359 124.128 cv
199.359 127.818 200.457 130.815 202.653 133.146 cv
204.858 135.477 207.684 136.647 211.158 136.647 cv
214.299 136.647 216.819 135.72 218.709 133.884 cv
220.608 132.039 221.553 129.6 221.553 126.567 cv
221.553 123.642 220.743 121.365 219.114 119.745 cv
217.494 118.116 215.217 117.306 212.292 117.306 cv
209.583 117.306 207.576 118.332 206.28 120.393 cv
205.74 121.365 205.335 121.995 205.065 122.265 cv
204.786 122.535 204.489 122.67 204.165 122.67 cv
203.625 122.67 203.355 122.184 203.355 121.203 cv
203.355 116.874 204.93 113.247 208.089 110.322 cv
211.248 107.397 215.163 105.93 219.843 105.93 cv
153.324 157.329 mo
152.154 157.329 151.173 157.725 150.381 158.517 cv
149.589 159.309 149.193 160.272 149.193 161.397 cv
149.193 162.567 149.589 163.539 150.381 164.313 cv
151.173 165.087 152.154 165.474 153.324 165.474 cv
154.494 165.474 155.457 165.096 156.213 164.34 cv
156.96 163.584 157.338 162.621 157.338 161.46 cv
157.338 160.29 156.942 159.309 156.15 158.517 cv
155.358 157.725 154.413 157.329 153.324 157.329 cv
48.663 155.88 mo
47.574 155.88 46.656 156.249 45.918 156.996 cv
45.18 157.734 44.811 158.625 44.811 159.687 cv
44.811 160.776 45.18 161.685 45.918 162.405 cv
46.656 163.125 47.574 163.485 48.663 163.485 cv
49.752 163.485 50.652 163.134 51.354 162.432 cv
52.065 161.73 52.416 160.83 52.416 159.741 cv
52.416 158.643 52.038 157.734 51.3 156.996 cv
50.562 156.249 49.68 155.88 48.663 155.88 cv
450.756 140.472 mo
447.939 140.472 445.572 141.426 443.664 143.334 cv
441.756 145.242 440.802 147.555 440.802 150.282 cv
440.802 153.108 441.756 155.448 443.664 157.311 cv
445.572 159.174 447.939 160.101 450.756 160.101 cv
453.573 160.101 455.895 159.192 457.713 157.374 cv
459.531 155.556 460.44 153.243 460.44 150.426 cv
460.44 147.6 459.486 145.242 457.578 143.334 cv
455.661 141.426 453.393 140.472 450.756 140.472 cv
119.88 32.445 mo
127.989 32.445 134.19 34.974 138.492 40.023 cv
142.794 45.081 144.945 52.326 144.945 61.767 cv
144.945 64.917 144.729 67.725 144.324 70.218 cv
143.91 72.702 143.127 75.348 141.966 78.165 cv
140.814 80.982 139.167 84.213 137.016 87.849 cv
134.874 91.503 131.976 96.048 128.349 101.52 cv
124.38 107.649 121.491 113.031 119.682 117.666 cv
117.864 122.31 116.955 126.783 116.955 131.085 cv
116.955 133.569 117.324 136.305 118.071 139.284 cv
118.809 142.263 119.718 145.08 120.798 147.735 cv
121.869 150.381 123.066 152.577 124.389 154.314 cv
125.712 156.06 126.873 156.924 127.872 156.924 cv
128.7 156.924 129.114 156.429 129.114 155.43 cv
129.114 155.106 128.862 154.026 128.367 152.199 cv
127.539 149.886 126.999 148.059 126.747 146.736 cv
126.504 145.413 126.378 144.081 126.378 142.758 cv
126.378 138.951 127.449 135.306 129.6 131.832 cv
131.742 128.349 135.216 124.461 140.013 120.15 cv
146.619 114.354 151.785 109.845 155.502 106.614 cv
159.219 103.383 162.108 100.773 164.178 98.784 cv
166.248 96.795 167.814 95.013 168.885 93.447 cv
169.956 91.872 171.243 89.928 172.728 87.606 cv
176.859 80.811 178.929 72.864 178.929 63.756 cv
178.929 51.831 174.951 42.462 167.004 35.658 cv
159.057 28.854 148.05 25.452 133.983 25.452 cv
126.531 25.452 120.285 26.118 115.236 27.45 cv
110.187 28.782 105.507 31.113 101.205 34.434 cv
97.227 37.584 94.122 41.436 91.89 45.99 cv
89.658 50.544 88.542 55.305 88.542 60.273 cv
88.542 65.907 90.252 70.506 93.663 74.061 cv
97.083 77.625 101.448 79.407 106.749 79.407 cv
111.546 79.407 115.398 77.994 118.296 75.186 cv
121.194 72.369 122.652 68.643 122.652 63.999 cv
122.652 59.526 121.401 56.052 118.917 53.568 cv
116.433 51.084 112.959 49.842 108.486 49.842 cv
104.346 49.842 101.277 51.417 99.297 54.558 cv
98.46 56.052 97.839 57.006 97.434 57.42 cv
97.011 57.834 96.561 58.041 96.066 58.041 cv
95.238 58.041 94.824 57.294 94.824 55.8 cv
94.824 49.176 97.218 43.632 102.015 39.159 cv
106.812 34.686 112.77 32.445 119.88 32.445 cv
151.155 126.819 mo
153.009 126.819 154.431 127.386 155.412 128.538 cv
156.402 129.69 156.897 131.337 156.897 133.479 cv
156.897 134.199 156.843 134.838 156.753 135.405 cv
156.654 135.972 156.474 136.566 156.213 137.214 cv
155.952 137.853 155.574 138.582 155.079 139.41 cv
154.584 140.247 153.927 141.282 153.09 142.524 cv
152.181 143.919 151.524 145.143 151.11 146.196 cv
150.687 147.249 150.48 148.266 150.48 149.247 cv
150.48 149.814 150.57 150.435 150.741 151.11 cv
150.903 151.785 151.11 152.424 151.353 153.027 cv
151.596 153.63 151.875 154.134 152.172 154.53 cv
152.469 154.926 152.73 155.124 152.955 155.124 cv
153.144 155.124 153.243 155.007 153.243 154.782 cv
153.243 154.71 153.189 154.458 153.072 154.044 cv
152.883 153.522 152.757 153.108 152.703 152.802 cv
152.649 152.505 152.622 152.199 152.622 151.902 cv
152.622 151.038 152.865 150.201 153.36 149.418 cv
153.846 148.626 154.638 147.735 155.727 146.763 cv
157.239 145.44 158.409 144.414 159.255 143.676 cv
160.101 142.947 160.767 142.353 161.235 141.903 cv
161.703 141.444 162.063 141.039 162.306 140.688 cv
162.549 140.328 162.846 139.887 163.179 139.356 cv
164.124 137.817 164.592 136.008 164.592 133.938 cv
164.592 131.22 163.692 129.096 161.883 127.548 cv
160.074 126 157.572 125.226 154.368 125.226 cv
152.667 125.226 151.245 125.379 150.102 125.676 cv
148.95 125.982 147.888 126.513 146.907 127.269 cv
145.998 127.98 145.296 128.862 144.792 129.897 cv
144.279 130.932 144.027 132.012 144.027 133.146 cv
144.027 134.424 144.405 135.468 145.17 136.278 cv
145.935 137.088 146.925 137.493 148.131 137.493 cv
149.22 137.493 150.093 137.169 150.759 136.53 cv
151.416 135.891 151.74 135.045 151.74 133.992 cv
151.74 132.975 151.461 132.183 150.894 131.616 cv
150.327 131.049 149.535 130.77 148.527 130.77 cv
147.582 130.77 146.88 131.13 146.43 131.841 cv
146.241 132.183 146.106 132.399 146.007 132.489 cv
145.917 132.588 145.809 132.633 145.701 132.633 cv
145.512 132.633 145.413 132.462 145.413 132.129 cv
145.413 130.617 145.962 129.357 147.06 128.34 cv
148.158 127.323 149.526 126.819 151.155 126.819 cv
46.683 127.287 mo
48.42 127.287 49.752 127.827 50.67 128.907 cv
51.597 129.978 52.056 131.526 52.056 133.533 cv
52.056 134.199 52.011 134.802 51.921 135.333 cv
51.831 135.864 51.66 136.422 51.417 137.025 cv
51.165 137.619 50.814 138.312 50.346 139.086 cv
49.887 139.86 49.266 140.832 48.483 141.993 cv
47.628 143.298 46.998 144.45 46.611 145.44 cv
46.215 146.421 46.026 147.375 46.026 148.293 cv
46.026 148.824 46.098 149.4 46.26 150.039 cv
46.422 150.669 46.611 151.272 46.836 151.839 cv
47.07 152.406 47.322 152.865 47.601 153.234 cv
47.88 153.612 48.123 153.792 48.339 153.792 cv
48.519 153.792 48.6 153.693 48.6 153.477 cv
48.6 153.405 48.555 153.18 48.447 152.793 cv
48.267 152.298 48.15 151.911 48.105 151.623 cv
48.051 151.344 48.024 151.065 48.024 150.777 cv
48.024 149.967 48.249 149.193 48.708 148.455 cv
49.167 147.708 49.914 146.88 50.94 145.962 cv
52.353 144.729 53.46 143.766 54.252 143.082 cv
55.053 142.389 55.665 141.84 56.115 141.417 cv
56.556 140.994 56.889 140.616 57.114 140.274 cv
57.348 139.941 57.627 139.527 57.942 139.032 cv
58.824 137.592 59.265 135.9 59.265 133.956 cv
59.265 131.418 58.419 129.42 56.727 127.971 cv
55.026 126.513 52.686 125.793 49.68 125.793 cv
48.096 125.793 46.755 125.937 45.684 126.216 cv
44.604 126.504 43.605 126.999 42.687 127.71 cv
41.841 128.385 41.184 129.204 40.707 130.176 cv
40.23 131.139 39.987 132.156 39.987 133.218 cv
39.987 134.415 40.356 135.396 41.076 136.152 cv
41.796 136.908 42.723 137.286 43.848 137.286 cv
44.874 137.286 45.693 136.989 46.314 136.386 cv
46.926 135.792 47.241 135 47.241 134.01 cv
47.241 133.056 46.971 132.318 46.44 131.787 cv
45.918 131.256 45.171 130.995 44.217 130.995 cv
43.335 130.995 42.687 131.328 42.264 132.003 cv
42.084 132.318 41.958 132.516 41.868 132.606 cv
41.778 132.696 41.679 132.741 41.58 132.741 cv
41.4 132.741 41.31 132.579 41.31 132.264 cv
41.31 130.851 41.823 129.672 42.849 128.718 cv
43.884 127.764 45.162 127.287 46.683 127.287 cv
98.073 144.45 mo
97.245 144.45 96.552 144.738 95.985 145.296 cv
95.427 145.863 95.139 146.538 95.139 147.348 cv
95.139 148.176 95.427 148.86 95.985 149.409 cv
96.552 149.958 97.245 150.237 98.073 150.237 cv
98.901 150.237 99.585 149.967 100.125 149.436 cv
100.656 148.896 100.926 148.212 100.926 147.384 cv
100.926 146.556 100.647 145.863 100.08 145.296 cv
99.522 144.738 98.847 144.45 98.073 144.45 cv
299.646 137.574 mo
298.728 137.574 297.954 137.889 297.333 138.51 cv
296.712 139.131 296.397 139.887 296.397 140.778 cv
296.397 141.696 296.712 142.461 297.333 143.064 cv
297.954 143.676 298.728 143.973 299.646 143.973 cv
300.564 143.973 301.311 143.676 301.905 143.091 cv
302.499 142.497 302.796 141.741 302.796 140.823 cv
302.796 139.905 302.481 139.131 301.86 138.51 cv
301.239 137.889 300.501 137.574 299.646 137.574 cv
96.552 122.787 mo
97.866 122.787 98.865 123.192 99.558 124.011 cv
100.26 124.821 100.602 125.991 100.602 127.512 cv
100.602 128.016 100.566 128.475 100.503 128.871 cv
100.431 129.276 100.305 129.699 100.116 130.158 cv
99.927 130.608 99.657 131.13 99.315 131.715 cv
98.964 132.3 98.487 133.038 97.893 133.92 cv
97.245 134.91 96.777 135.774 96.48 136.521 cv
96.183 137.268 96.039 137.988 96.039 138.69 cv
96.039 139.086 96.093 139.527 96.219 140.004 cv
96.336 140.49 96.489 140.94 96.66 141.372 cv
96.84 141.795 97.029 142.155 97.245 142.434 cv
97.461 142.713 97.65 142.848 97.812 142.848 cv
97.947 142.848 98.01 142.776 98.01 142.614 cv
98.01 142.56 97.974 142.38 97.893 142.092 cv
97.758 141.714 97.668 141.426 97.632 141.21 cv
97.587 140.994 97.569 140.778 97.569 140.571 cv
97.569 139.959 97.74 139.365 98.091 138.807 cv
98.442 138.249 99 137.619 99.774 136.926 cv
100.845 135.99 101.682 135.261 102.276 134.739 cv
102.879 134.217 103.347 133.803 103.68 133.479 cv
104.013 133.155 104.265 132.876 104.445 132.615 cv
104.616 132.363 104.823 132.048 105.066 131.679 cv
105.732 130.581 106.065 129.303 106.065 127.836 cv
106.065 125.91 105.426 124.407 104.148 123.309 cv
102.861 122.22 101.088 121.68 98.82 121.68 cv
97.623 121.68 96.615 121.788 95.805 121.995 cv
94.986 122.202 94.239 122.58 93.546 123.102 cv
92.898 123.615 92.403 124.236 92.043 124.965 cv
91.683 125.703 91.503 126.468 91.503 127.269 cv
91.503 128.178 91.773 128.916 92.322 129.492 cv
92.871 130.068 93.573 130.356 94.419 130.356 cv
95.202 130.356 95.814 130.131 96.282 129.672 cv
96.75 129.222 96.984 128.619 96.984 127.872 cv
96.984 127.152 96.786 126.594 96.39 126.189 cv
95.985 125.793 95.427 125.586 94.707 125.586 cv
94.032 125.586 93.537 125.838 93.222 126.351 cv
93.087 126.594 92.988 126.747 92.925 126.81 cv
92.7 126.909 li
92.565 126.909 92.502 126.792 92.502 126.549 cv
92.502 125.478 92.889 124.587 93.663 123.867 cv
94.437 123.147 95.4 122.787 96.552 122.787 cv
297.936 113.589 mo
299.394 113.589 300.51 114.039 301.284 114.939 cv
302.058 115.839 302.445 117.135 302.445 118.827 cv
302.445 119.385 302.409 119.889 302.337 120.33 cv
302.256 120.78 302.121 121.248 301.914 121.752 cv
301.707 122.256 301.41 122.832 301.023 123.489 cv
300.636 124.137 300.114 124.947 299.466 125.928 cv
298.746 127.026 298.233 127.98 297.9 128.817 cv
297.576 129.645 297.414 130.437 297.414 131.211 cv
297.414 131.652 297.477 132.138 297.612 132.678 cv
297.747 133.209 297.909 133.713 298.098 134.181 cv
298.287 134.658 298.503 135.054 298.737 135.36 cv
298.971 135.675 299.178 135.828 299.358 135.828 cv
299.502 135.828 299.583 135.738 299.583 135.558 cv
299.583 135.504 299.538 135.306 299.448 134.982 cv
299.295 134.568 299.205 134.244 299.16 134.01 cv
299.115 133.767 299.088 133.533 299.088 133.299 cv
299.088 132.615 299.286 131.967 299.664 131.346 cv
300.051 130.725 300.672 130.023 301.527 129.258 cv
302.715 128.223 303.633 127.413 304.299 126.837 cv
304.965 126.261 305.487 125.793 305.856 125.442 cv
306.225 125.082 306.504 124.767 306.693 124.488 cv
306.891 124.2 307.116 123.858 307.386 123.444 cv
308.124 122.229 308.493 120.807 308.493 119.178 cv
308.493 117.045 307.782 115.371 306.36 114.156 cv
304.947 112.941 302.976 112.338 300.465 112.338 cv
299.133 112.338 298.017 112.455 297.108 112.689 cv
296.208 112.932 295.371 113.346 294.606 113.94 cv
293.895 114.498 293.337 115.191 292.941 116.001 cv
292.545 116.82 292.338 117.666 292.338 118.557 cv
292.338 119.565 292.644 120.384 293.247 121.023 cv
293.841 121.662 294.615 121.977 295.569 121.977 cv
296.424 121.977 297.108 121.725 297.63 121.221 cv
298.152 120.717 298.404 120.051 298.404 119.223 cv
298.404 118.422 298.188 117.801 297.738 117.36 cv
297.297 116.919 296.676 116.694 295.875 116.694 cv
295.137 116.694 294.588 116.973 294.237 117.54 cv
294.084 117.801 293.976 117.972 293.904 118.044 cv
293.661 118.161 li
293.508 118.161 293.436 118.026 293.436 117.756 cv
293.436 116.577 293.868 115.587 294.732 114.786 cv
295.587 113.985 296.658 113.589 297.936 113.589 cv
14.976 112.995 mo
11.916 112.995 9.36 114.03 7.29 116.1 cv
5.22 118.17 4.185 120.681 4.185 123.633 cv
4.185 126.684 5.22 129.222 7.29 131.247 cv
9.36 133.263 11.916 134.271 14.976 134.271 cv
18.027 134.271 20.538 133.29 22.509 131.319 cv
24.48 129.348 25.461 126.837 25.461 123.777 cv
25.461 120.726 24.426 118.17 22.356 116.1 cv
20.295 114.03 17.829 112.995 14.976 112.995 cv
9.396 33.174 mo
14.22 33.174 17.919 34.677 20.475 37.683 cv
23.04 40.68 24.318 44.991 24.318 50.598 cv
24.318 52.47 24.192 54.144 23.949 55.62 cv
23.706 57.096 23.238 58.671 22.545 60.345 cv
21.852 62.019 20.871 63.936 19.584 66.096 cv
18.306 68.265 16.587 70.974 14.418 74.223 cv
12.051 77.859 10.323 81.063 9.243 83.817 cv
8.154 86.571 7.614 89.235 7.614 91.791 cv
7.614 93.267 7.83 94.896 8.271 96.66 cv
8.712 98.433 9.252 100.107 9.882 101.682 cv
10.521 103.257 11.232 104.562 12.006 105.597 cv
12.789 106.632 13.473 107.145 14.067 107.145 cv
14.562 107.145 14.805 106.848 14.805 106.263 cv
14.805 106.065 14.661 105.426 14.364 104.337 cv
13.869 102.96 13.554 101.88 13.401 101.097 cv
13.257 100.305 13.185 99.522 13.185 98.73 cv
13.185 96.471 13.824 94.302 15.102 92.232 cv
16.38 90.171 18.441 87.858 21.294 85.293 cv
25.227 81.846 28.296 79.164 30.51 77.247 cv
32.724 75.33 34.443 73.782 35.676 72.594 cv
36.909 71.415 37.836 70.362 38.475 69.426 cv
39.114 68.49 39.879 67.329 40.77 65.952 cv
43.227 61.92 44.451 57.195 44.451 51.777 cv
44.451 44.694 42.093 39.132 37.368 35.091 cv
32.652 31.05 26.118 29.034 17.757 29.034 cv
13.329 29.034 9.621 29.43 6.615 30.222 cv
4.275 30.834 2.07 31.824 0 33.165 cv
0 36.135 li
2.619 34.164 5.751 33.174 9.396 33.174 cv
267.444 75.942 mo
264.105 75.942 261.297 77.076 259.038 79.335 cv
256.77 81.603 255.645 84.348 255.645 87.579 cv
255.645 90.918 256.77 93.69 259.038 95.904 cv
261.297 98.109 264.105 99.216 267.444 99.216 cv
270.783 99.216 273.528 98.136 275.688 95.985 cv
277.839 93.825 278.919 91.08 278.919 87.741 cv
278.919 84.402 277.785 81.603 275.526 79.335 cv
273.258 77.076 270.567 75.942 267.444 75.942 cv
387.693 77.553 mo
385.263 77.553 383.22 78.381 381.573 80.028 cv
379.926 81.666 379.107 83.673 379.107 86.022 cv
379.107 88.461 379.926 90.477 381.573 92.088 cv
383.22 93.69 385.263 94.5 387.693 94.5 cv
390.132 94.5 392.13 93.717 393.696 92.142 cv
395.271 90.576 396.054 88.578 396.054 86.139 cv
396.054 83.709 395.226 81.666 393.579 80.028 cv
391.932 78.381 389.97 77.553 387.693 77.553 cv
216.522 77.319 mo
214.2 77.319 212.265 78.102 210.69 79.668 cv
209.124 81.234 208.341 83.142 208.341 85.383 cv
208.341 87.696 209.124 89.622 210.69 91.152 cv
212.265 92.682 214.2 93.447 216.522 93.447 cv
218.835 93.447 220.743 92.7 222.237 91.206 cv
223.731 89.712 224.478 87.813 224.478 85.491 cv
224.478 83.178 223.686 81.234 222.12 79.668 cv
220.554 78.102 218.682 77.319 216.522 77.319 cv
383.184 14.004 mo
387.045 14.004 389.997 15.201 392.049 17.586 cv
394.101 19.98 395.118 23.409 395.118 27.882 cv
395.118 29.367 395.019 30.699 394.83 31.878 cv
394.632 33.057 394.254 34.308 393.705 35.64 cv
393.156 36.972 392.373 38.502 391.347 40.221 cv
390.321 41.949 388.944 44.109 387.216 46.692 cv
385.326 49.59 383.958 52.146 383.085 54.333 cv
382.221 56.529 381.789 58.653 381.789 60.687 cv
381.789 61.857 381.969 63.153 382.32 64.566 cv
382.671 65.979 383.094 67.311 383.607 68.562 cv
384.111 69.822 384.678 70.857 385.299 71.685 cv
385.92 72.504 386.469 72.918 386.937 72.918 cv
387.333 72.918 387.531 72.684 387.531 72.207 cv
387.531 72.054 387.414 71.541 387.18 70.686 cv
386.784 69.588 386.532 68.724 386.415 68.094 cv
386.298 67.473 386.235 66.843 386.235 66.213 cv
386.235 64.413 386.748 62.685 387.765 61.038 cv
388.782 59.391 390.429 57.546 392.697 55.512 cv
395.829 52.767 398.277 50.634 400.041 49.104 cv
401.796 47.574 403.173 46.341 404.145 45.396 cv
405.126 44.46 405.873 43.614 406.377 42.867 cv
406.89 42.129 407.493 41.202 408.204 40.104 cv
410.157 36.891 411.138 33.129 411.138 28.818 cv
411.138 23.175 409.257 18.747 405.495 15.525 cv
401.733 12.303 396.522 10.692 389.871 10.692 cv
386.343 10.692 383.382 11.007 380.997 11.637 cv
378.603 12.267 376.389 13.374 374.355 14.94 cv
372.474 16.434 370.998 18.252 369.945 20.412 cv
368.883 22.572 368.361 24.822 368.361 27.171 cv
368.361 29.835 369.153 32.013 370.746 33.696 cv
372.339 35.388 374.391 36.225 376.893 36.225 cv
379.17 36.225 380.997 35.559 382.365 34.227 cv
383.733 32.895 384.426 31.131 384.426 28.935 cv
384.426 26.82 383.832 25.173 382.662 23.994 cv
381.483 22.824 379.836 22.23 377.721 22.23 cv
375.759 22.23 374.31 22.977 373.365 24.471 cv
372.978 25.173 372.681 25.623 372.483 25.821 cv
372.294 26.019 372.078 26.109 371.844 26.109 cv
371.448 26.109 371.25 25.758 371.25 25.056 cv
371.25 21.924 372.393 19.296 374.679 17.181 cv
376.965 15.066 379.8 14.004 383.184 14.004 cv
212.265 16.776 mo
215.919 16.776 218.709 17.91 220.644 20.187 cv
222.579 22.464 223.551 25.731 223.551 29.979 cv
223.551 31.401 223.452 32.67 223.263 33.786 cv
223.083 34.911 222.723 36.099 222.201 37.368 cv
221.679 38.637 220.941 40.095 219.969 41.733 cv
218.997 43.38 217.692 45.432 216.054 47.898 cv
214.263 50.652 212.958 53.082 212.139 55.17 cv
211.32 57.258 210.906 59.274 210.906 61.218 cv
210.906 62.334 211.077 63.567 211.419 64.908 cv
211.752 66.249 212.166 67.527 212.661 68.715 cv
213.147 69.912 213.687 70.902 214.29 71.685 cv
214.893 72.468 215.415 72.855 215.865 72.855 cv
216.234 72.855 216.423 72.63 216.423 72.189 cv
216.423 72.036 216.315 71.55 216.09 70.731 cv
215.712 69.687 215.469 68.868 215.361 68.265 cv
215.253 67.671 215.19 67.077 215.19 66.474 cv
215.19 64.764 215.676 63.117 216.648 61.551 cv
217.62 59.985 219.177 58.23 221.346 56.286 cv
224.325 53.676 226.656 51.642 228.33 50.184 cv
230.004 48.735 231.309 47.556 232.245 46.665 cv
233.172 45.765 233.883 44.964 234.369 44.253 cv
234.855 43.542 235.431 42.669 236.106 41.625 cv
237.969 38.565 238.896 34.983 238.896 30.879 cv
238.896 25.506 237.105 21.285 233.532 18.225 cv
229.95 15.165 225 13.635 218.664 13.635 cv
215.307 13.635 212.49 13.932 210.222 14.526 cv
207.945 15.129 205.839 16.173 203.904 17.667 cv
202.113 19.089 200.718 20.826 199.71 22.878 cv
198.702 24.93 198.198 27.072 198.198 29.313 cv
198.198 31.851 198.963 33.921 200.493 35.523 cv
202.014 37.125 203.967 37.935 206.361 37.935 cv
208.521 37.935 210.258 37.296 211.563 36.027 cv
212.868 34.758 213.525 33.084 213.525 30.987 cv
213.525 28.971 212.967 27.405 211.842 26.289 cv
210.726 25.173 209.16 24.606 207.144 24.606 cv
205.281 24.606 203.895 25.317 203.004 26.739 cv
202.626 27.405 202.347 27.837 202.158 28.026 cv
201.978 28.206 201.771 28.305 201.546 28.305 cv
201.168 28.305 200.988 27.963 200.988 27.297 cv
200.988 24.309 202.068 21.807 204.228 19.791 cv
206.388 17.784 209.061 16.776 212.265 16.776 cv
276.768 0 mo
277.335 2.187 277.632 4.635 277.632 7.389 cv
277.632 9.441 277.497 11.286 277.227 12.906 cv
276.957 14.526 276.444 16.254 275.688 18.09 cv
274.941 19.926 273.861 22.032 272.457 24.408 cv
271.053 26.784 269.172 29.754 266.796 33.318 cv
264.213 37.323 262.323 40.833 261.135 43.857 cv
259.947 46.881 259.353 49.797 259.353 52.605 cv
259.353 54.225 259.596 56.016 260.082 57.96 cv
260.568 59.904 261.162 61.74 261.855 63.468 cv
262.557 65.196 263.34 66.627 264.204 67.761 cv
265.059 68.895 265.815 69.462 266.463 69.462 cv
267.003 69.462 267.282 69.138 267.282 68.49 cv
267.282 68.274 267.12 67.572 266.796 66.384 cv
266.256 64.872 265.896 63.684 265.743 62.82 cv
265.572 61.956 265.5 61.092 265.5 60.228 cv
265.5 57.744 266.193 55.368 267.597 53.1 cv
269.001 50.823 271.26 48.285 274.383 45.477 cv
278.694 41.697 282.06 38.754 284.49 36.648 cv
286.911 34.542 288.801 32.841 290.151 31.545 cv
291.492 30.249 292.518 29.079 293.22 28.053 cv
293.922 27.027 294.759 25.758 295.722 24.246 cv
298.422 19.818 299.763 14.634 299.763 8.685 cv
299.763 5.508 299.313 2.619 298.44 0 cv
276.768 0 li
320.751 54.279 mo
319.554 54.279 318.555 54.684 317.745 55.494 cv
316.935 56.295 316.539 57.285 316.539 58.437 cv
316.539 59.625 316.935 60.624 317.745 61.407 cv
318.555 62.199 319.554 62.595 320.751 62.595 cv
321.948 62.595 322.929 62.208 323.694 61.443 cv
324.468 60.669 324.855 59.688 324.855 58.491 cv
324.855 57.303 324.45 56.295 323.64 55.494 cv
322.83 54.684 321.867 54.279 320.751 54.279 cv
2.601 43.506 mo
1.629 43.506 .765 43.659 0 43.947 cv
0 60.975 li
.504 61.038 1.026 61.083 1.566 61.083 cv
4.419 61.083 6.705 60.246 8.433 58.572 cv
10.152 56.898 11.016 54.684 11.016 51.93 cv
11.016 49.275 10.278 47.205 8.802 45.729 cv
7.317 44.253 5.256 43.506 2.601 43.506 cv
318.555 23.004 mo
320.436 23.004 321.885 23.589 322.884 24.768 cv
323.892 25.947 324.387 27.63 324.387 29.817 cv
324.387 30.555 324.342 31.212 324.243 31.788 cv
324.144 32.364 323.964 32.976 323.694 33.633 cv
323.424 34.29 323.037 35.037 322.542 35.883 cv
322.038 36.729 321.363 37.791 320.517 39.06 cv
319.59 40.491 318.915 41.742 318.492 42.813 cv
318.069 43.893 317.853 44.937 317.853 45.936 cv
317.853 46.512 317.943 47.151 318.114 47.844 cv
318.285 48.537 318.492 49.194 318.744 49.806 cv
318.987 50.418 319.266 50.931 319.572 51.336 cv
319.878 51.741 320.148 51.939 320.382 51.939 cv
320.571 51.939 320.67 51.831 320.67 51.597 cv
320.67 51.516 320.607 51.273 320.499 50.85 cv
320.301 50.31 320.175 49.887 320.121 49.572 cv
320.067 49.266 320.031 48.96 320.031 48.654 cv
320.031 47.763 320.283 46.917 320.787 46.107 cv
321.291 45.297 322.101 44.397 323.217 43.398 cv
324.765 42.048 325.971 40.995 326.835 40.248 cv
327.708 39.492 328.383 38.889 328.869 38.43 cv
329.346 37.962 329.715 37.548 329.967 37.188 cv
330.219 36.819 330.516 36.369 330.867 35.829 cv
331.83 34.254 332.316 32.4 332.316 30.285 cv
332.316 27.513 331.389 25.335 329.544 23.76 cv
327.69 22.185 325.134 21.402 321.858 21.402 cv
320.121 21.402 318.672 21.555 317.493 21.861 cv
316.323 22.167 315.234 22.698 314.235 23.472 cv
313.308 24.201 312.588 25.092 312.066 26.154 cv
311.544 27.216 311.283 28.323 311.283 29.475 cv
311.283 30.78 311.679 31.851 312.462 32.679 cv
313.245 33.507 314.253 33.921 315.486 33.921 cv
316.602 33.921 317.502 33.597 318.177 32.94 cv
318.843 32.283 319.185 31.419 319.185 30.339 cv
319.185 29.304 318.897 28.494 318.321 27.918 cv
317.736 27.342 316.935 27.045 315.891 27.045 cv
314.928 27.045 314.217 27.414 313.758 28.143 cv
313.56 28.494 313.416 28.719 313.326 28.809 cv
313.227 28.908 313.119 28.953 313.002 28.953 cv
312.813 28.953 312.714 28.782 312.714 28.44 cv
312.714 26.892 313.272 25.605 314.388 24.561 cv
315.513 23.526 316.899 23.004 318.555 23.004 cv
41.193 0 mo
40.968 1.179 40.851 2.403 40.851 3.672 cv
40.851 8.82 42.588 13.095 46.071 16.497 cv
49.554 19.89 53.874 21.6 59.013 21.6 cv
64.161 21.6 68.391 19.935 71.712 16.614 cv
75.024 13.302 76.689 9.072 76.689 3.924 cv
76.689 2.556 76.554 1.251 76.311 0 cv
41.193 0 li
241.812 0 mo
241.137 2.079 240.795 4.221 240.795 6.417 cv
240.795 10.098 241.893 13.095 244.089 15.417 cv
246.285 17.739 249.111 18.9 252.567 18.9 cv
255.708 18.9 258.219 17.982 260.109 16.146 cv
261.999 14.31 262.944 11.88 262.944 8.856 cv
262.944 5.931 262.134 3.663 260.514 2.043 cv
259.533 1.062 258.318 .387 256.86 0 cv
251.127 0 li
249.696 .468 248.553 1.359 247.707 2.691 cv
247.167 3.663 246.762 4.284 246.492 4.554 cv
246.222 4.824 245.925 4.959 245.601 4.959 cv
245.061 4.959 244.791 4.473 244.791 3.501 cv
244.791 2.277 244.935 1.116 245.187 0 cv
241.812 0 li
131.049 305.001 mo
95.004 305.001 li
94.104 303.102 92.934 301.419 91.476 299.961 cv
87.669 296.154 82.341 294.246 75.492 294.246 cv
69.147 294.246 64.449 296.667 61.407 301.482 cv
60.543 303.039 59.823 304.209 59.247 305.001 cv
54.702 305.001 li
54.603 304.542 54.558 304.011 54.558 303.381 cv
54.558 293.238 58.23 284.733 65.583 277.884 cv
72.936 271.026 82.062 267.606 92.961 267.606 cv
105.39 267.606 114.894 271.476 121.491 279.216 cv
126.882 285.552 130.068 294.147 131.049 305.001 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.921569 .67451 .101961 ]
/C1 [1 1 1 ]
/N 1.90443 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2oqrVc]nrVcZlr;?Kjr;6Bgqtp9fqtg0cqYL'bq>'j^q>'j^q"XXZq"XXZp\4FVp\4FVp\+=S
p@e4Rp@\+Op%A"Np%A"Mo^qeJo^qeJoCMSFoCMSFoCMPDo()ABo()ABo'u8?naZ/>naZ/>nF5r:nF5r:
nF5r:nF,i7n*f`6n*f`6n*f`5mdBN2mdBN2mdBN2mdBK0mHs<.mHs<.mHs<.mHs<.m-O**m-O**m-O**
m-O**m-O**m-O*)lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&lg*m&
~>
<~s8Muqr;6BfqYBp]p\4CSp%7nJoCDGAnF5o8mdBK/m-F!&lKRQski_-kjlPRaj5].YiSi_Qhr!;Ih;-lA
gY:K:g=b03f[na+f%&=$eC;srdaHRkdEp7dcd0n^c-=MWbfe2Qb0%iJaiMQEa2c6?`l5p9`5KU3_o'@.
_SO()^qdb#^V@Ls^:q:o]tD"j]Xtef]"5Ja\[f8]\@B&Y\$riU[^NWQ[C*EM[C!<J['[0GZa7!DZEgdA
Z*CR=Z*CO;Yct@9YHP.5YHP.5Y-+q1Y-+q1Xf\_-Xf\_-Xf\_,XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)
~>
<~s8Dijq"F@OnaGo4lKRKojPo.UhV?i<f@JI#dEp1`bK@oH`PfX0^V7@m\[],V['Hs?Y-"b)WMcViUS=HS
St2@>R?s5)P`h/jO,]*VMMR%BKnP)0J:E#rI!U'_GBS+NF)l5<DJa3*C2%?oAn>L_@UWYO?<pf?>$5!1
=&r=#;c6Ih:esh\9M8#N8Ou?A7R]^46UF((5X.Fr4Zkef3]T2[2`EWQ2)I-G1,:R=0JG.4/hJY+/1W5#
.Ocep-mpAi-71#b,pX`\,9nBV+sA*P+<VdK+!2OF*Zc=B*??+>*#oq;)]K_8)]K\6)B'M4)B'M4)B'M4
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
newpath
12.141 305.001 mo
7.137 305.001 li
7.956 304.821 8.811 304.722 9.72 304.722 cv
10.566 304.722 11.367 304.821 12.141 305.001 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.929412 .713726 .211765 ]
/C1 [1 1 1 ]
/N 1.90443 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrVc]nrVc]nr;?Kjr;?Kjqtp9fqtp9fqYL'bqYL'bqYBs_q>'j^q>'g\q"XXZq"XXYp\4FV
p\4FVp@e4Rp@e4Rp@e4Qp%A"Np%A"Np%7nKo^qeJo^qeJo^h\GoCMSFoCMSFoCDJCo()ABo()ABo()>@
naZ/>naZ/>naZ/>nF5r:nF5r:nF5r:nF5r:nF,i7n*f`6n*f`6n*f`6n*f`6mdBN2mdBN2mdBN2mdBN2
mdBN2mdBN2mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
~>
<~s8Muqr;?HhqYL$`q"XUXp@e1Po^qbHo()>@nF5o8mdBK0m-O'(lK[Wukih6nkN:pgjlGL`j5].YiSibR
i8<GKhVR)Egt^]>gY1B8g"G$1f[na,f%/C%e^W*ue'ldodaHOjdEp7ecd0q_cHa\Zc-4DUbKJ)Ob0%lK
aiVWFaN2EBa2Z-=`l5p9`Pf^5`5BL1_ns:-_SO()_83q&^qd_"^V@Ot^:q=q]tM+m]tM(k]Y(ni]=Y\e
]=YYc]"5Ja]",A^\[f8]\[]/Z\@B&Y\@B#W\$riU\$riU\$rfS[^NWQ[^NWQ[^NWQ[^NWQ[^NWQ[^NWQ
~>
<~s8Dllq=jUToC;><mHj-&kN:jcio&_NgtUN7f@AC"dEp4abfe/Ma2Z'8_SO"$]tCqe\@8oRZa-j?Y-"e+
Wi;nnV50l\TqJ!JS=>t8R$X,(P`q8mOH5E]N/NRMLkg_=KS+l-J:E#rI!^0cH$FOVF`_\GEcH&:DJj<-
CMITuBP1siARo:\@UW\Q?X@&E>[1K:>$4s0=&r@%<E)mq;Gp@g:esk^:/+DU91qlL8P)HD7n6'=7R]a6
6pj=/6:*t(5sR\#5<h=q5!;%l4Zkhh4$,Mc3]];_3B9)[3&ilW3&iiU2`EZS2`<QP2E!HO2E!HO2E!HO
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
newpath
0 251.64 mo
0 234.837 li
1.368 235.197 2.511 235.827 3.42 236.736 cv
4.914 238.23 5.661 240.327 5.661 243.018 cv
5.661 245.799 4.788 248.04 3.051 249.732 cv
2.178 250.578 1.161 251.217 0 251.64 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
8.82 298.872 mo
8.226 298.872 7.524 298.35 6.723 297.306 cv
5.922 296.262 5.193 294.939 4.545 293.346 cv
3.888 291.753 3.339 290.061 2.889 288.27 cv
2.439 286.479 2.214 284.832 2.214 283.338 cv
2.214 280.755 2.763 278.064 3.852 275.274 cv
4.95 272.484 6.687 269.253 9.072 265.563 cv
11.259 262.278 12.996 259.542 14.292 257.355 cv
15.579 255.159 16.578 253.224 17.271 251.523 cv
17.973 249.84 18.441 248.247 18.693 246.744 cv
18.936 245.25 19.062 243.558 19.062 241.668 cv
19.062 235.989 17.766 231.633 15.183 228.6 cv
12.6 225.567 8.874 224.046 3.996 224.046 cv
2.583 224.046 1.26 224.208 0 224.496 cv
0 221.481 li
.414 221.346 .819 221.202 1.242 221.085 cv
4.275 220.302 8.028 219.906 12.501 219.906 cv
20.952 219.906 27.558 221.94 32.328 226.008 cv
37.098 230.076 39.483 235.692 39.483 242.865 cv
39.483 248.337 38.241 253.116 35.757 257.202 cv
34.866 258.597 34.101 259.767 33.453 260.712 cv
32.805 261.657 31.869 262.728 30.627 263.925 cv
29.385 265.122 27.648 266.688 25.416 268.632 cv
23.184 270.567 20.079 273.285 16.11 276.768 cv
13.23 279.36 11.151 281.7 9.864 283.788 cv
8.568 285.876 7.929 288.072 7.929 290.358 cv
7.929 291.159 8.001 291.951 8.145 292.752 cv
8.298 293.544 8.622 294.642 9.117 296.037 cv
9.423 297.135 9.567 297.774 9.567 297.981 cv
9.567 298.575 9.324 298.872 8.82 298.872 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
129.267 202.653 mo
124.128 202.653 119.808 200.952 116.325 197.55 cv
112.842 194.148 111.096 189.882 111.096 184.734 cv
111.096 179.757 112.842 175.527 116.325 172.044 cv
119.808 168.552 124.128 166.815 129.267 166.815 cv
134.082 166.815 138.231 168.552 141.714 172.044 cv
145.197 175.527 146.943 179.838 146.943 184.986 cv
146.943 190.125 145.278 194.355 141.966 197.676 cv
138.645 200.997 134.415 202.653 129.267 202.653 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
127.872 156.924 mo
126.873 156.924 125.712 156.06 124.389 154.314 cv
123.066 152.577 121.869 150.381 120.798 147.735 cv
119.718 145.08 118.809 142.263 118.071 139.284 cv
117.324 136.305 116.955 133.569 116.955 131.085 cv
116.955 126.783 117.864 122.31 119.682 117.666 cv
121.491 113.031 124.38 107.649 128.349 101.52 cv
131.976 96.048 134.874 91.503 137.016 87.849 cv
139.167 84.213 140.814 80.982 141.966 78.165 cv
143.127 75.348 143.91 72.702 144.324 70.218 cv
144.729 67.725 144.945 64.917 144.945 61.767 cv
144.945 52.326 142.794 45.081 138.492 40.023 cv
134.19 34.974 127.989 32.445 119.88 32.445 cv
112.77 32.445 106.812 34.686 102.015 39.159 cv
97.218 43.632 94.824 49.176 94.824 55.8 cv
94.824 57.294 95.238 58.041 96.066 58.041 cv
96.561 58.041 97.011 57.834 97.434 57.42 cv
97.839 57.006 98.46 56.052 99.297 54.558 cv
101.277 51.417 104.346 49.842 108.486 49.842 cv
112.959 49.842 116.433 51.084 118.917 53.568 cv
121.401 56.052 122.652 59.526 122.652 63.999 cv
122.652 68.643 121.194 72.369 118.296 75.186 cv
115.398 77.994 111.546 79.407 106.749 79.407 cv
101.448 79.407 97.083 77.625 93.663 74.061 cv
90.252 70.506 88.542 65.907 88.542 60.273 cv
88.542 55.305 89.658 50.544 91.89 45.99 cv
94.122 41.436 97.227 37.584 101.205 34.434 cv
105.507 31.113 110.187 28.782 115.236 27.45 cv
120.285 26.118 126.531 25.452 133.983 25.452 cv
148.05 25.452 159.057 28.854 167.004 35.658 cv
174.951 42.462 178.929 51.831 178.929 63.756 cv
178.929 72.864 176.859 80.811 172.728 87.606 cv
171.243 89.928 169.956 91.872 168.885 93.447 cv
167.814 95.013 166.248 96.795 164.178 98.784 cv
162.108 100.773 159.219 103.383 155.502 106.614 cv
151.785 109.845 146.619 114.354 140.013 120.15 cv
135.216 124.461 131.742 128.349 129.6 131.832 cv
127.449 135.306 126.378 138.951 126.378 142.758 cv
126.378 144.081 126.504 145.413 126.747 146.736 cv
126.999 148.059 127.539 149.886 128.367 152.199 cv
128.862 154.026 129.114 155.106 129.114 155.43 cv
129.114 156.429 128.7 156.924 127.872 156.924 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
59.013 21.6 mo
53.874 21.6 49.554 19.89 46.071 16.497 cv
42.588 13.095 40.851 8.82 40.851 3.672 cv
40.851 2.403 40.968 1.179 41.193 0 cv
76.311 0 li
76.554 1.251 76.689 2.556 76.689 3.924 cv
76.689 9.072 75.024 13.302 71.712 16.614 cv
68.391 19.935 64.161 21.6 59.013 21.6 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
266.148 280.755 mo
265.491 280.755 264.735 280.188 263.88 279.054 cv
263.016 277.92 262.233 276.489 261.531 274.77 cv
260.829 273.042 260.244 271.206 259.758 269.262 cv
259.272 267.318 259.029 265.536 259.029 263.916 cv
259.029 261.108 259.623 258.192 260.82 255.168 cv
262.017 252.153 263.916 248.643 266.526 244.647 cv
268.92 241.083 270.819 238.113 272.232 235.737 cv
273.645 233.37 274.734 231.264 275.49 229.428 cv
276.255 227.592 276.768 225.864 277.038 224.244 cv
277.317 222.624 277.452 220.797 277.452 218.736 cv
277.452 212.589 276.039 207.864 273.222 204.57 cv
270.405 201.276 266.337 199.629 261.027 199.629 cv
256.365 199.629 252.468 201.096 249.327 204.003 cv
246.177 206.919 244.611 210.537 244.611 214.857 cv
244.611 215.829 244.881 216.315 245.421 216.315 cv
245.745 216.315 246.042 216.18 246.312 215.91 cv
246.582 215.64 246.987 215.019 247.527 214.047 cv
248.814 211.995 250.812 210.969 253.512 210.969 cv
256.428 210.969 258.696 211.779 260.316 213.399 cv
261.936 215.019 262.746 217.287 262.746 220.194 cv
262.746 223.218 261.801 225.648 259.911 227.484 cv
258.021 229.32 255.51 230.238 252.378 230.238 cv
248.931 230.238 246.105 229.077 243.909 226.755 cv
241.704 224.433 240.606 221.436 240.606 217.764 cv
240.606 214.533 241.335 211.428 242.793 208.458 cv
244.26 205.488 246.276 202.977 248.868 200.925 cv
251.676 198.756 254.727 197.235 258.03 196.371 cv
261.315 195.498 265.401 195.066 270.261 195.066 cv
279.441 195.066 286.623 197.28 291.807 201.726 cv
296.991 206.163 299.583 212.265 299.583 220.032 cv
299.583 225.972 298.233 231.156 295.524 235.575 cv
294.552 237.087 293.715 238.356 293.004 239.391 cv
292.302 240.417 291.276 241.569 289.926 242.865 cv
288.576 244.161 286.677 245.862 284.247 247.968 cv
281.808 250.074 278.424 253.017 274.104 256.788 cv
270.963 259.596 268.686 262.134 267.282 264.402 cv
265.869 266.67 265.167 269.046 265.167 271.521 cv
265.167 272.394 265.248 273.258 265.41 274.122 cv
265.572 274.977 265.923 276.165 266.463 277.677 cv
266.787 278.865 266.949 279.567 266.949 279.783 cv
266.949 280.431 266.688 280.755 266.148 280.755 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
277.056 305.001 mo
257.004 305.001 li
255.888 303.21 255.321 301.149 255.321 298.8 cv
255.321 295.569 256.446 292.824 258.714 290.556 cv
260.973 288.297 263.772 287.163 267.12 287.163 cv
270.243 287.163 272.934 288.297 275.193 290.556 cv
277.461 292.824 278.595 295.623 278.595 298.962 cv
278.595 301.257 278.073 303.264 277.056 305.001 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
186.462 204.174 mo
186.057 204.174 185.58 203.814 185.04 203.103 cv
184.5 202.392 184.005 201.492 183.564 200.412 cv
183.132 199.323 182.754 198.171 182.448 196.956 cv
182.151 195.732 181.998 194.616 181.998 193.599 cv
181.998 191.835 182.367 190.008 183.105 188.109 cv
183.852 186.21 185.031 184.005 186.642 181.503 cv
188.127 179.262 189.306 177.399 190.179 175.905 cv
191.061 174.42 191.736 173.097 192.204 171.945 cv
192.672 170.793 192.996 169.704 193.167 168.687 cv
193.338 167.679 193.419 166.518 193.419 165.231 cv
193.419 161.37 192.537 158.409 190.782 156.339 cv
189.027 154.269 186.489 153.234 183.177 153.234 cv
180.261 153.234 177.831 154.152 175.869 155.979 cv
173.907 157.815 172.926 160.083 172.926 162.792 cv
172.926 163.404 173.097 163.71 173.439 163.71 cv
173.637 163.71 173.826 163.62 173.997 163.458 cv
174.168 163.287 174.42 162.9 174.753 162.288 cv
175.572 161.001 176.823 160.353 178.515 160.353 cv
180.351 160.353 181.773 160.866 182.79 161.883 cv
183.807 162.9 184.311 164.322 184.311 166.149 cv
184.311 168.048 183.717 169.569 182.538 170.721 cv
181.35 171.873 179.775 172.449 177.804 172.449 cv
175.635 172.449 173.853 171.729 172.458 170.271 cv
171.054 168.813 170.361 166.932 170.361 164.628 cv
170.361 162.594 170.811 160.641 171.729 158.778 cv
172.647 156.915 173.916 155.34 175.536 154.053 cv
177.3 152.694 179.217 151.74 181.278 151.2 cv
183.348 150.651 185.904 150.381 188.955 150.381 cv
194.706 150.381 199.215 151.776 202.464 154.557 cv
205.713 157.338 207.342 161.172 207.342 166.05 cv
207.342 169.776 206.496 173.025 204.804 175.806 cv
204.201 176.76 203.67 177.552 203.238 178.2 cv
202.797 178.839 202.149 179.568 201.312 180.387 cv
200.466 181.197 199.278 182.268 197.757 183.582 cv
196.236 184.905 194.13 186.75 191.43 189.126 cv
189.468 190.89 188.046 192.483 187.164 193.905 cv
186.291 195.327 185.85 196.821 185.85 198.378 cv
185.85 198.918 185.904 199.458 186.003 200.007 cv
186.102 200.547 186.327 201.294 186.66 202.239 cv
186.867 202.986 186.966 203.427 186.966 203.562 cv
186.966 203.967 186.795 204.174 186.462 204.174 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
187.056 222.921 mo
184.959 222.921 183.195 222.228 181.773 220.833 cv
180.351 219.447 179.64 217.701 179.64 215.604 cv
179.64 213.57 180.351 211.842 181.773 210.42 cv
183.195 208.998 184.959 208.287 187.056 208.287 cv
189.027 208.287 190.719 208.998 192.141 210.42 cv
193.563 211.842 194.274 213.606 194.274 215.703 cv
194.274 217.809 193.599 219.528 192.24 220.887 cv
190.89 222.237 189.162 222.921 187.056 222.921 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
48.663 163.485 mo
47.574 163.485 46.656 163.125 45.918 162.405 cv
45.18 161.685 44.811 160.776 44.811 159.687 cv
44.811 158.625 45.18 157.734 45.918 156.996 cv
46.656 156.249 47.574 155.88 48.663 155.88 cv
49.68 155.88 50.562 156.249 51.3 156.996 cv
52.038 157.734 52.416 158.643 52.416 159.741 cv
52.416 160.83 52.065 161.73 51.354 162.432 cv
50.652 163.134 49.752 163.485 48.663 163.485 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
48.339 153.792 mo
48.123 153.792 47.88 153.612 47.601 153.234 cv
47.322 152.865 47.07 152.406 46.836 151.839 cv
46.611 151.272 46.422 150.669 46.26 150.039 cv
46.098 149.4 46.026 148.824 46.026 148.293 cv
46.026 147.375 46.215 146.421 46.611 145.44 cv
46.998 144.45 47.628 143.298 48.483 141.993 cv
49.266 140.832 49.887 139.86 50.346 139.086 cv
50.814 138.312 51.165 137.619 51.417 137.025 cv
51.66 136.422 51.831 135.864 51.921 135.333 cv
52.011 134.802 52.056 134.199 52.056 133.533 cv
52.056 131.526 51.597 129.978 50.67 128.907 cv
49.752 127.827 48.42 127.287 46.683 127.287 cv
45.162 127.287 43.884 127.764 42.849 128.718 cv
41.823 129.672 41.31 130.851 41.31 132.264 cv
41.31 132.579 41.4 132.741 41.58 132.741 cv
41.679 132.741 41.778 132.696 41.868 132.606 cv
41.958 132.516 42.084 132.318 42.264 132.003 cv
42.687 131.328 43.335 130.995 44.217 130.995 cv
45.171 130.995 45.918 131.256 46.44 131.787 cv
46.971 132.318 47.241 133.056 47.241 134.01 cv
47.241 135 46.926 135.792 46.314 136.386 cv
45.693 136.989 44.874 137.286 43.848 137.286 cv
42.723 137.286 41.796 136.908 41.076 136.152 cv
40.356 135.396 39.987 134.415 39.987 133.218 cv
39.987 132.156 40.23 131.139 40.707 130.176 cv
41.184 129.204 41.841 128.385 42.687 127.71 cv
43.605 126.999 44.604 126.504 45.684 126.216 cv
46.755 125.937 48.096 125.793 49.68 125.793 cv
52.686 125.793 55.026 126.513 56.727 127.971 cv
58.419 129.42 59.265 131.418 59.265 133.956 cv
59.265 135.9 58.824 137.592 57.942 139.032 cv
57.627 139.527 57.348 139.941 57.114 140.274 cv
56.889 140.616 56.556 140.994 56.115 141.417 cv
55.665 141.84 55.053 142.389 54.252 143.082 cv
53.46 143.766 52.353 144.729 50.94 145.962 cv
49.914 146.88 49.167 147.708 48.708 148.455 cv
48.249 149.193 48.024 149.967 48.024 150.777 cv
48.024 151.065 48.051 151.344 48.105 151.623 cv
48.15 151.911 48.267 152.298 48.447 152.793 cv
48.555 153.18 48.6 153.405 48.6 153.477 cv
48.6 153.693 48.519 153.792 48.339 153.792 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
98.073 150.237 mo
97.245 150.237 96.552 149.958 95.985 149.409 cv
95.427 148.86 95.139 148.176 95.139 147.348 cv
95.139 146.538 95.427 145.863 95.985 145.296 cv
96.552 144.738 97.245 144.45 98.073 144.45 cv
98.847 144.45 99.522 144.738 100.08 145.296 cv
100.647 145.863 100.926 146.556 100.926 147.384 cv
100.926 148.212 100.656 148.896 100.125 149.436 cv
99.585 149.967 98.901 150.237 98.073 150.237 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
97.812 142.848 mo
97.65 142.848 97.461 142.713 97.245 142.434 cv
97.029 142.155 96.84 141.795 96.66 141.372 cv
96.489 140.94 96.336 140.49 96.219 140.004 cv
96.093 139.527 96.039 139.086 96.039 138.69 cv
96.039 137.988 96.183 137.268 96.48 136.521 cv
96.777 135.774 97.245 134.91 97.893 133.92 cv
98.487 133.038 98.964 132.3 99.315 131.715 cv
99.657 131.13 99.927 130.608 100.116 130.158 cv
100.305 129.699 100.431 129.276 100.503 128.871 cv
100.566 128.475 100.602 128.016 100.602 127.512 cv
100.602 125.991 100.26 124.821 99.558 124.011 cv
98.865 123.192 97.866 122.787 96.552 122.787 cv
95.4 122.787 94.437 123.147 93.663 123.867 cv
92.889 124.587 92.502 125.478 92.502 126.549 cv
92.502 126.792 92.565 126.909 92.7 126.909 cv
92.925 126.81 li
92.988 126.747 93.087 126.594 93.222 126.351 cv
93.537 125.838 94.032 125.586 94.707 125.586 cv
95.427 125.586 95.985 125.793 96.39 126.189 cv
96.786 126.594 96.984 127.152 96.984 127.872 cv
96.984 128.619 96.75 129.222 96.282 129.672 cv
95.814 130.131 95.202 130.356 94.419 130.356 cv
93.573 130.356 92.871 130.068 92.322 129.492 cv
91.773 128.916 91.503 128.178 91.503 127.269 cv
91.503 126.468 91.683 125.703 92.043 124.965 cv
92.403 124.236 92.898 123.615 93.546 123.102 cv
94.239 122.58 94.986 122.202 95.805 121.995 cv
96.615 121.788 97.623 121.68 98.82 121.68 cv
101.088 121.68 102.861 122.22 104.148 123.309 cv
105.426 124.407 106.065 125.91 106.065 127.836 cv
106.065 129.303 105.732 130.581 105.066 131.679 cv
104.823 132.048 104.616 132.363 104.445 132.615 cv
104.265 132.876 104.013 133.155 103.68 133.479 cv
103.347 133.803 102.879 134.217 102.276 134.739 cv
101.682 135.261 100.845 135.99 99.774 136.926 cv
99 137.619 98.442 138.249 98.091 138.807 cv
97.74 139.365 97.569 139.959 97.569 140.571 cv
97.569 140.778 97.587 140.994 97.632 141.21 cv
97.668 141.426 97.758 141.714 97.893 142.092 cv
97.974 142.38 98.01 142.56 98.01 142.614 cv
98.01 142.776 97.947 142.848 97.812 142.848 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
72.864 221.535 mo
71.406 221.535 70.173 221.049 69.183 220.086 cv
68.184 219.114 67.689 217.899 67.689 216.432 cv
67.689 215.01 68.184 213.813 69.183 212.814 cv
70.173 211.824 71.406 211.329 72.864 211.329 cv
74.241 211.329 75.42 211.824 76.41 212.814 cv
77.409 213.813 77.904 215.037 77.904 216.504 cv
77.904 217.971 77.427 219.177 76.482 220.122 cv
75.537 221.067 74.331 221.535 72.864 221.535 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
72.441 208.521 mo
72.153 208.521 71.82 208.278 71.451 207.783 cv
71.073 207.279 70.731 206.658 70.425 205.902 cv
70.119 205.146 69.858 204.345 69.651 203.49 cv
69.435 202.644 69.336 201.861 69.336 201.15 cv
69.336 199.926 69.597 198.648 70.11 197.325 cv
70.632 196.002 71.46 194.472 72.585 192.726 cv
73.629 191.16 74.448 189.864 75.069 188.82 cv
75.681 187.785 76.149 186.867 76.482 186.066 cv
76.815 185.256 77.031 184.5 77.157 183.789 cv
77.274 183.087 77.328 182.286 77.328 181.386 cv
77.328 178.686 76.716 176.625 75.483 175.185 cv
74.259 173.745 72.486 173.025 70.173 173.025 cv
68.139 173.025 66.438 173.664 65.07 174.933 cv
63.702 176.211 63.018 177.795 63.018 179.685 cv
63.018 180.108 63.135 180.324 63.369 180.324 cv
63.513 180.324 63.639 180.261 63.756 180.144 cv
63.873 180.027 64.053 179.757 64.296 179.325 cv
64.854 178.434 65.727 177.984 66.915 177.984 cv
68.184 177.984 69.183 178.335 69.885 179.046 cv
70.596 179.757 70.947 180.747 70.947 182.025 cv
70.947 183.348 70.542 184.41 69.714 185.211 cv
68.886 186.012 67.788 186.417 66.42 186.417 cv
64.908 186.417 63.666 185.904 62.685 184.896 cv
61.713 183.879 61.227 182.565 61.227 180.963 cv
61.227 179.541 61.551 178.182 62.19 176.886 cv
62.829 175.581 63.711 174.483 64.845 173.592 cv
66.078 172.638 67.41 171.972 68.85 171.594 cv
70.299 171.216 72.081 171.027 74.205 171.027 cv
78.228 171.027 81.369 171.999 83.637 173.934 cv
85.905 175.878 87.039 178.551 87.039 181.953 cv
87.039 184.554 86.445 186.813 85.266 188.757 cv
84.843 189.414 84.474 189.972 84.168 190.422 cv
83.862 190.872 83.412 191.376 82.827 191.943 cv
82.233 192.51 81.405 193.257 80.343 194.175 cv
79.281 195.093 77.805 196.38 75.915 198.036 cv
74.538 199.26 73.548 200.376 72.936 201.366 cv
72.315 202.356 72.009 203.4 72.009 204.48 cv
72.009 204.858 72.045 205.245 72.117 205.614 cv
72.189 206.001 72.342 206.514 72.576 207.18 cv
72.72 207.693 72.792 208.008 72.792 208.098 cv
72.792 208.386 72.675 208.521 72.441 208.521 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
225.036 187.344 mo
224.379 187.344 223.623 186.777 222.768 185.634 cv
221.904 184.5 221.121 183.06 220.419 181.332 cv
219.726 179.595 219.132 177.75 218.646 175.806 cv
218.16 173.853 217.917 172.062 217.917 170.442 cv
217.917 167.625 218.511 164.7 219.708 161.667 cv
220.905 158.634 222.804 155.115 225.414 151.101 cv
227.808 147.528 229.707 144.549 231.12 142.164 cv
232.533 139.788 233.622 137.673 234.378 135.828 cv
235.143 133.992 235.656 132.255 235.935 130.635 cv
236.205 129.006 236.34 127.161 236.34 125.109 cv
236.34 118.926 234.918 114.192 232.092 110.889 cv
229.266 107.586 225.18 105.93 219.843 105.93 cv
215.163 105.93 211.248 107.397 208.089 110.322 cv
204.93 113.247 203.355 116.874 203.355 121.203 cv
203.355 122.184 203.625 122.67 204.165 122.67 cv
204.489 122.67 204.786 122.535 205.065 122.265 cv
205.335 121.995 205.74 121.365 206.28 120.393 cv
207.576 118.332 209.583 117.306 212.292 117.306 cv
215.217 117.306 217.494 118.116 219.114 119.745 cv
220.743 121.365 221.553 123.642 221.553 126.567 cv
221.553 129.6 220.608 132.039 218.709 133.884 cv
216.819 135.72 214.299 136.647 211.158 136.647 cv
207.684 136.647 204.858 135.477 202.653 133.146 cv
200.457 130.815 199.359 127.818 199.359 124.128 cv
199.359 120.879 200.088 117.765 201.546 114.786 cv
203.013 111.807 205.038 109.287 207.639 107.226 cv
210.456 105.057 213.516 103.536 216.819 102.663 cv
220.113 101.799 224.208 101.358 229.077 101.358 cv
238.275 101.358 245.475 103.59 250.677 108.036 cv
255.87 112.482 258.471 118.602 258.471 126.405 cv
258.471 132.363 257.121 137.565 254.412 142.002 cv
253.44 143.523 252.603 144.792 251.892 145.827 cv
251.19 146.853 250.164 148.023 248.814 149.319 cv
247.464 150.615 245.565 152.325 243.135 154.44 cv
240.696 156.546 237.312 159.498 232.992 163.287 cv
229.851 166.104 227.574 168.651 226.17 170.928 cv
224.766 173.205 224.055 175.59 224.055 178.074 cv
224.055 178.947 224.136 179.811 224.298 180.684 cv
224.469 181.548 224.82 182.736 225.36 184.257 cv
225.684 185.445 225.846 186.147 225.846 186.363 cv
225.846 187.02 225.576 187.344 225.036 187.344 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
226.08 217.161 mo
222.714 217.161 219.897 216.054 217.62 213.831 cv
215.343 211.608 214.209 208.818 214.209 205.452 cv
214.209 202.203 215.343 199.44 217.62 197.163 cv
219.897 194.886 222.714 193.743 226.08 193.743 cv
229.221 193.743 231.93 194.886 234.207 197.163 cv
236.484 199.44 237.627 202.257 237.627 205.623 cv
237.627 208.98 236.538 211.743 234.369 213.912 cv
232.2 216.081 229.437 217.161 226.08 217.161 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
386.937 72.918 mo
386.469 72.918 385.92 72.504 385.299 71.685 cv
384.678 70.857 384.111 69.822 383.607 68.562 cv
383.094 67.311 382.671 65.979 382.32 64.566 cv
381.969 63.153 381.789 61.857 381.789 60.687 cv
381.789 58.653 382.221 56.529 383.085 54.333 cv
383.958 52.146 385.326 49.59 387.216 46.692 cv
388.944 44.109 390.321 41.949 391.347 40.221 cv
392.373 38.502 393.156 36.972 393.705 35.64 cv
394.254 34.308 394.632 33.057 394.83 31.878 cv
395.019 30.699 395.118 29.367 395.118 27.882 cv
395.118 23.409 394.101 19.98 392.049 17.586 cv
389.997 15.201 387.045 14.004 383.184 14.004 cv
379.8 14.004 376.965 15.066 374.679 17.181 cv
372.393 19.296 371.25 21.924 371.25 25.056 cv
371.25 25.758 371.448 26.109 371.844 26.109 cv
372.078 26.109 372.294 26.019 372.483 25.821 cv
372.681 25.623 372.978 25.173 373.365 24.471 cv
374.31 22.977 375.759 22.23 377.721 22.23 cv
379.836 22.23 381.483 22.824 382.662 23.994 cv
383.832 25.173 384.426 26.82 384.426 28.935 cv
384.426 31.131 383.733 32.895 382.365 34.227 cv
380.997 35.559 379.17 36.225 376.893 36.225 cv
374.391 36.225 372.339 35.388 370.746 33.696 cv
369.153 32.013 368.361 29.835 368.361 27.171 cv
368.361 24.822 368.883 22.572 369.945 20.412 cv
370.998 18.252 372.474 16.434 374.355 14.94 cv
376.389 13.374 378.603 12.267 380.997 11.637 cv
383.382 11.007 386.343 10.692 389.871 10.692 cv
396.522 10.692 401.733 12.303 405.495 15.525 cv
409.257 18.747 411.138 23.175 411.138 28.818 cv
411.138 33.129 410.157 36.891 408.204 40.104 cv
407.493 41.202 406.89 42.129 406.377 42.867 cv
405.873 43.614 405.126 44.46 404.145 45.396 cv
403.173 46.341 401.796 47.574 400.041 49.104 cv
398.277 50.634 395.829 52.767 392.697 55.512 cv
390.429 57.546 388.782 59.391 387.765 61.038 cv
386.748 62.685 386.235 64.413 386.235 66.213 cv
386.235 66.843 386.298 67.473 386.415 68.094 cv
386.532 68.724 386.784 69.588 387.18 70.686 cv
387.414 71.541 387.531 72.054 387.531 72.207 cv
387.531 72.684 387.333 72.918 386.937 72.918 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
387.693 94.5 mo
385.263 94.5 383.22 93.69 381.573 92.088 cv
379.926 90.477 379.107 88.461 379.107 86.022 cv
379.107 83.673 379.926 81.666 381.573 80.028 cv
383.22 78.381 385.263 77.553 387.693 77.553 cv
389.97 77.553 391.932 78.381 393.579 80.028 cv
395.226 81.666 396.054 83.709 396.054 86.139 cv
396.054 88.578 395.271 90.576 393.696 92.142 cv
392.13 93.717 390.132 94.5 387.693 94.5 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
385.083 237.024 mo
384.3 237.024 383.4 236.349 382.365 234.981 cv
381.33 233.622 380.394 231.903 379.557 229.824 cv
378.72 227.745 378.009 225.54 377.433 223.2 cv
376.848 220.869 376.56 218.727 376.56 216.783 cv
376.56 213.408 377.271 209.907 378.702 206.271 cv
380.142 202.635 382.419 198.423 385.542 193.617 cv
388.404 189.333 390.681 185.769 392.373 182.907 cv
394.065 180.054 395.37 177.525 396.279 175.32 cv
397.188 173.115 397.809 171.036 398.133 169.092 cv
398.466 167.148 398.628 164.943 398.628 162.477 cv
398.628 155.07 396.927 149.4 393.534 145.44 cv
390.15 141.48 385.254 139.5 378.864 139.5 cv
373.257 139.5 368.568 141.255 364.779 144.756 cv
360.999 148.266 359.109 152.613 359.109 157.797 cv
359.109 158.967 359.433 159.552 360.09 159.552 cv
360.477 159.552 360.828 159.39 361.161 159.066 cv
361.476 158.742 361.971 157.995 362.619 156.825 cv
364.176 154.359 366.57 153.126 369.819 153.126 cv
373.32 153.126 376.047 154.107 377.991 156.051 cv
379.944 157.995 380.916 160.722 380.916 164.223 cv
380.916 167.859 379.782 170.775 377.505 172.98 cv
375.237 175.194 372.222 176.292 368.451 176.292 cv
364.302 176.292 360.909 174.897 358.272 172.107 cv
355.635 169.317 354.321 165.717 354.321 161.307 cv
354.321 157.41 355.194 153.684 356.949 150.111 cv
358.695 146.538 361.134 143.523 364.239 141.057 cv
367.614 138.456 371.277 136.638 375.237 135.594 cv
379.188 134.55 384.084 134.028 389.925 134.028 cv
400.95 134.028 409.572 136.692 415.8 142.02 cv
422.028 147.348 425.142 154.683 425.142 164.025 cv
425.142 171.171 423.513 177.399 420.273 182.718 cv
419.112 184.536 418.104 186.057 417.267 187.29 cv
416.421 188.523 415.188 189.918 413.568 191.475 cv
411.948 193.032 409.68 195.084 406.764 197.604 cv
403.848 200.142 399.798 203.67 394.614 208.215 cv
390.852 211.59 388.125 214.641 386.442 217.368 cv
384.759 220.095 383.913 222.948 383.913 225.927 cv
383.913 226.971 384.012 228.006 384.201 229.05 cv
384.399 230.085 384.822 231.516 385.47 233.334 cv
385.857 234.756 386.055 235.602 386.055 235.854 cv
386.055 236.637 385.731 237.024 385.083 237.024 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
386.334 272.754 mo
382.311 272.754 378.927 271.422 376.2 268.758 cv
373.473 266.103 372.114 262.755 372.114 258.732 cv
372.114 254.826 373.473 251.514 376.2 248.796 cv
378.927 246.069 382.311 244.701 386.334 244.701 cv
390.105 244.701 393.345 246.069 396.072 248.796 cv
398.799 251.514 400.167 254.898 400.167 258.921 cv
400.167 262.944 398.862 266.256 396.27 268.857 cv
393.669 271.458 390.357 272.754 386.334 272.754 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
299.358 135.828 mo
299.178 135.828 298.971 135.675 298.737 135.36 cv
298.503 135.054 298.287 134.658 298.098 134.181 cv
297.909 133.713 297.747 133.209 297.612 132.678 cv
297.477 132.138 297.414 131.652 297.414 131.211 cv
297.414 130.437 297.576 129.645 297.9 128.817 cv
298.233 127.98 298.746 127.026 299.466 125.928 cv
300.114 124.947 300.636 124.137 301.023 123.489 cv
301.41 122.832 301.707 122.256 301.914 121.752 cv
302.121 121.248 302.256 120.78 302.337 120.33 cv
302.409 119.889 302.445 119.385 302.445 118.827 cv
302.445 117.135 302.058 115.839 301.284 114.939 cv
300.51 114.039 299.394 113.589 297.936 113.589 cv
296.658 113.589 295.587 113.985 294.732 114.786 cv
293.868 115.587 293.436 116.577 293.436 117.756 cv
293.436 118.026 293.508 118.161 293.661 118.161 cv
293.904 118.044 li
293.976 117.972 294.084 117.801 294.237 117.54 cv
294.588 116.973 295.137 116.694 295.875 116.694 cv
296.676 116.694 297.297 116.919 297.738 117.36 cv
298.188 117.801 298.404 118.422 298.404 119.223 cv
298.404 120.051 298.152 120.717 297.63 121.221 cv
297.108 121.725 296.424 121.977 295.569 121.977 cv
294.615 121.977 293.841 121.662 293.247 121.023 cv
292.644 120.384 292.338 119.565 292.338 118.557 cv
292.338 117.666 292.545 116.82 292.941 116.001 cv
293.337 115.191 293.895 114.498 294.606 113.94 cv
295.371 113.346 296.208 112.932 297.108 112.689 cv
298.017 112.455 299.133 112.338 300.465 112.338 cv
302.976 112.338 304.947 112.941 306.36 114.156 cv
307.782 115.371 308.493 117.045 308.493 119.178 cv
308.493 120.807 308.124 122.229 307.386 123.444 cv
307.116 123.858 306.891 124.2 306.693 124.488 cv
306.504 124.767 306.225 125.082 305.856 125.442 cv
305.487 125.793 304.965 126.261 304.299 126.837 cv
303.633 127.413 302.715 128.223 301.527 129.258 cv
300.672 130.023 300.051 130.725 299.664 131.346 cv
299.286 131.967 299.088 132.615 299.088 133.299 cv
299.088 133.533 299.115 133.767 299.16 134.01 cv
299.205 134.244 299.295 134.568 299.448 134.982 cv
299.538 135.306 299.583 135.504 299.583 135.558 cv
299.583 135.738 299.502 135.828 299.358 135.828 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
299.646 143.973 mo
298.728 143.973 297.954 143.676 297.333 143.064 cv
296.712 142.461 296.397 141.696 296.397 140.778 cv
296.397 139.887 296.712 139.131 297.333 138.51 cv
297.954 137.889 298.728 137.574 299.646 137.574 cv
300.501 137.574 301.239 137.889 301.86 138.51 cv
302.481 139.131 302.796 139.905 302.796 140.823 cv
302.796 141.741 302.499 142.497 301.905 143.091 cv
301.311 143.676 300.564 143.973 299.646 143.973 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
198.288 305.001 mo
193.545 305.001 li
193.653 304.497 193.806 303.984 194.013 303.462 cv
194.481 302.274 195.228 300.897 196.245 299.322 cv
197.181 297.918 197.928 296.757 198.477 295.821 cv
199.035 294.885 199.458 294.057 199.755 293.337 cv
200.052 292.617 200.259 291.933 200.367 291.294 cv
200.466 290.664 200.52 289.935 200.52 289.134 cv
200.52 286.713 199.971 284.859 198.864 283.563 cv
197.766 282.267 196.173 281.619 194.094 281.619 cv
192.276 281.619 190.746 282.186 189.513 283.338 cv
188.289 284.481 187.668 285.903 187.668 287.604 cv
187.668 287.982 187.776 288.18 187.992 288.18 cv
188.118 288.18 188.235 288.126 188.343 288.018 cv
188.442 287.91 188.604 287.667 188.82 287.289 cv
189.324 286.479 190.116 286.074 191.178 286.074 cv
192.321 286.074 193.212 286.389 193.851 287.028 cv
194.481 287.667 194.805 288.558 194.805 289.701 cv
194.805 290.898 194.436 291.852 193.689 292.572 cv
192.942 293.292 191.961 293.652 190.728 293.652 cv
189.369 293.652 188.253 293.193 187.38 292.284 cv
186.498 291.375 186.066 290.196 186.066 288.747 cv
186.066 287.478 186.354 286.254 186.921 285.084 cv
187.497 283.923 188.289 282.933 189.315 282.123 cv
190.413 281.277 191.61 280.683 192.906 280.341 cv
194.202 279.999 195.804 279.828 197.712 279.828 cv
201.321 279.828 204.138 280.701 206.181 282.447 cv
208.215 284.184 209.232 286.587 209.232 289.638 cv
209.232 291.978 208.701 294.012 207.639 295.758 cv
207.261 296.352 206.928 296.847 206.658 297.252 cv
206.379 297.657 205.974 298.107 205.443 298.62 cv
204.912 299.133 204.174 299.799 203.22 300.627 cv
202.266 301.455 200.934 302.607 199.242 304.101 cv
198.891 304.407 198.585 304.704 198.288 305.001 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
320.382 51.939 mo
320.148 51.939 319.878 51.741 319.572 51.336 cv
319.266 50.931 318.987 50.418 318.744 49.806 cv
318.492 49.194 318.285 48.537 318.114 47.844 cv
317.943 47.151 317.853 46.512 317.853 45.936 cv
317.853 44.937 318.069 43.893 318.492 42.813 cv
318.915 41.742 319.59 40.491 320.517 39.06 cv
321.363 37.791 322.038 36.729 322.542 35.883 cv
323.037 35.037 323.424 34.29 323.694 33.633 cv
323.964 32.976 324.144 32.364 324.243 31.788 cv
324.342 31.212 324.387 30.555 324.387 29.817 cv
324.387 27.63 323.892 25.947 322.884 24.768 cv
321.885 23.589 320.436 23.004 318.555 23.004 cv
316.899 23.004 315.513 23.526 314.388 24.561 cv
313.272 25.605 312.714 26.892 312.714 28.44 cv
312.714 28.782 312.813 28.953 313.002 28.953 cv
313.119 28.953 313.227 28.908 313.326 28.809 cv
313.416 28.719 313.56 28.494 313.758 28.143 cv
314.217 27.414 314.928 27.045 315.891 27.045 cv
316.935 27.045 317.736 27.342 318.321 27.918 cv
318.897 28.494 319.185 29.304 319.185 30.339 cv
319.185 31.419 318.843 32.283 318.177 32.94 cv
317.502 33.597 316.602 33.921 315.486 33.921 cv
314.253 33.921 313.245 33.507 312.462 32.679 cv
311.679 31.851 311.283 30.78 311.283 29.475 cv
311.283 28.323 311.544 27.216 312.066 26.154 cv
312.588 25.092 313.308 24.201 314.235 23.472 cv
315.234 22.698 316.323 22.167 317.493 21.861 cv
318.672 21.555 320.121 21.402 321.858 21.402 cv
325.134 21.402 327.69 22.185 329.544 23.76 cv
331.389 25.335 332.316 27.513 332.316 30.285 cv
332.316 32.4 331.83 34.254 330.867 35.829 cv
330.516 36.369 330.219 36.819 329.967 37.188 cv
329.715 37.548 329.346 37.962 328.869 38.43 cv
328.383 38.889 327.708 39.492 326.835 40.248 cv
325.971 40.995 324.765 42.048 323.217 43.398 cv
322.101 44.397 321.291 45.297 320.787 46.107 cv
320.283 46.917 320.031 47.763 320.031 48.654 cv
320.031 48.96 320.067 49.266 320.121 49.572 cv
320.175 49.887 320.301 50.31 320.499 50.85 cv
320.607 51.273 320.67 51.516 320.67 51.597 cv
320.67 51.831 320.571 51.939 320.382 51.939 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
320.751 62.595 mo
319.554 62.595 318.555 62.199 317.745 61.407 cv
316.935 60.624 316.539 59.625 316.539 58.437 cv
316.539 57.285 316.935 56.295 317.745 55.494 cv
318.555 54.684 319.554 54.279 320.751 54.279 cv
321.867 54.279 322.83 54.684 323.64 55.494 cv
324.45 56.295 324.855 57.303 324.855 58.491 cv
324.855 59.688 324.468 60.669 323.694 61.443 cv
322.929 62.208 321.948 62.595 320.751 62.595 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
14.067 107.145 mo
13.473 107.145 12.789 106.632 12.006 105.597 cv
11.232 104.562 10.521 103.257 9.882 101.682 cv
9.252 100.107 8.712 98.433 8.271 96.66 cv
7.83 94.896 7.614 93.267 7.614 91.791 cv
7.614 89.235 8.154 86.571 9.243 83.817 cv
10.323 81.063 12.051 77.859 14.418 74.223 cv
16.587 70.974 18.306 68.265 19.584 66.096 cv
20.871 63.936 21.852 62.019 22.545 60.345 cv
23.238 58.671 23.706 57.096 23.949 55.62 cv
24.192 54.144 24.318 52.47 24.318 50.598 cv
24.318 44.991 23.04 40.68 20.475 37.683 cv
17.919 34.677 14.22 33.174 9.396 33.174 cv
5.751 33.174 2.619 34.164 0 36.135 cv
0 33.165 li
2.07 31.824 4.275 30.834 6.615 30.222 cv
9.621 29.43 13.329 29.034 17.757 29.034 cv
26.118 29.034 32.652 31.05 37.368 35.091 cv
42.093 39.132 44.451 44.694 44.451 51.777 cv
44.451 57.195 43.227 61.92 40.77 65.952 cv
39.879 67.329 39.114 68.49 38.475 69.426 cv
37.836 70.362 36.909 71.415 35.676 72.594 cv
34.443 73.782 32.724 75.33 30.51 77.247 cv
28.296 79.164 25.227 81.846 21.294 85.293 cv
18.441 87.858 16.38 90.171 15.102 92.232 cv
13.824 94.302 13.185 96.471 13.185 98.73 cv
13.185 99.522 13.257 100.305 13.401 101.097 cv
13.554 101.88 13.869 102.96 14.364 104.337 cv
14.661 105.426 14.805 106.065 14.805 106.263 cv
14.805 106.848 14.562 107.145 14.067 107.145 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
1.566 61.083 mo
1.026 61.083 .504 61.038 0 60.975 cv
0 43.947 li
.765 43.659 1.629 43.506 2.601 43.506 cv
5.256 43.506 7.317 44.253 8.802 45.729 cv
10.278 47.205 11.016 49.275 11.016 51.93 cv
11.016 54.684 10.152 56.898 8.433 58.572 cv
6.705 60.246 4.419 61.083 1.566 61.083 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
14.976 134.271 mo
11.916 134.271 9.36 133.263 7.29 131.247 cv
5.22 129.222 4.185 126.684 4.185 123.633 cv
4.185 120.681 5.22 118.17 7.29 116.1 cv
9.36 114.03 11.916 112.995 14.976 112.995 cv
17.829 112.995 20.295 114.03 22.356 116.1 cv
24.426 118.17 25.461 120.726 25.461 123.777 cv
25.461 126.837 24.48 129.348 22.509 131.319 cv
20.538 133.29 18.027 134.271 14.976 134.271 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
215.865 72.855 mo
215.415 72.855 214.893 72.468 214.29 71.685 cv
213.687 70.902 213.147 69.912 212.661 68.715 cv
212.166 67.527 211.752 66.249 211.419 64.908 cv
211.077 63.567 210.906 62.334 210.906 61.218 cv
210.906 59.274 211.32 57.258 212.139 55.17 cv
212.958 53.082 214.263 50.652 216.054 47.898 cv
217.692 45.432 218.997 43.38 219.969 41.733 cv
220.941 40.095 221.679 38.637 222.201 37.368 cv
222.723 36.099 223.083 34.911 223.263 33.786 cv
223.452 32.67 223.551 31.401 223.551 29.979 cv
223.551 25.731 222.579 22.464 220.644 20.187 cv
218.709 17.91 215.919 16.776 212.265 16.776 cv
209.061 16.776 206.388 17.784 204.228 19.791 cv
202.068 21.807 200.988 24.309 200.988 27.297 cv
200.988 27.963 201.168 28.305 201.546 28.305 cv
201.771 28.305 201.978 28.206 202.158 28.026 cv
202.347 27.837 202.626 27.405 203.004 26.739 cv
203.895 25.317 205.281 24.606 207.144 24.606 cv
209.16 24.606 210.726 25.173 211.842 26.289 cv
212.967 27.405 213.525 28.971 213.525 30.987 cv
213.525 33.084 212.868 34.758 211.563 36.027 cv
210.258 37.296 208.521 37.935 206.361 37.935 cv
203.967 37.935 202.014 37.125 200.493 35.523 cv
198.963 33.921 198.198 31.851 198.198 29.313 cv
198.198 27.072 198.702 24.93 199.71 22.878 cv
200.718 20.826 202.113 19.089 203.904 17.667 cv
205.839 16.173 207.945 15.129 210.222 14.526 cv
212.49 13.932 215.307 13.635 218.664 13.635 cv
225 13.635 229.95 15.165 233.532 18.225 cv
237.105 21.285 238.896 25.506 238.896 30.879 cv
238.896 34.983 237.969 38.565 236.106 41.625 cv
235.431 42.669 234.855 43.542 234.369 44.253 cv
233.883 44.964 233.172 45.765 232.245 46.665 cv
231.309 47.556 230.004 48.735 228.33 50.184 cv
226.656 51.642 224.325 53.676 221.346 56.286 cv
219.177 58.23 217.62 59.985 216.648 61.551 cv
215.676 63.117 215.19 64.764 215.19 66.474 cv
215.19 67.077 215.253 67.671 215.361 68.265 cv
215.469 68.868 215.712 69.687 216.09 70.731 cv
216.315 71.55 216.423 72.036 216.423 72.189 cv
216.423 72.63 216.234 72.855 215.865 72.855 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
216.522 93.447 mo
214.2 93.447 212.265 92.682 210.69 91.152 cv
209.124 89.622 208.341 87.696 208.341 85.383 cv
208.341 83.142 209.124 81.234 210.69 79.668 cv
212.265 78.102 214.2 77.319 216.522 77.319 cv
218.682 77.319 220.554 78.102 222.12 79.668 cv
223.686 81.234 224.478 83.178 224.478 85.491 cv
224.478 87.813 223.731 89.712 222.237 91.206 cv
220.743 92.7 218.835 93.447 216.522 93.447 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
317.286 236.403 mo
315.126 236.403 313.308 235.683 311.85 234.261 cv
310.383 232.83 309.645 231.03 309.645 228.87 cv
309.645 226.773 310.383 225 311.85 223.533 cv
313.308 222.066 315.126 221.337 317.286 221.337 cv
319.311 221.337 321.048 222.066 322.515 223.533 cv
323.982 225 324.711 226.809 324.711 228.978 cv
324.711 231.138 324.018 232.911 322.623 234.306 cv
321.228 235.701 319.446 236.403 317.286 236.403 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
316.701 217.125 mo
316.287 217.125 315.792 216.756 315.234 216.018 cv
314.676 215.289 314.163 214.362 313.704 213.246 cv
313.254 212.13 312.867 210.942 312.552 209.691 cv
312.237 208.431 312.075 207.279 312.075 206.226 cv
312.075 204.417 312.462 202.527 313.227 200.574 cv
314.001 198.621 315.225 196.353 316.899 193.77 cv
318.438 191.466 319.662 189.54 320.571 188.01 cv
321.48 186.471 322.182 185.103 322.668 183.924 cv
323.163 182.736 323.487 181.62 323.667 180.567 cv
323.838 179.523 323.928 178.335 323.928 177.012 cv
323.928 173.025 323.019 169.974 321.21 167.841 cv
319.392 165.717 316.782 164.646 313.362 164.646 cv
310.365 164.646 307.854 165.591 305.829 167.481 cv
303.804 169.362 302.796 171.702 302.796 174.492 cv
302.796 175.122 302.967 175.437 303.318 175.437 cv
303.525 175.437 303.723 175.347 303.894 175.176 cv
304.065 175.005 304.335 174.6 304.677 173.97 cv
305.523 172.647 306.81 171.981 308.556 171.981 cv
310.437 171.981 311.904 172.503 312.957 173.556 cv
314.001 174.6 314.523 176.067 314.523 177.948 cv
314.523 179.901 313.911 181.476 312.696 182.664 cv
311.472 183.852 309.843 184.446 307.827 184.446 cv
305.586 184.446 303.75 183.69 302.31 182.196 cv
300.87 180.693 300.15 178.749 300.15 176.382 cv
300.15 174.285 300.627 172.278 301.563 170.361 cv
302.508 168.435 303.813 166.815 305.487 165.483 cv
307.296 164.097 309.267 163.116 311.391 162.558 cv
313.515 162 316.152 161.721 319.284 161.721 cv
325.206 161.721 329.841 163.152 333.189 166.014 cv
336.537 168.876 338.211 172.818 338.211 177.849 cv
338.211 181.683 337.338 185.04 335.601 187.902 cv
334.971 188.874 334.431 189.702 333.981 190.359 cv
333.522 191.025 332.865 191.772 331.992 192.618 cv
331.128 193.455 329.904 194.553 328.338 195.912 cv
326.772 197.271 324.603 199.179 321.813 201.618 cv
319.797 203.436 318.339 205.074 317.43 206.541 cv
316.53 208.008 316.071 209.547 316.071 211.149 cv
316.071 211.707 316.125 212.274 316.233 212.832 cv
316.332 213.39 316.566 214.155 316.917 215.136 cv
317.124 215.901 317.223 216.351 317.223 216.495 cv
317.223 216.909 317.052 217.125 316.701 217.125 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
450.756 160.101 mo
447.939 160.101 445.572 159.174 443.664 157.311 cv
441.756 155.448 440.802 153.108 440.802 150.282 cv
440.802 147.555 441.756 145.242 443.664 143.334 cv
445.572 141.426 447.939 140.472 450.756 140.472 cv
453.393 140.472 455.661 141.426 457.578 143.334 cv
459.486 145.242 460.44 147.6 460.44 150.426 cv
460.44 153.243 459.531 155.556 457.713 157.374 cv
455.895 159.192 453.573 160.101 450.756 160.101 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
472.869 99.6364 mo
472.869 69.8142 li
472.914 69.8616 472.959 69.909 473.004 69.957 cv
473.004 99.441 li
472.958 99.5067 472.913 99.5718 472.869 99.6364 cv
1 1 1 rgb
f
449.901 135.072 mo
449.361 135.072 448.722 134.595 447.984 133.641 cv
447.255 132.687 446.598 131.481 446.004 130.023 cv
445.401 128.574 444.906 127.026 444.492 125.388 cv
444.078 123.75 443.871 122.247 443.871 120.879 cv
443.871 118.521 444.375 116.064 445.374 113.517 cv
446.373 110.97 447.966 108.009 450.153 104.643 cv
452.151 101.646 453.744 99.144 454.932 97.146 cv
456.111 95.139 457.02 93.366 457.659 91.827 cv
458.289 90.279 458.73 88.821 458.955 87.453 cv
459.18 86.094 459.297 84.546 459.297 82.818 cv
459.297 77.634 458.118 73.656 455.76 70.884 cv
453.402 68.103 450 66.717 445.554 66.717 cv
441.648 66.717 438.381 67.95 435.753 70.398 cv
433.125 72.855 431.811 75.906 431.811 79.542 cv
431.811 80.361 432.036 80.775 432.486 80.775 cv
432.765 80.775 433.017 80.658 433.242 80.433 cv
433.467 80.199 433.809 79.677 434.268 78.858 cv
435.357 77.13 437.04 76.266 439.317 76.266 cv
441.765 76.266 443.682 76.95 445.041 78.318 cv
446.409 79.677 447.093 81.594 447.093 84.042 cv
447.093 86.589 446.292 88.641 444.699 90.189 cv
443.106 91.728 440.991 92.502 438.354 92.502 cv
435.447 92.502 433.053 91.53 431.19 89.568 cv
429.318 87.615 428.382 85.095 428.382 81.999 cv
428.382 79.272 428.994 76.653 430.218 74.151 cv
431.451 71.649 433.152 69.543 435.33 67.806 cv
437.697 65.979 440.262 64.701 443.034 63.963 cv
445.806 63.234 449.235 62.865 453.33 62.865 cv
461.052 62.865 467.091 64.737 471.456 68.472 cv
471.954 68.9052 472.423 69.346 472.869 69.8142 cv
472.869 99.6364 li
472.732 99.8369 472.602 100.031 472.473 100.215 cv
471.888 101.079 471.024 102.06 469.881 103.149 cv
468.747 104.238 467.154 105.669 465.111 107.442 cv
463.068 109.215 460.224 111.699 456.588 114.876 cv
453.951 117.243 452.043 119.385 450.855 121.293 cv
449.676 123.201 449.082 125.208 449.082 127.296 cv
449.082 128.025 449.154 128.754 449.289 129.483 cv
449.424 130.203 449.721 131.211 450.18 132.48 cv
450.45 133.479 450.585 134.073 450.585 134.253 cv
450.585 134.802 450.36 135.072 449.901 135.072 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
267.444 99.216 mo
264.105 99.216 261.297 98.109 259.038 95.904 cv
256.77 93.69 255.645 90.918 255.645 87.579 cv
255.645 84.348 256.77 81.603 259.038 79.335 cv
261.297 77.076 264.105 75.942 267.444 75.942 cv
270.567 75.942 273.258 77.076 275.526 79.335 cv
277.785 81.603 278.919 84.402 278.919 87.741 cv
278.919 91.08 277.839 93.825 275.688 95.985 cv
273.528 98.136 270.783 99.216 267.444 99.216 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
266.463 69.462 mo
265.815 69.462 265.059 68.895 264.204 67.761 cv
263.34 66.627 262.557 65.196 261.855 63.468 cv
261.162 61.74 260.568 59.904 260.082 57.96 cv
259.596 56.016 259.353 54.225 259.353 52.605 cv
259.353 49.797 259.947 46.881 261.135 43.857 cv
262.323 40.833 264.213 37.323 266.796 33.318 cv
269.172 29.754 271.053 26.784 272.457 24.408 cv
273.861 22.032 274.941 19.926 275.688 18.09 cv
276.444 16.254 276.957 14.526 277.227 12.906 cv
277.497 11.286 277.632 9.441 277.632 7.389 cv
277.632 4.635 277.335 2.187 276.768 0 cv
298.44 0 li
299.313 2.619 299.763 5.508 299.763 8.685 cv
299.763 14.634 298.422 19.818 295.722 24.246 cv
294.759 25.758 293.922 27.027 293.22 28.053 cv
292.518 29.079 291.492 30.249 290.151 31.545 cv
288.801 32.841 286.911 34.542 284.49 36.648 cv
282.06 38.754 278.694 41.697 274.383 45.477 cv
271.26 48.285 269.001 50.823 267.597 53.1 cv
266.193 55.368 265.5 57.744 265.5 60.228 cv
265.5 61.092 265.572 61.956 265.743 62.82 cv
265.896 63.684 266.256 64.872 266.796 66.384 cv
267.12 67.572 267.282 68.274 267.282 68.49 cv
267.282 69.138 267.003 69.462 266.463 69.462 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
252.567 18.9 mo
249.111 18.9 246.285 17.739 244.089 15.417 cv
241.893 13.095 240.795 10.098 240.795 6.417 cv
240.795 4.221 241.137 2.079 241.812 0 cv
245.187 0 li
244.935 1.116 244.791 2.277 244.791 3.501 cv
244.791 4.473 245.061 4.959 245.601 4.959 cv
245.925 4.959 246.222 4.824 246.492 4.554 cv
246.762 4.284 247.167 3.663 247.707 2.691 cv
248.553 1.359 249.696 .468 251.127 0 cv
256.86 0 li
258.318 .387 259.533 1.062 260.514 2.043 cv
262.134 3.663 262.944 5.931 262.944 8.856 cv
262.944 11.88 261.999 14.31 260.109 16.146 cv
258.219 17.982 255.708 18.9 252.567 18.9 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
472.869 286.241 mo
472.869 267.518 li
472.915 267.622 472.96 267.726 473.004 267.831 cv
473.004 285.894 li
472.96 286.01 472.915 286.125 472.869 286.241 cv
1 1 1 rgb
f
456.075 305.001 mo
442.386 305.001 li
443.385 302.733 444.789 300.195 446.643 297.342 cv
448.65 294.327 450.252 291.816 451.44 289.809 cv
452.628 287.802 453.546 286.02 454.185 284.472 cv
454.824 282.915 455.256 281.457 455.481 280.089 cv
455.715 278.721 455.832 277.164 455.832 275.436 cv
455.832 270.234 454.644 266.238 452.268 263.448 cv
449.901 260.667 446.481 259.272 442.017 259.272 cv
438.093 259.272 434.808 260.505 432.162 262.971 cv
429.516 265.437 428.202 268.497 428.202 272.142 cv
428.202 272.97 428.427 273.375 428.886 273.375 cv
429.156 273.375 429.408 273.267 429.633 273.033 cv
429.867 272.808 430.209 272.286 430.659 271.458 cv
431.757 269.73 433.449 268.857 435.726 268.857 cv
438.192 268.857 440.109 269.541 441.477 270.918 cv
442.854 272.286 443.538 274.203 443.538 276.669 cv
443.538 279.225 442.737 281.277 441.135 282.825 cv
439.542 284.382 437.418 285.156 434.772 285.156 cv
431.847 285.156 429.453 284.175 427.581 282.213 cv
425.709 280.251 424.773 277.713 424.773 274.608 cv
424.773 271.872 425.385 269.244 426.618 266.733 cv
427.851 264.231 429.561 262.107 431.757 260.37 cv
434.124 258.534 436.707 257.256 439.488 256.518 cv
442.269 255.789 445.716 255.42 449.829 255.42 cv
457.587 255.42 463.653 257.292 468.036 261.045 cv
470.161 262.868 471.772 265.031 472.869 267.518 cv
472.869 286.241 li
472.394 287.439 471.842 288.59 471.177 289.674 cv
470.358 290.952 469.647 292.023 469.053 292.896 cv
468.459 293.76 467.595 294.741 466.452 295.839 cv
465.309 296.928 463.707 298.368 461.655 300.15 cv
460.197 301.41 458.334 303.03 456.075 305.001 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
153.324 165.474 mo
152.154 165.474 151.173 165.087 150.381 164.313 cv
149.589 163.539 149.193 162.567 149.193 161.397 cv
149.193 160.272 149.589 159.309 150.381 158.517 cv
151.173 157.725 152.154 157.329 153.324 157.329 cv
154.413 157.329 155.358 157.725 156.15 158.517 cv
156.942 159.309 157.338 160.29 157.338 161.46 cv
157.338 162.621 156.96 163.584 156.213 164.34 cv
155.457 165.096 154.494 165.474 153.324 165.474 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
152.955 155.124 mo
152.73 155.124 152.469 154.926 152.172 154.53 cv
151.875 154.134 151.596 153.63 151.353 153.027 cv
151.11 152.424 150.903 151.785 150.741 151.11 cv
150.57 150.435 150.48 149.814 150.48 149.247 cv
150.48 148.266 150.687 147.249 151.11 146.196 cv
151.524 145.143 152.181 143.919 153.09 142.524 cv
153.927 141.282 154.584 140.247 155.079 139.41 cv
155.574 138.582 155.952 137.853 156.213 137.214 cv
156.474 136.566 156.654 135.972 156.753 135.405 cv
156.843 134.838 156.897 134.199 156.897 133.479 cv
156.897 131.337 156.402 129.69 155.412 128.538 cv
154.431 127.386 153.009 126.819 151.155 126.819 cv
149.526 126.819 148.158 127.323 147.06 128.34 cv
145.962 129.357 145.413 130.617 145.413 132.129 cv
145.413 132.462 145.512 132.633 145.701 132.633 cv
145.809 132.633 145.917 132.588 146.007 132.489 cv
146.106 132.399 146.241 132.183 146.43 131.841 cv
146.88 131.13 147.582 130.77 148.527 130.77 cv
149.535 130.77 150.327 131.049 150.894 131.616 cv
151.461 132.183 151.74 132.975 151.74 133.992 cv
151.74 135.045 151.416 135.891 150.759 136.53 cv
150.093 137.169 149.22 137.493 148.131 137.493 cv
146.925 137.493 145.935 137.088 145.17 136.278 cv
144.405 135.468 144.027 134.424 144.027 133.146 cv
144.027 132.012 144.279 130.932 144.792 129.897 cv
145.296 128.862 145.998 127.98 146.907 127.269 cv
147.888 126.513 148.95 125.982 150.102 125.676 cv
151.245 125.379 152.667 125.226 154.368 125.226 cv
157.572 125.226 160.074 126 161.883 127.548 cv
163.692 129.096 164.592 131.22 164.592 133.938 cv
164.592 136.008 164.124 137.817 163.179 139.356 cv
162.846 139.887 162.549 140.328 162.306 140.688 cv
162.063 141.039 161.703 141.444 161.235 141.903 cv
160.767 142.353 160.101 142.947 159.255 143.676 cv
158.409 144.414 157.239 145.44 155.727 146.763 cv
154.638 147.735 153.846 148.626 153.36 149.418 cv
152.865 150.201 152.622 151.038 152.622 151.902 cv
152.622 152.199 152.649 152.505 152.703 152.802 cv
152.757 153.108 152.883 153.522 153.072 154.044 cv
153.189 154.458 153.243 154.71 153.243 154.782 cv
153.243 155.007 153.144 155.124 152.955 155.124 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
182.88 305.001 mo
131.049 305.001 li
130.068 294.147 126.882 285.552 121.491 279.216 cv
114.894 271.476 105.39 267.606 92.961 267.606 cv
82.062 267.606 72.936 271.026 65.583 277.884 cv
58.23 284.733 54.558 293.238 54.558 303.381 cv
54.558 304.011 54.603 304.542 54.702 305.001 cv
45.414 305.001 li
46.026 299.268 47.637 293.715 50.265 288.351 cv
53.685 281.367 58.446 275.472 64.539 270.648 cv
71.136 265.599 78.3 262.071 86.04 260.055 cv
93.771 258.039 103.347 257.031 114.759 257.031 cv
136.323 257.031 153.198 262.224 165.375 272.601 cv
175.086 280.881 180.918 291.69 182.88 305.001 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
54.702 305.001 mo
54.702 305.001 li
1 1 1 rgb
f
95.004 305.001 mo
59.247 305.001 li
59.823 304.209 60.543 303.039 61.407 301.482 cv
64.449 296.667 69.147 294.246 75.492 294.246 cv
82.341 294.246 87.669 296.154 91.476 299.961 cv
92.934 301.419 94.104 303.102 95.004 305.001 cv
level3{
gsave
clp
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.3332e-5 -305 305 -1.3332e-5 236.435 305 ] concat
clp
/1 /Gradient get_res exec grestore
}if
newpath
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
[
[/CSA [/0 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 12.0.1
%%For: (Alice aus dem Wunderland) ()
%%Title: (Quiz_Jeopardy_GB.eps)
%%CreationDate: 4/12/2007 11:15 AM
%AI9_DataStream
%Gb!R&kuo#tZS$QQp[e#?a>:7jY,ieIb$Z0JR)([=GTMPM+<r-_M=/pOO)s\9hD__E0mE*"cK`*BDN$nBB4T5KFluMJF>DY=&,5Cb
%s*@r?j9ak>&pVgm^YQHl]`4if\ZA&;e3,hW%B#]U;7AKP1e*,FGk/Ampo?3P]]e_*2kA+3hI&&6;bGYBU[RULT[t6EO#kaIXa1*S
%hc]@67*8/&r9`FC_sZGn\$nB]FF1X#8+QV3ho+FJ@B2>Xb.+63K<`'lWAdR!e'Sbsd%PcN\^-b9aeU:INXpKSYP1o"[VE4rXkn&1
%gmRk+6YT2^O_7G'X>G9NSWglh#?*'Dae.&Z'f>Hbo'.'R$#<].aRJ`TURt5C"0uRUi4l#=ft[$c?O83Up9V<_6m',YYd41hI-nNQ
%k"H#1b]/_H_X64-nXq]*EV'+D<hkP/I/.(E4"Ddb_dX!#p8Z.,0[_)D7\9Nh_k``uBi57)0<\7>Id`>Hn'B%>kIo/YDsXpD2P+gZ
%s!(`Oi![>=:'SE%gL5Tsp8tcll=R[GmIg`%N7H[8%X,=o5lC"ACj3nr]r>E'BQ/R:G[*hQm(8T37iS#6HK.mNYE!tImEn!*FMU?d
%jqC`]'3BfOf$n(fI%+)5:KGO$C0/9J[%1@[BF4':4iH!P9u4nPj8OLWpisV#Z?AfE9p4!eN*R=qG70(`rCWg!32((bqEN7(GN4uh
%Qqi"GCa-n!hKVo)jE]8l>NigZghi"1YT5\KGNq=/M&a^TB]"5BI,K4s`6#9R&-:ZqNhf!kLk^EZmA58uI,>p6aHnF;dE1qDE,YCG
%Df`>Bd8$mN4mmEgAED@ecX'[J`E[9C\8sFi%821'Cn:3r]kXHpI/f)T2ETB?8q#&*mS6TNYhF&Gd-Gld:52)+(-\9_3n+*KNHS)%
%;IZF$7rMh5^bpJ,p;Y!O6g\c=1-):LO%+c7b83K1HK4&bE7,\qlET1flrH.pH^2jhcL/HM1H@$'GD+QHO6WUi)%?B=j3I0\^O'9_
%lc&V3F*l+<m,d->mu7kXdlZ6t:A7suDV]S$D]STOe*d^jm<&'6Is$O`i.MD<o]s/nk?ig#*":+4[N&Tc8YGWLqABA:@WQg-^m)P3
%:j><\PT]E$mA%73o\T4)dp<25JUE@_D-"/1l.GjuBP00c:QC;i.m`grCGdAjG2+V!KHGcYTLuoVhOrI`]H/XDFG??+KjWnN6K*XK
%@:aR0)r3NEpA_'2FU"Y-.,UMC=E$]d/u%f$[``3,@H$t<9Vjp(PO4WTB=BNns)DW<m;U]<lKqXG*N3GCSb&MkF8SXYp\3Q/s8Ld$
%n%X/0+*573PTF0QrJc:oH-3ljE8eRZKhm*TPFVYDMtjdDV=N.2Dp<^QSiS%X5P;@DZrh]j>k'YSHs0iL>&7LD?l?Y$[\2;\?<\NM
%bERHdZcbQ]?2TDs00Ruaq=!lMJ8_5P?iCCEC0pN8QTTOB[eTU^?L^RE=o70Cch1L)BC+7:j.&VCr7e!VBP^J&1MHR<k@qie$;9R'
%b+l_RS:oO'I2TfC\=-j$_^pQpM?eC30h34ujV.5W7<ldi4>ll_n]75iVBJaa4Y8j74L1%cG2"T`p(Qp%q#l-l&,rk^@UI&cr:Udf
%Z(LTd\YgTH?(NC8LASIE\,@'`7u5mp6MgKUqeu$eq[)jAE_e6IPpbNtGZ+:cnu(oI>0t&0/N/2mrj8sYFINrNAHCWETjN,'m`Rgl
%.!cGRb@=1@P!<rRQCcgS;kJ=Rfcr(,_Ub]a?$][e8?b,I">c+/C=t-Yk3P%irR_LLV#3cAjj31V:[P/P=tG/@r:?h.#*mYkN^op.
%>G1D$;V$A2-'f3r1XV<aE=1EOq`aNiGb#D$M78)oK!0d(L=d>'N)M80<jdc?J\qo8JstHK-MB.NSWN/r<K(M^C/J9Vh81Dt^dtq"
%lVJAQg;Luh[5D0t%=+DNA_XXFP;.+-6kbWVfZ(2oT>YGKMe*X`HJF=Go!BCC`GrgmFK=ChIqhP\rbj(,Ua8g+jN$c2#"6uiQ#>&1
%Pqf.mW7EhO)LP_&4)G@nb/fE8A<(C[aBHeX)Fj7#X]Cdd+]#GqY-gjP9O4l"#QYD]Q6rWTeESgQH6WBent8mohN4Z"Sp%f<1N/@+
%&/-$q*#<A#.-7`o1@9fiLkA*np&)X%;kB:;D*0)D+F6Y55RM%SRSj&TMbR@@-5Ws:MptGreG*EJNRFRd/O&R]ai"<G1@(7pStP`>
%nW$@-eiiPk-Rg*N;?'87H"o-2rR.U+4jmg")GftiLM+uo0l32+=r0<G$_GAk7p<jGoa@DGKhm$o,;%p4jH:n)jKW>>BsIFI?1ESL
%5!`BU$iIa2nZVJMifP#$V2oj!7lO;lkJ@Zlo3CTO>!29:)@1RB@ci/I#M$$J>^C'95Bmu,dc*KkG@!p<M_eJ*Zps9_Ptsl#lXe;b
%EA5G<%!P<j5I3/PZW@d8A4[)nP-U%fOlXWSPn[h`;+[Ss:T&1mU6'5bra\DVitb7]Kie]h#K]`rUSQ\V-R88WHSUF3P=m^2fZE$^
%@)?O0q:6>R5PrRT9eCi7a!=m;-dEh)F#'mbE[bP7+Fj=e0r68LAS4Q+/@I66?1qmp.Ik9$q56.BUbbf04jme+#$l]EbS-On:._ne
%@.o]uK=ZQXA'TAFe+R2jQm(h2s#0JZFlh)blB)k*T,[h..@n9jcX*1*/`A.:Gd9T$4eA>o:JK*)PaJ?njCp<drt[=1=K_Fi&>pa^
%0X+S4[7.0u'*Ao'D%X$FZ,e/m1`\L(\D+<eZ7hNU(V%0J\<]2Q\qkDV7CuY)]nf!^+Mo3g5Ym2+M\8oT:^=:5.RKn$U`qp)&LASs
%"sR5;$h]1k?ues_#RI,%<!6*]?kY$l.R_g;6E>\4.`;V2U<,c$Vgr!8L/Aq"Y8%'tU`^*%',n&Edad>3`t>@>/qkiL;*)/\M5[7:
%aS)a_1(h'jNJ#lk8/?.]J]LYUTY)NoVT2Yfn<9hKd"!:bMfte/R62T=Wk\Z*Yt17p.Y=p(%ab9*TM2A+BiO>=N#^mh`(117Pugge
%Tk:6DS)ao0Va*sOF]8694^HTOVcNCdP3Na#;.^`W;I7]"FB.%Y>`%(Q\gMMoTbk>d?lb=Eor#%6Gf;H`>-qn5k,B^UEkhX?s*ZM6
%E)5ldLM&<Bh"b7udn8n*]f:sE`N'3oMj"_O3Bmt4:\S/[S&iHZB3cZX,?"t/DWFfVkFinUl+[0N2H-6`rp*PcY8V[X<%/`WKq_hc
%=kJfl)tB3]^2kmO=4Bh741KX8Igt>1J$_BZrAir:b%$gXLSNi,b+k;oUL%M<^>A,s*=mJlpKlqr(0L4N`5@H<l?cB3\?r;.j[09l
%12$?:^[Pr3rq\(J5:^1(7HO,BYHn&;I.p*'Ib9pG2EN\Fb2Vm)<?=#EHhcX6TiD4kY8eUl-]DSlpd9j-']hOCs6d_VWs?-6h_]r2
%>LUl:[kln>HAr(XH-18$crX3qFQ.@Gh<MuM3J`R?f)EtIc,F0?.LQ$<&FjLohWtYsdqMUu^U\EV!M>B#iM8^9#HMu.e7>m9s4<0K
%jLtN*,IPpk9P6<Eltj)R5<Qg&dkB6SL8OsB$ndO1L0iA^)g)o2dd0Xh+AInP!,r)`qcuU*FN/ej^kW^F01WW;rA8_6f+f*\gR=-7
%@PIO`7t[M"=MQRLZgIo)msI@7^`T,`8QI%;4Be#1B>1#;Fe!mYW&>]@c6(&'Dq`m0)>rq?L&&capnKY5GBO/rFdi5D7e6!baT(/`
%Yum7U*qT]LA,'s)cc,*GdEY]\Y]DS=E9Ho+q=>s+GgZUe`L6NDf^$:,[o3B![E7GnXrd&eh;RG,m+l4BK!OL3qu6cQ;G?2b%H<`+
%S7S$aM#Zmgc@3D7;u\jqaDMA<^Z=Zb\SsWY#+:p0l`-3tEuooA7btu=mPQ=@1>PCbnNT4ZC_HdH\FFdge%_Mi>^s^f/]2,fci7-c
%3Z7S%s*(_Gc=h!81@FiQ\c+7Rgo6G)N2FHN2L9^KN?c/`i%hD1BJfLN*Jq,o31$CH4[$">kY88PDk#U5SNia!?@W"5)R=A@7K:ME
%A`H!nDL_A(V[$:!%>"NY`i6N-T/X*kr_LMM^]&(T>$0JX/PQ"j07WiU2iWu7A=!/F<fO(pNdHuHplA`m]D#[]8o(n#mHjHMrFq!8
%2N!+-XaY+EX`VS3SPa%4>Nmoda]-9jk]^UcrGaK_`Kc.$MVX%8+M#"`?Q-hI7E]2NZLH.B$q.Yj\20WpG@X@XIn>:kh9)PnT@1P/
%/T8)kQ2Y<IN%/PI8!W3,dYC2PWCJ=7Bq=5@B?GOc4\bG1N@RnEcl_s2;q]!&(7e.>UVe'CEf;uZX_r=%E^Zh=nRSuZDN'U944F0H
%KWo>KB$.TCG'Z[qg?T8qlb1%cD&Woli_B9EiMlL@.JEb6h`WsJUmH"R/6Qj;A7e_NUGL[il0S-oS"o"kiJd6ej;@dgl=>2lC\su]
%9Ubs11eFml#g6B=9ViQ=ah^tWjuu!O*V:hhPJ+f!^tQoPE;s^1\t(e<G.omtM:9VjEs/mL]6Kj:g!LnTnM/7eq+c74`@4k+F5RFU
%oX[u;m%)Fp1[Off+t0A1kuM`l]JGgmDiD8u!QI',Jb+_:?CEk^X3I'<jmTZeO$hNsUuep1nLRS9Q/g/p9P`'@3Z3$34)edaTkdXH
%b1_\.>h_F0=&1LBjEPe/&9S3Ua_BC)B6'@_MTtYO\?fDfK57N>$.Db31qiH,Bn[F@h`BF&"DEj,45XF@k8^3p]@n:tO(F/U"8jeq
%K)8(jc23h[\tee5DtfceWB>JeRa-ASAXkU3$h$RFrQ\0AqK'#"dX9SJ,k`a(UR`s$[>_>0P*:VV`O:X-GZ=-E_l.E0<`bK`.7;db
%S*3WBm+'q<&!u-;\[U5e0Y\CYIC2mY*j6P(4Ph1:=DQf]T=`_=GH-k]p?hI;^%HXGmE3loiNpQD?gbU0*hRQ7G0>AtgbE5^bO[(*
%T?[=[n+Q>3\*AV-V>9/nnmpR+,i(")DVQ)lV,!>C#,CY3C4*5ZYWb[o4^<<B]2:EWFEhHta2=hKek*IkhL8i33OngXfpb)3PHA1^
%la?,fPD:s]X\J-YcX1U`S#,W+Vrabmp=JEHPNpQ5k5:d6p>!gY*bX,1?f1_43;EF47QP4Dp+C%Ga5(??\FRAifN\58gM>O.*r``$
%h<8>'Nmk]:h<WBoC>4`g?VA)@hL0WT>MY_ha;f*TCH$a7N7r?J+/ZUCkf0sJc?*p.BWYr_EW,UODS+:hhq,bA$eQCNW".#+X8T+G
%o>`(iZ?<K3)Qk,h9)"Ygf+oGjq9n%*R_>P92f%aJli$O<(X8kcoae5FO'D'k23sT#h)g"or,lGRfR@d`;DleXbtBS]Il;UsR?b@(
%o'"WKg9>qmki%`ucE63)rj9;M\G`c6nEK*$qk`k1_+t#Ms4c7FI;nB&^$:ThkrW\4qYPG_iSu<#F^q-Ek[:pTd4'M-*56+SoiaH#
%n*\F`Q#<%;hT)<@kkoPapuY=gH"eG9fj)/@k].m?=4>J#p64>4+rdo]C\cSgDN@`:\"V<"p^?Iagi@W]8'S`L"b1OTnNgCj5HM8Z
%a5_f]5j66AhEM*/I86O9fXBqk#P/+^8SbGN1h?.HX6W'cn9/]PL0E[&X*V_!'G&U@ikm,kF7&,*e@j^NN20g!D8kgV6Vm*p8ChR&
%;g*;0;D`+MT"KnbPO52#lbC0"p]&JQr\2%efQR%jg94(p%rO9$:S*$c7Jl&O\f\siF(P2VMS1!=q7\Ji4*SF)8q4.YT3C-s_frBr
%[9%rtn%UgX5OG5b]q[[dK#S=[2#6c6*5C/IENMl9rG(B/\ocD=hVVVj--1E$2QPATqf[9jIJrZg]?[TrY"@duc;hHDSM"+#OsBRu
%0l;?mSNAMUNK(tbqoa#q2.-3be8G9am?;E_n)1O)aiW54>2*/YI:"eT8"HKg9+R("J$eD4euLZHC&=*Ds7WoJ*Qb;B3-g_]g2hJ+
%qq!g3D[ot^2l^`l2#Xhmr,-rIle-/6T5ufaU%oKtF66-Nlof%MT.SZAeSNj+^#jXshNM+"IoG+q481`S0'MZ9D*B&S>?m_Xp)<m$
%h_t3E5&Ya_X^@'gapB__o@:?(_g1dI3(q2sXk#,gf1'WS`U:Y;O7,lnApr_"hX!9Ce[FAmXu=lQhYKnqYV;U)G,*g(pKS7YnkU//
%?Z%u$2t,<^2LZXKm$M^Th3\YERn'$9oBlG(q;$dNHSfHoGVGa\YO?sQ/$f2O[Gri-)>e^.DL]ENj1t?'_]\LNl0Qjra(Hp1ptLd"
%c$OaL(ZhH^f$:&:[qhK)cTZtJ^R/R8pYE:dK,72P\,%1]gY6r890C"74"%.W_p-O'RN.l9TGn=P+jfLrU)d^_BhnKgc%F<\>fJ$R
%*m1qXF^*\iXf-,4#+o[85Lpb@gU-ZaH0KUL.Reg!PAY-ic&K>XoBG=_D<k^o/.1J"O-[iBa*2+f5P[+5FoKq>ZWE,p*"-3Leu#"L
%[m%8O^J&9CIN>oQa8=3>J>THpF_V)u>Pn1@PtE-i$1,1(?P)ABA[$<`>:Y-6G5,M!I>_.u>I1M=Z^^jVVYaqR2I*5lT?YhjYP[Rb
%XN8iUEoT4YEkCF&o5=,Rb`O`2^V3^>fAX`4Rg?crqu!NXLZtic.J!2#r;'[ieiqo=Tc[Pj<X5MXaOlB4QUc_C52FjNGL7CH^Ys&%
%RQkmd(R65[3ILKF>?+E2V0(\2@C_G&mTZiRNp4G[2^U.&a/&*7CL)l/lcO*)dt.89<R3bVZ0>0J=E8`7W.?\6-?kqlejO96HfH7G
%p$s_@J=\R1(,bY,X>,@AS;iigbr0hO8$WT8p[\0ZQ,@VndCm't;(fj$\#rVH@s@8N['Vk3^6UI4S%N+#6/un:a@j%ebp\mX3,+r;
%Kh"D-5V^$_:G]X,17[1q[@K8&g`#T;*aaaMJu+j3G&u.o>9LgW>mq\`rH0a,>dF5De!EbhLi1_3ha+aoe@+8:&)5;%HJ?]ph*&NK
%]Ef)if&#c\Di"2dnZhS[l@IRAH(8F3DrJ,1$-gBLpUB#I2u;FGqZT"#CeQ=)6cQ`FT;OUr?cWBVOWGRX^HcL8\6Xn;"VW%(Qt\-Y
%r3XkS"c'S=iqJ#543K5u;SPgnCL5e"R,8:@ld(%1:Y1Sl+2)MTT,ZXeXaf+EP(.'>N>1T(Z/aH^\"'Drn5`LM)Jr0R;2UqM7BnD_
%Lu)$9de_8'83<r5))g`6#g%gr>lD>6X1#Qbs%@D\ltr<BL8psYTAEb!Y6,a<DuYV?_`.7(Lo?$Wq+i:,CQ#-Yc2WZaOc-0.S<M4B
%o.RX(HJ!,']`9IbAQ.JBUUsi[E2tA0@dSdfNLj$]4LJ.VUi5SdV:LuJY#SI<GCR@)ei8IMRAY%7oW8rIpZB]RHp,*']eF@VNo,<Q
%XZ,u\:UVA<k=ssS;9V)jDgj#c[r4D,1d4\[341Z@]u_%q1#EUDm/>8GTuGbJLF^j9c`bq3jDd<<+YGEJF+<0J1I[P[_69!"cL6hZ
%L\K9XqVe!I:RKQsJ[\D#Y77,Yj.FA779XmF>b`u;8@pDFJUR+'(m1A,4S_s+^4#b?koDcSLA1/o>((k"lh%EjhC)oTaNuFZj#n8p
%bP1q"nAXX8?f-sOe=4*WWXkC#J[bCKrJ3nJ?@TV*m_+%Y,1NaNo^D7WPTD*&lM.oXT515bck(*0/_rS&#^PG'\$$<[[9LP4+/SQ_
%J,@XV,joQOeR*5IbA9?`^!t=":HmX7]mdNb%[q#'L$WE+!fG?[-TdgS`qmu#/pKUGC"``'Ugc]`%W>4ZGkcAlo2Bg%^K-&Y<nHYm
%0-8u!piLS\5g.3p;LiKS6iY8fik(^,G`R'0#+hdbjsAUVPC7@V&-$(ieCMq=Ia,$>/g+f]nab]9a.&gsn,LQ*:#>ZGg=FF7:YD3b
%@t4=ANO7>n-Z^Ya%u@]m?fWIZI4`Z4](sp>#.>n]n&K$QH1C:8l3qfB6)=(oVais@mCDnT50PNm\V_8\.^kY&Qh\6O;"EQ?[W^8"
%o#rR^Qt4X!VgHUnM\)hP,AXF*+5_Ht.eo[i)is0qhWC$@h!!09WE-2\KM6!JGN\e(2c@rVX*no9gUhf;N!\=M@219frJfl\o'tc2
%dSBS"bj=[96n_n-][JA@Pjj4r_<F8HB,PlD$WZS7]@5$urQW0QWbbHqIXU.34T-QUp5Akg1D[3A-adLJG[G<-ZB3hh%<U]mc+WD%
%8.jt*g3DVZIU61"\QA+%q6Kt0orW;><I6M=mCCe3G+Ui>+YU=Ufr8TGT9l..C&?l\-XT2rl@m1GpuU8kC[:l,4.k=/legiF`c7)Y
%ncl1eG@WGVe_53,gV,)jTDGnZ1!0H.lH"ZiZa"uk^OL792(R^#d<I*Roig6Zm<f_t?nmofp-].8k^BFaF6RHXn,#NCf(C-?>$cOK
%p24sEW;jCL^&(X.]md2BC\;F\[NDqZm]:eql\B(r>ZU0Uh`Q00[!gt#/cLpG@1aZa93^Qg5M<btH`R,Df%lD>lTor\gn&Gec/#"]
%0m>/40`-&("YJ/lMgMqB%aO;r'Lq_,dX(](mZll>q6b2>^&DmEh<jG`ms=$QPP+kn5_8/hqb96-XtIqGGOL:("1F>M1)TZD(I.Zf
%*r#-:ISkGJS?K>i+.kbWDfS9,0%r"*\G14=q9+JgUr^.Qn]U@[X&DG&Hf+652YIYbPK,?N(]1?1d3g0g.PeE6W;Ul#B_pX.b5I"T
%QIaA<\9.&@(/,f,V2#l3f$<.H-RCNJ'G3HP-!\?7h<M^]:/8"-2js\6FH^UjTAt8?cGdhnm2't4q&@Sd)ggGPh*dl1?<u@%e$ibd
%(-UE)&JA&!/]h#`lUrrVg%/jWV+l=5`!42Pk8\W^aZU,,EXUNt?DIP]=[IRI+5CV6J)(Ugoc)c"puq=)6!dmISJRKDk3D5egVct^
%&T#2\oMVKU7NFDJEUrDDNVhShpOsEE?@;P`jWk$DSfb?^gn2&tX?6k6G:X9g-s5i4h07'&P7O7LqN8?9hmErOY"Rd)Ms'iJqI":?
%j0Y[>HWi_/jhU;7khdm`)m2c5?do:NSg\=Y[mVFTjji4H2Q"ap=2/o7$@R/^YNsLSV:a&K<qiKi8f;qoA)(rJD]YN2W7tO3[I%RN
%>6r68_tLRebI"[`:j[0?J[S@8G<ZB!>.o%c,Ff0JOGPPt9huF2$+kC7,q%Hlp%@JP3lc4$::"$8Yj:r3qqqQ*oJmb\Qc^:+bBM5a
%r5o]Y9"+BfK3tqBX"TCi.$EIN3UYG8PIa77LIh=h[g,PHbpB.]T\:=6J,\5.(7k<p<+t2pHg,hIqs*aamF;^?lNe4$6#1djog[O*
%g.AXIAp7\Zn]RP[`@5eb[Ok!hfViY'h>L>#K]?:K^r(HNS+#0VUO-OoA8gjGH84+-h<f)EIedjDV#B>CItZk8fR"CpcE'gLXe"K8
%Fn#0%H>cFal+`hU$[^c[ds0Q9HtjXShs63d\!p`nmFpC(_?cVGrc1XAIQa[DHFqP"@mq_n%_Z569jYD6%mRd6:4LPPr4K];orYH[
%q"7!-GVF@!T"KLs=S:hDHoAp@V,^l+)%:(\%X3-Y"Q+'Yhu'&1Z8YRK]c5#`YU7*u"jl!g2+/g_a^9c"l_I:lgRG[S'>5Hres@3=
%a!HF&UUTju5<;nq\+d<@$/i=0S8aDU:tY:98%%RVf@;\>#BqSZI_F5,f(S"P?8'#W#D:L9k1X>ZDFIbE[f5B8D7K/Fdp?34F/R@9
%f&EsUPL\LNo\`AZ!0&-!ckOL-^&71O0jq8kr:p5oIf)A8HD1D"cB&)l3rE!=mb:P*(q$tEYNh+YLpg[-&ots[4kNstAIuQRANRL%
%U&Oo6a?$eg)_C@Xg[C^S/h]@NIT_$pBRQkfF"]R[.PL?fAE3P#aQBlJHN3nD]2AI:0>A::\!rj?r,]K<bV,"m[\(_l>We*r1V8.+
%Ns2\Occn,)"^]>T5<UF'$;>cm?JfW?7+9ECUE@Mel9D1:rGpru5[sS0P&@FNqH?QP,<!B/mZB)e488Sh:`-?P9gABAHZu(mP%_N'
%Sq]-8C,XD%i[br%C27JZ_;0:0Sj%["s&-FRgi(]^Xj3!RF6-]p/tXupDghF0UjfK$lIu,.2=Ke`d2;uMXl!uu]m0DTHso<;qt%ts
%0mZN;Q>-Q7T3C%]0DA#llN@%C7s"&hi'VPag>(F(<bJDI1R\Sbn^kfsX`!cWNjbUeEfVpL=/52'qD.o]7_`RmI$5W&>2-GEIBu.b
%-lpKRk*d[Kr\A2p*'aApFEr6Y\5DgJq3uRM5'd!Fl%:\]oog9LEtd\kGl.B[YdS\TnYE];fpbY+-XZ`Dl)t>oe)r8PM]CQY;rnM=
%Ut"@DHkR:-B[U-mq[3?t]X9h)=uj=qD5$IU.D,(2%lWa+"gbo5iR<QjF78e/A3MSdPclG>_YI7$;*E,DU7D'\qoAH52Aj992so+X
%L$DBp`"q2;jaB3l)t*&gKQ2ED44BuZWEB^RDmnJG,!LK<&[M:2B`Iel'7T6q1^gt"D82(>MrdSBQ[`nojH&0D=IM05`S3W6S)qV!
%Dc61m?65`qT_c?umH0'#U[HS.a7Xa1R9t@D3Gh!lgTQSH?9K^^hF4K;D,@BOmLSX>g8jo0*GVf\$%HP\YA^k\++'X^Mk0U;T?Tm.
%T6K"kFOY5Wqf)%*jJ7KjZgLr-]X6&"Q+U;r=j,4f;mW#WrBq\dCDN8RG5\*5\ouiZ_oWI1=r_H&TBG?:J[<li\LE<35!>#P$_rl%
%]#=!f+1qh#n&t:XS"Ao,X\_bS\bZ3o?@@4)2QH/hPukP1khCEah;%heTCO?;*mF)2?oiRp`6Y#;(J3_+ot6Q_le;l[s1%gaera1N
%)-OGuiTB=20<OZK]9/V=^&<,T)9$_[mk5HD^:6+(fl,JK2a3,InF\MEfUKR<c(BSuNR'qXIauWbE\\AhUu&]=qK?N^6q_4NCUT#U
%5;^.CJ%a6us8)_OQ4)hiM\'.YnSiX*i*0OkoArI[*rOsXqO>+ADPOs'GuTS**('Pjb/WsoU63n&pLBWWF5.@52i[frchE*.FFQ0]
%gC$B+2t#I#TA4kjp17[rH+MXT,ib8P(:&Itf9"X&^4g:^T&4oZGm`<^4o`S"pFH#SpPt*YmgiVU*i@@QrML4Xj-/S3cgJRFJ"Pjh
%MPoJ+RS7)'<leYaC\jt84+GaCWb14hUZk'_I/dA=]17?^d?I(q@Cb`LG<Dj>MJNk<WA0WMMIl=?PK>,AZXe!1(t@A?!N>*hs)hT6
%NeW&U``!>7^8/`BBIOMI6l-Qn+.jKjHsY4jRA/lirE*]]`Or%sUc1G:YS?AM]'KISc-a.t`I[8/;Z-)`h(q@S(DIk_p,gb&+."SQ
%hJcZS*?:.77RcgQ4a.D57u(+"XYC^\m8^'Zj6IL&o_(m5\tHFg:N(Hcl"_!)D>NT;TJ/a*G<4bWf,b)-pab!"%YML"lu?[Qf,sF?
%Z>rr0\o>$g]fdVKPk1Qn5Fa;'F0maj:BtO=,L9,D`u$Q0=,hCsI%IsQh=5@t@ISopEV5CY(<iXccGt8GSTHrG?Ja\,"g\u>oB;^/
%3Z_#l=6pHTaatTVN5kn>Os8nD$BE-9RH^_'mgd@f4@`dld-2TX;)k=na.qm1BIA.4AXf74:4IT>3PJ8Ad1na7(Yj!:\<iN:m7mHS
%_c$q^c41j:O/iM+j<hQ5cSE]BH-L@c8WS]M=!Rb#6R5+tGi_n)F'CF78YYMGe0cn60"50s0/$QAT(K%+94[3JAqtuMq@]i%:[qsV
%E/45`pbLugEj!*Mi5JD_RA8/IDfBTSopN\4PhpXCXngBWBSAQIVgM"bH(>6:*V:cZPS+t=_)5iug-8s2_+=EJ6JaR</L/2=lXW+=
%mT!;s?<%o=c;^UEp8aH;2*\fg-BPRVVsh9`P!W:KX+de'E&bFfGGtjk1@4-RrLuLk^+d8\0C"e71Rgg[SjYCrhEAEL`8o'!\t_pL
%"4E\Nj".Is4M!.6AeV-rP^A)Y%51q5.C@!WQqSR55g8Nld2Q=6'MV>G-C:9C'q@m#I19n%#,SM#^5T01M`9\DASe,TnHqaY%-WY+
%HsrKXgj=2J)kQa.7>g6<VhL)E4.KP69eCHLkl,_XdO@-4^P;5%Kaoa$:AFRK7i3b"`VC^9@uBU&%.e5]:eI#L90uQO0&f_aCc+h[
%l@iKNh!_cm/S/OY`Pjso)>F0]ZBCJNqVaY9G-RLo':nAfK$@DXmWd/IHfIcg$:Q=trF:u?L6jF/Pa7!#b<G=fcCLd[om";PH&a]F
%Tr-8lgiCMnO5=S[B`0bN.jZR<oIH7m]QJ]&E*f\u`5IC'9RJX[R!>/A=Yt,$@Vf:[NZ5`2>J5+ojjC@&eWXCG9BU7?:WlqPAq"Z%
%)30SrhF`:=Zq`"Y`=3rdFC]68"1+qcV\P>)1k5Pr,\FNkftFPiVJ4:f$k3+qorc[_boO-C]LHg@VP\fK+,IQd_1@lHf&%QZ`P2OA
%h"t=(gNePf_q](:^Mf/pa2aO8K!LQ-i-6,^`1!B9*=V;Z/3CM=oZ$!iJZLD0ITjMA3foW_*qt_%5a8oN=[D\#d0g_a1u/*"nChs<
%c<:-XmCp`'_)6t*pSY/0p5HQ'fLf\;aouI@mG[rfG_e;P?7+P-N=>Xklt=qbCZ'g+\7Vo<q3Jp7M-c-qU[GsCFOY)drZ(3_Ok1TR
%(JCZVFFLs0)2\P,e`LPlcUAe:?_hZbZJnTpV'PR%<26Nbf*gKs%!1BD=-q4@8>9`,IA(+UfNGO>RJ,0o0[n?Z^#2&fno+DGMai`&
%cH<g]OQjPW2]C_N'g]W)k?+oll0!HXJotKh6;.>.?(J7W+(eL94H1MR+BQ<DbKcNp4BM:$%jK7AD*]29qL=OFLLj)$q2Ss\f@t8"
%+D3>G\Vrq`jZ'sBm9gn4d6pSpp4APkF`bo9p$6F?9ba.hc;`]tm-9:+XB]aAYM%S98;+4em=UUtSRJE\\5[XDTult+b2"?WU&bGQ
%@Cs$ql#Ji^7SV?]]tE,o;apkjZL$"(ZQA3&Tk%*9=/i5O"C,@*50YY9QaMt!EL4`34T(Rnf,Ob3pV9h<qRqd-6'GWO77fs>!T$%H
%q9R/[V)9Sb55d4Ic[*K$E>qDhFN=i"HGb$8:t``jFN=:mY=P7,&,P=]c;;e(X7l:7o9InD$UKBe#k--rm7d0NYsXX;s)8(/<rVHF
%0eVDe>#2`5Ag<_8lFCqkKc^f$r)$hn-Um:Ba\]&+]$\7NMqfg[e^L*#;!UCGf^Ie&]tIk2DtOGA/O[-2mN7cTeE,dFi)/0Q44ajA
%539b?>D8o\[PQ(^:F2G&1ipF_SNrAt/+q&"X'n_;m=J\&=&2!>7k_'OK[*>"B`'Kr%'-\Ne,E[gco!I^J6A%VAd0&N^#BC!^VRrs
%T6/3l9`6P8?4n\?SKgqp-+j)!:AF1#0BH-D6JJ=E_m9:>$Y7P(G3$kTs5"C5;#"fsRMT3AG,a,:C3e.`ct+3c49;iX7/n%b?_b53
%6bRY=XmpY#F7?`[j"FaHqM7)#cd;><?YY3ZjfM&RP>XCeQh"EOgqS6il:iE-8u\qfNpqS@Zi[4if-Qu;!RnR\F!nGP/QV!:U27#q
%CVcol^G+lA^-V*pS'Q7,Wo93<jjI1ACbDPR(=1D#9/#?cog4HrGbkO\9`)Nq=pbU:qK`\4hR%jkEE[p8Wc)*u!8Z<'rO9>gNhA>f
%A%j[neNo59GrJm??#<U`=1%UD.BQW.n%0:#YO32/rJpW%n3&$=rlj84ErFUhGa5&]Ig]c$R`$7^D3R6C]%7B*_B/k3/YD>jR-Y"F
%B(mdS2mWp!V8!!,D[Tm:08U17Xg"7kBiGCKlT4-/^8W[A<C.dfZI2%'<"bCLeM)g)/T04&r)&]YGQ1EFp$;A6(QG,L4fh,dXtSDS
%=!5'8p;<hDV*-7\[=ct<JH8IC0I_O$BWJjc@R<a."GDGBBF)E^ZRT6[[+3e5=tDQ5oY\1RCmk^L<.c;c$&MO(Y6J<B.sTlMQrKj%
%6[qDPL,'E,9WM3K^hH2fmgESC)0s$BD<MO*&k1KVqk6\Bn1C,#&fXmPM,U#e`I;2e!$`_t<X5/2]P?L4(nF3,ejSW!T3`\?-\il<
%X/V(h5]JYPP7[&Gpf/u1!Z=N_1CZ\H*)tBh(=,J#-kQgFbF4g:7mg,tlRL*:Mhm@HMe'Cr(fu[DL!2b_na^,+.LtN>dfcj`6Q,2m
%q&IO$`X+iL^]G#S'r@#JGnT2a`"tP"X[r\OdYa;]#I4MbR8N;S'e9[PKefK>A7@hZWGVm[E7o1SRqGYuZ"_b0N/Y+eW#S=5P(HKt
%A!]h"KX-dOP/L@9P>nP0CaPDg@R8-B/*V%&;_F5!Vho4a7BkKjTLRI2%RjVoV6";CSW*qLeWUbj670KP^9k@;[T"ZBS:j9Af;(HD
%j%G/!%(_1[$ZV!BK[h@@\Li(#[a^>;JLkBHDl:'F2uJ8o0?IOTSdgo@)%fldd&jeD@:5p7S<tRfI@"A3^b+5T6+U%X-78gmb<BD:
%X,-k?jfl7PQeW=8'`Bn6YQ[+*i2,)=1_KL[#o)CtAk>FOL5BG)(8isOM-!(%QStrgTCpj=?]ATY6gcV-@-F;cOaKnd3@hrhA->s0
%DdX0O!3]B13QnE7S<!].P<]VX1_BI3YV7o>ompp],*X4-Ubb/V3-1[M-aK+D,oa#FVb(IK:<uH;QuN@;Lg?+>4E!\;M+oKT"sYBb
%2B</M6hYI-ZB+Qn^pB=-"=42q.jbkH9@.Go>(_ko'eiBnUu`7A.)Uugfd>qnn(kuWN"q;:c[IFc87jJJLs'IJ22Yn2;lao.b)gT%
%jnoEF9*-5Y=S67j6F)<j`=]0GT[OXL11>iE)!O5H4VOi,jBidG//4fk#Y'H48.Ae2M<n7h&=a5/lu$KJ^4GVo%ZJb!]E,:sbJ\e1
%+`1@XL*=S^%BTJ3'fqG,7TMh;o8c4LU=@d5%YS+XKeQ&:^k>NO$5]!Y+/=_;2\$6l8:Z>R>lZ%6WQ?hl,;fPe6KTR^.g.mPoFZ%@
%AJnE#%QP:MS&07I&7Qf`$J^j8$d&apgGB7^G%4Eafu#:Gi>u#b4jghUhB7M;B7-d]p)3M!)OOK!@0T?c%-m$&O5_Gb**59f#Xb_W
%JV<2h'FB1@`6h52"q#d?VMkb[Q=:[j&qW6[M+EJTaDt[&/4WC2)b*/P'03H;YjAgf2P#_A]B<[T]MLlafuLXcc\WX3ic>BkBO)>V
%fd]RGCke$g"&(X;8>kgeS/CT;a%'Sd*Qr0eAU?OR(#'=N0?YLHYs#BD7X0M<!tK]iij'R2d*!h[P,]jkU&i1ATb^N`"G;q[#^V.B
%^h,#<9YpciAB>Lh&K+C(Jb@4G#Z2"aG/l=Q8DAt9*#1%!@lY'O]-K1@T^5$:F,2?1Kg#<iWtJGr9MQ')B-<f[:fk^]*X%*$806]&
%`PNHp74*^I50@S5@`T[tObr%J-D"kBXjF-liW7=j1'_5E?i_=I>:`nDbL4R!"7YVYp0I`:p/*)F:BHe$I([3j#*qY\eUY(84Sqer
%n+f:$F-+U$NeEQ@i8!7g12[X*BehQW`Z?fq(2bG&`:Lc$66co2Kkr#%p@)-o<2>ZfGXnT-$LQ#Q'0tPV0MTQN`$%=AW%WRp8Q:(<
%-56QO1D$FFapF&+PrMRg@Rm,'j5oV6h2lQ/3053h2]%_"@7G2n0et@+pk'Bb$:Gd5`AOs0C#lL!n3L/p"\f=G(H`F#p/82@g&DW5
%[t&]`B.8?JU(<ib2ankjdSAYm(X!@h%P,OF!iI_'FR=em5rFV\8iFBL1MYlB#[&SkP)5?AZ5pS_dg4[*K)b0Impfot?ub00*0hS`
%&@>T%Pi<"GKcG[XC"rh!@&3];9aTQ*Y>pCBM]PMA)Gne>9'_K>Q#J+V]fEKMDHDDSIKYKLBGk%9]GXP5T8>jtE'cs/'HSL?&m16]
%==#mJLFG'Uq'%=;Z1eEGA2;T6#le36&gZ*EETJW&$`VDpA<Xl6IG)Z8)"p,_!"jTQ5hlc]K+SNQj\1E.<g4=7@9\'m)BDZ2M]`<3
%pTENK`WD:%Gq9%09pl![^GI7C&98af/qnI"@_*89o-:PWP!W6dP`4"B/S[om@Tc#gj$FH57L*Y)d"&[g!'0@o`(eKb6@HLGW(uV,
%?Nti8[BunQEEQ.'^`-.Ga:6H/eg#MkA2oN-"d(pDOs!5YL-TZcTHSE8%,qbQXBn^Q-As56,@sdp(m4pk8l5_(+qAbkNFJ:uE)hQC
%Lt4b#(o[a8?qhLOWh<XF(7#PbY!F'%LeA&MQ@te8f2&C'Ki$\e8./kH&A(hX/.`]fkG@P,iHU2uQ@P?6&Ccn"(Pn_^/g_MF8rJuZ
%:q9PE*-7$kIKh6Da]+_7fP1mgpk#SaK!u^b<DB/9$@ou$!2@<k)ZWl/2-`H.<"Lm,]!?-U#_6Rdi\N%b6,Tp+-A5-k?,`Cp8cVE"
%.ZEICR8s@r6JRg-njSiR@c*:HGQrLH3i;CQ4_oWLi+5/g&^hjU@r*;2Lh7Q^+K+9[iSehhm[Hn>CRZ+R6o9u0V'XHC(_^<Q':`o"
%p9=s;"u9u:o8reQPRjLf#DaKhN0BSq6HC=4U/h;Jj<=:&85(HYJ;A%d63?&n,7u<SodADN$2k''#2k>g:]g0,%fO0T?Wff>R\=E!
%>0hhaKjm@MZ$LHY7(\b-nYmI[8n*!qE!H/>:@(FKK6S+Z7u&up.8ND[;]lMb)(<G#H[uM:?"JV41UtM?E`aQaQ)7BQ;`?i*K?3QQ
%LM4n_gHG^b'9a!(R^<1[,)rOHJ=>L`'bHn"-p'R%Au\Vg#3UOP_*Z7`a3M$LMLmKlorJG\'.cpMG`:IpY[UsM5*0Uek9RVnG`%>g
%CYX74OKZI;@#4lT(dDuabKbl,V^uT`U#*l,'1GjGX7&).4F*;;[OJZ-'Hen-(EGG.Ep41:/COmI`DVt2!Jt8:=oh3[??]C9aam"j
%Fsp'2,[N7/1rc+p$a"4g`Z>L0U>5i:?3'X,Pf6H;Y`tU[6B4_>9HFBFUik0&9FECPQ7kk?I#seND@:TM"V#;d,-l0\7Xu,u;LR[g
%KOD"'Js"u5!QR?!\"4qTY1cBFRuLE:&f_XL@t:!Z#Xb10L_Gk57,1JQ36pRlh7=:%M:@.b.ls^2AB(pNS2r#BoTJ>La3NALW#r0+
%KP>086B#X4&m\X.KG_9G(iZF`-5.%:&G,+Iog2mplk=oB>!aeGCgB*q_6Y>d*Qn"Q=<;DeAZJ^<3Mh,^m<Ig+$mCAE&+Thl?F<&"
%7hUs-Khg@D7@:lIs(<VuQ%3CZ4J7oL4q3&I2JCdj#kV.cGbMGeMuX/4YqJF'NG+O`iY%nWCRV>,>ehnV&gRXLJ@#qVEaqT?"<-KO
%&Te3@>Y'PP5JY8c0sn#Q[D31N];EfEb>c9)29s3L:4Z44.#\@lgqCX:k0sst*U8Vf;[#PLGbo.K"iCZBY';h$MC)_'!!CZd:,A7j
%N6f;>)ELRp@o#8O3N#qV(Du$W*d0gF,J/[B3fuGtPfR@2&jFhV*''Ytm2.Q%'0p1c#kThjWS+F&"u^1'NY+fMOUW4r%4OcneqA@R
%S&1Q/%P9PD"0*>>PYrJ/'A[8XpTY(s1lg&=""rr`&jj)AAt;9BL^[H2CD:dq+[L)K8/Auf,f3i?QGEL$ZjZ+O[$3Hg5^5VuSEDRs
%U$PBJ`hTO\8n^c@RR4LfM[5SF@XoX/=kIKn_%W)U6qE&998aoP1bgTbE'<9p6`r!J@F^#q82HPE27\=?#/kAVTO=n$J'2F-YYmb/
%&-5f'<+cjp!(),s[@7o8fGP];r.Cr;J/UZeYRk7fMVU,0F+aio6Wc[DI70YBFs@qQ&sER$+2pF;coHWa_#C+5."k;PYknW"@=adN
%0dlWnltkl(VDL;E!t&K&PG96#RNDR'7jER!+!fO^HP#S.6k9nu@6()H!&ak;JntiWBa/N_M'O^i!3d%/':<DUi+;s,+gi_"94=PP
%=Sadt%V7L1east_;?JeJ9Is0m*EsUha95fr:.5`X;ko(e)loLnq.WYj\7\]uRWVq1N[)XaR\JR;%?!<#*^a:[%2:Oi\O]a%jq<<S
%M):^E5R\Vi)*fSM:H.TM0KE9P3*)F_%L8(cq<SD*JrKku'\?%fMk=COlNlm/pdn[2`uCug9E'pV_[LA%@?Zho0K!;H(/$3cf`oe1
%@UFh6S#WHR[=D1):$ciAaGN9eOY*r%b:kA<rAB,S-&?q=W<+Z)"co>$=c2aX,'uY3#-^;]KjmATnIrB?_YE6bamLK0;,R?%@/4gi
%f)d),Q:+jrJmdKA:bBMn+^'_rCD0buL-65o1sDHLK,uM`.LJ1i4q:(Z*HJ?;Sh51!"X2M`2)Cj#eh)pn)@t4\B'J7_6GJHm6NDd%
%Oo?d$YnC(Xq\[0Y'2ahLf$Hf*lM??^Df^HH5b"!G!74[r!6TZm+Nd-615s-Q!9c#_5l`K054Us([>)GtTfbc>f*%:0!i('B'^Nt+
%f\AGo6[u$Q,9/*%@::rah!j"8*j(5\W<E8S"D=d]@?DJcW7&f9^q?[Q$Tima-EMa[?<.-(&0quS6c1Ab18V64oV_hGC)77$D)mhT
%oL)/fZUEG!E+'krR*F/5X,-UYi/F5baq3^nXJ(7hE<8'r!s05D,chfhWqtFN$8l(uPD/</9rG_Z=(U86;5sa1W7OKc/)n&_Ktq0M
%Z*DPq`MT>tF^tYR%pGOF5U=hp-@2H-5)!l"BFj,59QE=aYfIMF#0?DBcSE,^7W*S\8tl!p0U+o6#>'O-&o-SI$,oIgEMPcK'<85A
%JkP8"Klb0W4i?Laoo)lU`=@ckk2u_7$XtYa;$[M#:hiJ0*LA#:Mru#04=H:TrIZp="QX,jrG5X;/BnKM`n:Y+87g;PU4t@H8ZAu8
%-*JhU.p^GB[Du+TTJFVudFocE)OM[OqD>rI!17-QUoOnN/1?P,N9mI]aA4Ic>@C(,(1&1eCr2"6Tn*r6(="=IB$E0.(f[H,JsU1>
%e^ZsY"c/NtgH&7a:k]o$rBlTrRV!_kH[:j/NPZj)C53Bj.Dlt/;&)%ZT]^i`!)9FbL2+:s]c93S(]\9RNF<P0S;mtk(.(4semq&^
%XQRuS6c2CsRg=s4&RC3u+@,o=7/g#"V18a&-;!ME1_gjV%>5#r5[BA#@s)[ZYis!u8iHia@r]:m7#jYVjbsjJ1kW;lM/!"7Mokf!
%@:IlRETRWi,gd^gk"[lB!W"7e&@><B;?``>OKf1L*(+89Y[Rfi,b0+jKmGXgAILsooGH%_8UHPs7K^f*5$(^pLoCpjF9k-N$6rOW
%,A4M1+B'7o4"3dQo[DM.WkfAn"*&ofgQ6t"!7GbdUV_NbU4-V+kM]qVEhj0XKjgG=KQ_%=XT7Q[5V5]1iE%ss"1VN@$M;RNq'tC1
%m50^D&E2!-Z_8+!6j[OF+pA#Z_rdlgV;2M-9^.6'5c-Y4p*=b'l,*s$bCT>/@i-_\6b!RlZ/F.c'a%kK$;"0B&4EOX'5,SKTg?ZI
%="?:k8H^QSaBR=1b6lW4O@)F]an1r5:cMcT@Y'ns5g=]A$;(Es\Uf*liE_5GrmHIO".-l`C"7>mgeG&8R'NBr(HJ*a$G+:l!Nh].
%#rmMR\]=seN-p`@P<dAn?Kt&ioEb4WBksFR91YFt#jLYPHQ9OKi_*Ze$_>BeE>AVCk#+\/i'?c7RREoW\.]oe&n[<:^`/f,!3uYg
%:1Oen+q.=)0WnM!_&Qo`P&Mej!Bk)J9RL#8TjR\!FoXqinYooC).qo267\pAR`h;LLnc+Q2J,VSY,#%$UVs]^&fe8\onpfu;j)kh
%NRdN83AW3RJ@U!qbIGHZi2EO<#;D5RZ%?9rW'Wh-RKs4X;@[\K8hG4`=DD9$K:+"cEg@kWi1`6S5jB&6,hBu\7ZX^WM`+D8@13U>
%TbZ*I$f/qR;G,1rplY\!!pL.]q]\sX1^F8(C2s4S@<`&Y=WMm$#RnkYSqA?ShFHmPL($#g`ZTm?4<'.KZo[PKYb*'0n-MJO"l=uq
%UOYgK>XamD+/qIWEL'\;c`jUmfd2Tu=L<;#]pUqQG\f/pOY^U%djMAHqO).(9p-8a+*=,%7&,MQ7V6G+Ft.9C,5S8_kIeWGVkG#;
%%F-,UoR>_7[qpp:"/)AE\KZh<Q:sZH3MIccB^oEm=:Pb^BbiX9SQ2;"!@Xr:pkB>+5X>s>;h?:F/?#BF6A&e>Y`!!rL_I(UrQ[r"
%.NMrU4;"5p=/+O385BW1W\P+r)28ZOPTCm@4<*:eZf@2bb!?%K,`*/J/i'o^LqS=d_#ZfuSBns#5o*(U9&:!%*D]hh<>(J/3mQ(1
%J/V8BFlPp_,bcOT3Fr1\*">4mnj9=R`o4iV+jsg3,hS;Z+@+HpRjQ$]L_R)?L\VUN%Du$DJ6O^&1K5YoVB.G4$-cR4M>?/,+Ena)
%Qn9F_Q4`a?(>3]8@N/'ZPqt%F_hH6<W=pu$)(JWa^gN[n5XM8'?+L<g<R-r0g'%"_Uk1Fb7PkMXc\V(mT`kkT.0,LQ:oKYs6FG;W
%bm9LIH)9#WYC*fPPIMQnTl+%m=K%fW/,?OlTM(cbP5bpp=&@sm;/6o/JC.<^b,Q%?`+om<:5h\BWsH.r:aPC'($,LI&4>icJAJT*
%Ya-*B\!='*qLZ\b]S$m1s&!L$;`LgOBdZYoQgQ%a"ED.!(6LU"$57e)$3CoY7R6gS<Yul(hb,22h(Jf?`!6nBK2Nl&Pu7dAGecj9
%>$oZ0V'OkclVVql^=%gg<7X]ABMVPL"+5or!j[n;/:31!J@iV45&VDo&<Tc@AdB&;m"*X+E'_*>*WmWd@h@oXU6Z"h+V5`uk5kX+
%;MD=Vk,BFD3_RBk1q9eE/`XK&E;P;,Adq$D_Z7moWK^8BoQscoM+&Bb`M?E^"#uO"7$*al&50/9,nJROhum^!N$_#r+gCCO0S/1:
%Fq/0u0^'0Iot`20@TJg#e\Qpu6PW'H%!7#_#;7I!dm>I_0SC@(P37B'<7IcsQq,H@cqr$H=`g)9!N60i2(9@4e`9*r!;maE4^uF1
%$c"t9a,]UnlM5rAlqL1HiLo>EX*>h=+:[maLQR3Cn2UO%`6F2`_`5N<X-LX86XNDF_P0lb1u8ehj3hS&on'9*;>`0T'u=R2U83l!
%kV4c)_-@<eV')F(_4Utk1AEdD0ETLVZ/m1QL!DB>"8$,X5#gg[&Ej]GU&m#N5gUb3#FgM67E1&'ck0oTO@6J3^h/pt4r\&gNb0^K
%hX[%(h_R_&)WPX=N!.MbWf\'*MNBn2K+0mD]MDr7^sa]4ngIsE7*LrQD-SAqX9o>EdSu39UMWsKNkggOpKE>q8r;Z1J2$9*@B,QU
%^01ZG@'L8pARN1De=[:[K[Bhi7*98"N#,B!2T%qel5jE`i9n&=UOc.W5^A5"%?6*47(#0pY4ugI_9k;(80*QZ?`Edj$pA^(!Ea2:
%Wtm$%25;:KBGR@oWBgQZXJjO&i>t$-cSD!kbY?%=&/l^o5JES=0l,+Ye67WXYsUc1&STE42)Ti[AfW5dY\!mS5J]66;omB@J6$(M
%/cur&XgJKQlt9J($ioR^7@:[:&X.;o=Gt(ZK8.0Q$nm3c*<jSk!:Ui1&SUs,j#i:$MZRJX+l.SEMu\Y2A#QX[Y)9EF!Ak@C)EX#+
%#m>:Q;,CY:A/$LX#NLaLK?snJ949^`IMegcSAK!d8AQFm\2i)Hp`l/?&4WWCU(<;B7MJ-JL==MZ_^%U,Y`I@:rXpBV+<a'mo7:*g
%rW#?h%\2VJ'Mp'2X>>c<7.A8@MHo9R!3r`Ye0oM6/rM>NJL=n_U4H`k0`YpD.H:[pPB2sJ'q"NF\:FfROPpg$lp\m+)"=%"?,/.+
%jsn`%W$WseQ=o7i'i3`f<8NKL&5+f:@`Ul>W?$r#Bb5]oZ5#brJ:Um=;RJc6)8I$a`2&WC-n$@(RI206%u\ag66R"DahaM(?aO9"
%oV1P!;L\[]A`JW;AtP,$Nd<CjHs.D\bGh@FR$7rS)MFd.i6W[%NVe@RX@@O<BIV\G8.5iXO-Eg!(,ZEY1.:8j7>2IASAS/t"r&8f
%,m(kL(<F]db-2F,:olQlS>NY8V`-3b9BD8>>l-!cVSK^G!2Ye?S:/AS<e:Dk.)>H("=qVfRNuX\TjA/@-_Tbalh3U4$.USkUe2n?
%'D%0ho&<'QBhS=*4KgI;U_'oL<>21O.D:D\54MUQUm`T[Ln>:Tl35/i=<i$sNe4?EXhh)nC`>-BQo3egJhN&'mqJ/1$MRW'Jl<#a
%Q)YcM)2DreK6,fQQd#L?58cbX(Q&e!Wj3BbgL.'QU.d+8;[E$*aB)#[*2h;idfc%gi0qRl97U-h>ZrY5M3r(W%OP4dqEb_LHIR,s
%87^gC6Mfoq%jB,eT-2(jJ:,`D&_I/X47"\8/MDbde^&ibZ&>*uIB]q'$L<3e0&bTln]7"DZ0F&mAEbC5I8<KQ(UARFO&Z/;fn(T2
%:)#[G&GZM1;]@KB<f3tQB*r?\-+\^!;[*L:N3c[p6Z>ad6q@s1:3mh<cZ!S:q[>UeJQn$d:qU?V0HHpGlZ<Q5/jLlkFEsr#lR/Mq
%#SrBKX?fo::,/#4A4iXM[bjGKP#Z9'`>;DTFTJ9joWE__)G$@F+9_g<N1)#[R0cDP,;112P>RlWc.Imr;@can>GYU6mfLGRm$Pr+
%JC:,<\>>"BJuLIoE2M!R2"sk`6go#DPYA$i,^rKsBeP045sl=XgK7`U$k'k^V<Z]B-;iB7)lHCr!!1ZkOikF&il))Z"ATm"NB8YL
%gnuJ(Z2ioWi0Yi/F9-naQQ7abEq1g_oRDrCq`J73MI>G<a^p6q_,u4VOOQ!+Sl<]3n=P9/=qDquj<8"^K8N%5(rV6'nA%U9HFbhL
%Eck^qOfh+YR?\AV#_W3R7ZnNs-P<_B"nY\k!48'U+_dnelkU#gp!j:N#%Rb'AQTf7hCseKEY/@Ud2.4B!_A%:OTrb.e@9d4gG)$a
%.NlUrOQ/;#,GoU:)WXN\.H!#sHNh25d4ugQ1nD1-$%EF0er!mH"i(>X'e94a2jju(3\LpG7-mAWE]*'?Kc1*A4G@,tF@q%!o92`R
%"gH:C6_iTKJ1ps,2L.NI'ihU(,63qG;_P4!G'`d"a$as?KFN*7eWD#gCUHu["9;%\ar[i$2GkJsmGY;;X+e@@Oh6KO!sF^&_70Ra
%?ioN1,@g?_19+tcKPreGG`%H#/o!am!a+dd\S2tK+_om&C8QN6V.s[06_TQ.K"s^MZ,$cBs(>fjn;o5\KohI%F5\0K$b7s3>$t2f
%-75c?&#/5W`0f1*;9hG3VpTCd]4-sH)8kJBo;`6B[pVK.KEHkN9T*.Qj+?o62tP?eDGSJBZ+=LP$h/q%lXkR\..&3th'eAD#HrS7
%9#U3CbV#AUp)-jsoe5GrS8SU+^ekeu\0.(kb[Z@B#COc7UnJ6@431F+)C%d-s.!V[^DrCdeR_]a<3-6aJI/]j>)7AiZ;%d#0dOIm
%-l2a1T'/om_(^C9L#dTZosj;&jgNY0$%$ltWOOR+$X(+2OkQ`6FLgR@S=3>!3FaKD%3j"=@);UC_ZU%8]I;O=d!2]D#5_Lcd0Ma?
%(:jsG$T]tF'X`ND#L67X1FTQt>W.[>5t2NS!FUj-=G4"H9r1&[+ekBZ8LK\&D=JKHK#Z>\+C?q3Xim2Fb*:6=;?h-XcUB4_Nm?(f
%C7GACXGCU!19?V,O3M1KA<LZ)@"K(,ZQb5^iZNq)dDU7V[StH)80.!\"V8>F`WOjG,NiLA\.YG7pmT@"[2]U$[BQ0g,f"W7QP".e
%&>#QqVOCn;W<Si$m5R%KYi%u\p*.BABTg[AW"ce(lb$%"UU#4,,$mfjN-V0[?t6T^O<oPCjPtg$6:Z="0iQ_Q)U/ji(o];.CE>gP
%nQi4>GaY7@0iTKMWra.%O9)_Sd<)jlO@M):RYL4-!(?*+d97"qX/uU/U@6ZW/pVCtB#l*Fd&J.=9kS?V@+9RW,n-37"HO`4#A=^S
%g&^hBM$+]\$AHbb()RcSEU4@>)5;s,@;OJ$`H2nq6J`=@L.FIY6`9tfb);MF3#D^&KLs#\)_3sXPJC%/B0lg6)MMm]J2el(8<5q+
%3MRHf1k(W()KcIdJ\s`4BH<'*!AH/fV/YT!,]QprD571A]W4H"Y,98_pQr9!(;`EQBM9H;foeaof>?T??9ld\ciMqI!W.DK1$(KA
%`p%*UU,.nQMq("mfH/FQ/Y&"G:ZT#@U]bKOIfBH\.!<sA3K/,_`%BEiL&Bn#n)(@3Vee21?7DC&k(1oL+j5iGq'rQ-WX!o`<+VM5
%MS,Nh*\?C;+I*P5G\edZOZ6e#Th8k0;8"G;.Uf-uL(sNrR?YpH+eWanr_YDr!ZOcY-k"K$JGU";c`)gC.>&1WaAa1@)3"Z;!O+qr
%MStI#DQjJSLT+m=]N*"fY`7=&'>eDS#$iNbVQ`?g-@=0$N6cJ@:^_l?]F81sJ?,J"A/H.95X5[2(m@bsBgC,Y325t6=Q1/.!KkXi
%iDYn48ITk]:d\LW7;Dd[FYefFkpJGp;!TQP,%UoioQ6mU/o0;!8!6.,#W*TThFXZBUn31`]S@j8O+Y<,9-kdAe:J)qZ>0L[M%CXp
%CdPW9%,>sL6Yn]T?;H5HEg1&(RRe/3VM_nuCZ&n>3B>Ym<H(b`MabUaL%g;,Mp'K!i;FXG9.s8Q/mthC,?h1lhufF?OZuer3B;M1
%R-u7qbZR\/bVtL#c%-1lbF7H/)@]KK%/@j@)$h0I:^kfrU]]\<KkV=;KA.W4?RF-MSp][1qB."3%!rip'p2u/010'gK8/DQLhN,_
%+rn"H`;+6hW#%H',Tdin.d.nJeIK+qT"CPNicZ*6mi`tm;H;^33<0@CTZ^t+.3hr6%oW\r\i:L2b>Ar\?tEC>P8QuS5YZp7SccRn
%1pjFK!]IWG&Ml-)0H`#J(H5FFA<B)qWC0ufn9i1LnF@`=KF2`;"P%J=!Ndbq0q[;PT+00kL(lgS+-#I)U-F_h/;k'SXGFppHL'?A
%LnoXN=[:t'[rI^a#]`=H]Kgl$["?bcQ1Y`[TA*,B.bar,og9po$)'pVB)2]42XD$Y"Q-ccX;\tR!.//(dLl8a]e%6VAs#F\7P-"D
%RB7XS"tfubQi,3e_%RS?M-kmWUY'.?n\,c]lXY!T^@/-$MKuG=/IfOK*[<_I7Km6W>dudVcT4gWSlBA8"9?%HNX8Wd(eP*F-igcT
%bbZ[$5SkB#Q42"eQklhk!ebhW)H3KVR7EIbfQW&a%a-d\r%Zk16P$`ROAo[*DXQh5EKj->hZ/b$HMYp=L.-o8Ud@&=b^-hD!/1WD
%/hhXA6oA!Q&6@9gG]eUj3&G25a@rjl&`oBC;oT/8U2%BBQif51#GNiaf-]%Kh>dj+G81DTHU0?Q.mmIm=77^`Tk1Yi>\$B]_;ORP
%o0`1dG."%Ngg)DBa+]B>N)91QGiT8Ybu-&!+:ZKI5+SEA4GK16M>#._k5?KDemkd&CrY'^.0H:mK<GmAc)d`aZSOD4;*+nY)$U5c
%l=rXrQM8X>Q&tCS,SQAqmWA,>5l,UsG4,DDqUFR1kAXlCQh(GZ/99]+?-NeRdM:1/WcnrMN4MZ,m2Z1QmhL43Yo6F9aPDkD<t:s9
%OEKcg;nVQoY6,p][_BmIX;<t,!t@39r(?ene`qcc=[3U"_7H*.W'H#p!ajl'AQ!:.X$tfV,Qk-7OL)#--Z@tZ;*_cD/>GB]L#MD9
%'PLt3((YC*3Q,brn%U=eK1P?dl,>*+G>4ll<"&hphhI%%TR4"8#TpeN'JVntp!O'NeNoqJh"Bi!RP]lNF-7Yf,P"a,ESAK_7uMCC
%Pdk@W2*N$tO[cK/@i!m66lElD'>FtG1p"Bk;5O\R#(p_ER+*AHK(]jRUIQoK+11.?A-Bo'7N03u!!l>S7Kk&\7jNl"*tKf_)2.;W
%V)Crh`SC%3*f`n\5Rs(W8q0/5Zp3GhdEW:lR0I$>4S^ieVkkLNQZ+XHIV3oES.NI\AH[;]6O"eHjon@PlN-Cuo<@h&-!VA+cnU1o
%o@>FUfm>iJlC:6",RIaOAe)-cBpL]2OF.2.kM<t5jUg#Q.H-gP5p[Up6M=[+BBDB>^;ptT'a]9,e&8(oOprW_'!_7(S7[.5@MUZ*
%Ae6&bg5RG%B:kl1'_Fu#FooEKIQ24H8qOFW0$G&<dX#X'TW7%XRpqX+du^]n)f]K)F<BD+DK5@@9694P?-s?:F8%1,hE0Ech!6G&
%7HP^!eW7eA>gUfl).90sSH)7a(`9%oLaN5+,XFOFOp4)2J-#9UQ9mJ0;JcILB.b.A<SUsr0_UA_+?0WV_JR8VYbG6u&`%tVnH3+g
%#T57gRN@(`"ulc?,8T<KR%(8j,gQV#Nl67U'G#4clhR!H7_Tkh0$13:7)bib%JE?o@5['H_TToGes"ntKKbY%=`/!bK+nj:FhgO0
%=_lgh^e9/2?Q,8Yi2aI7/;Tk6aG`_61Y+@:Qbu=&3he[?0tbaTLN"K"$]T8a]NC%67`1N)?8YD04lj'tcJ?G?r5CA_o/6rY3]uFd
%Dm_k&&M%H)qQs8.0**:t>l_]`MG-./a$8K.7^s<@f9Q,[hP8:+>CccH,e5*)JYs#j(g]db/5V_\G`A*@#dJoRfUrD62`[\(OWk&D
%XlZ<TrsU]A?.'UVJbeb.8]I<2!GMm=!Kb#F_Dp,lLXH\c)gL%f7V_Z!Vrd$@=EbZI_>J#O%(NpB/E"3"F;94J0`_Cm?IF[\pf&o#
%$4uW&!5cs4=b$RuYm#Y_gh4R.i"?r?"t)e_?BsVuj))E@7uXnl-@soKVKj\B[jR86"kb<?)o54@XWU@@&BYNV?F2t,#uogn!k!oq
%FeNUWnf#AE(,2.'<W*)#%fjU5AH7LX]QYMP'5M>Fmr:\K1QXRR=fi[0_AF@CmM_+B)3'/C/0fF!H8R()&1=1:CfD2OED9TD]5ZQZ
%PZ:(u="F-3B`m/ij(U5T'uEB1&S</*P2T%<7#H0)FiRd(9P;B["-/W!DnN9kH>_aVNLJ3UVhrsND*kq!JcQFuF3;;.b^jqEG5r:E
%b5r]0"($L/BV7LV:[4i$YHL]+ZEK_p6I.WC!c:eh,,G>MWor1VQsiP#+0H07;N6??`JDnH5%Bd+prH[.Ggd"O=@:CaQc+"H``G#6
%5l-oM'VZR=YukqSA,:8hV@rR"inu.thu_FlQa$XN3".,Wj=9;aK2P'q.m[Fm!%VYH6u4O_'Ide,kJ69J&r<<;X##a#3ekpY`KfBt
%EkQH/3[-t>6:/p:#XD+0mmRG#Hd>nN9#Uk0EsU/+#n<BmU.#'U?:T%.\>..soLcnI,%eM-c#+e.K]EHNmR<SD7L$nD,PjAcM.1&<
%5&h'fdQ1unK`9'3h?;F"0X+[UiWBO_TIG_(2I1pM&E5e4/qB'2$)2jj\BK?`<<Y'@;d5<BhE1$m9!\j13C=<:T`f1-g16W`-;=Xo
%LTk6f.V2I.?U3r<]HBjZo]`&n>7nA<-"<b0<_@rQN1cuJVr]!8Z2ts5-u6CU6B@Ad0u,sXU'IO`^1PrI;Fg4NqXd0YPDqfg72*1b
%fB3>-M"-GR.`!h5!Wk<:]1fm@[!Hptd1hPI\="T1&6C-gnEsaf\:P^jqo-pAVpSG^$o<]LOGld[MPYb+6!?Ba/=aVf*>q"P^,6HE
%B%:9o]^QBN`J\D8[:^V$nu<s?!9#[GKV[hi$np:K+`*/4f9@'dG=i$8@e6Elop5R)m[W.PrtYppe%BCjb.siq</-+,?ZXtHk;Zu6
%_j#bW9DqW8gZg%J(P;&=0qd1B)gcgbYrcdoiT1WB8aD=27Bo[1)L1-\C^GXsr+Nq\^B/>\:9l8PB&+4#]Sup:'0u0k3$bY;1'92,
%8N#bTHB=Y)Jjahu+>i-]U7m5X";N/OfYEf17JWd-<l<!O&@bNL]V5H>%1ZAM"/?*W&\:L]_5uZ"jt=?X-I)ltA6h#*Xg2&/ooN?I
%qE]KdE&<2,nV6I^U):(<MDZu;2dR(TR<BO[:dBfcRT(C!h%A_f9V"GU4+`.oJ?Ns@XHgUac$0W%Mb.>]V5"P4'-KsKk%E#&3K4eq
%Tbj$=5Luo8=QLCM&hnjdW)LZIC64sm+SO;X9oBWA!:0RFA/Q)^@uYB!GjD:2mgOerP&_$8(Ws^9%j??(9?5Cf@l-R.M5U!XGjaQB
%*#!YYkl&FGN7\?WqC1i_GDiFaAd7?PN\?4E7B;4U7\ilkOAR^UbT/!`=fkEDK$+WIm)!3K`9pN)9&!4gK,H:sJ6AqjJNSf57&nR&
%E3"Q]`L2hOBpL/#?i^.WT.+08:_6Rt_rO/\Q*[\"M?L0&,6JB`(uRdBPK`C0.iP(4,shO`Td-a2.*>Xd2ulJ2o&Tj>T)6&LR_bB#
%Me3S-S;=k08.#>-/hXZ>)?c#hd/StK-bXmU7%AJBMpQG]4R_7W=+Fh,b^f4-jOi:[6S/Vd*EZA!5*Z4J`A=t=K^nFY^@GgKDZM"`
%?DQ$W6Oh_CG3MD+#b]Q.+H-:J':6KSiY"&IQ:?M28J6ihWSW/CG\\JN3U*%E?$m[F#\6oJQ3(4BW=pME&teFm#J@2VJn:t-:89fi
%Ta<Pb"ch0TGH$&(.@niiObQ&R`k%ZLr"1_006YH=L2Y(?[6tlsK-E#B&<7<,)+@m^1s$<\?Sg[Ok5WA*_<AN.mVnsN9nonBlTHj$
%e&r'uDL$?mXXJ]j(Lu#L%QrX/_F+m0bF(nd"WFYrA;5fclW/RhSlIY#)E%+3+deEI1IE@=A@RdVp,ac/@4-1PQHC$U]Gt$rQ&2B"
%)e&Ab*b%:8kXS%5EC%APEdY\-G[2Q81mbDHXNnW4TLO4J`DLf</9=m3>p^![HuD[mC??$E&(1R8N?nVn_[`&Ck4hjX%Te5bg*S=^
%^`_/J6;o_6K7;:gK/*.@W->Ws0)[Q`jfh3-$o+?COhSR2nO&n*k+Q,+YCOiuV'/pC:qhJL[Wne*hg"Z<]$%&bn*ip)]d>qPbR#sh
%XG#YnP`psGQEF_:>@>I5;L)SYP/2b&h)-&rmL;n3j@"_sAFnTdJB=%-\+#n5^7++r(o9k0mr$2HTd/c=_@#ll%P2N&[jrT\,ju+u
%^.UK2#8F[Mk'Y6(&r0Mi(mn@t3AV[1gGpe%,_LbO[m`!ZOi9Wi`]Zt'Al41_@6k4M5)dt,4+KXfljA9f_j#4EPjLZe+\l:V3fodR
%n!04nFV2ak3^[##^7Of3WSRDhOG7cN)R!10-q+P/`mG2+S=`lg,oVui.n3ECD]A!L0l/%UmhJ-1;T_(toVsItbGK`j`*)8B!urtQ
%:'u%_@.&cI]N"(r^X/'<dqG\`&OCoZ=T]^FLd.=-a:0Y=[mJ!0l=U[$(2nN@DX^1!2/[058>>k3;>DPlQcT><,.@o4\;C^dROL_D
%*8:]NQQYdKCVE+AR-8*3*!<D9JJlApL0u8U`f]kTfcXK=8kls`#Vh3A<+^QSHL6U9<!,tV1r"eL2rk.T0\aG=`\chjVS"H>jAj"F
%&-9n7dW;T[dgJ8Nhq^h>22W`s]r<:`@eh#2/:bAE0[X@BpC(+U;k9he;13fBC-Xgf.bZ9<4psVD:t6s4A-?;18mRXR38^t7^rOR<
%)W#`GT;?#!cS-*jYKW4okhO2B6&<XX6r%r8T^U)\RXF:4O;$1tZpo[Ank4UTVD\C/6(<1;@B'mP/ed!TqkIiOMPKN/:uA1cO(K45
%_1\7E+2L$GJcpB1R]DeXonn&\@Wrt8D:jA@7SUZtj.aikA@h*fj4&;JiAjsfF`sB+)W5CWD-_,n,NFr+.30W-!+G-o%8sjR0l\pD
%0F7nSSCOB>!apPjQ`tuY>Ke4"\4#PbjWtEIic%k8LFO+8ja_5K>V.c7$/O_$ZTu!00)?pF[t8T1M2rA2,COK=lI$P!Z36aW:O^2L
%OXSX$W:nG^,M[F^!1L^*TGshA:%/o!?9q_GA4`OBTW`YV42d[U]^u4j.6`s*oG.]nX<!VTaoWP[K=@3)Fl5T`J_nViA/8>3Hr+cu
%)OG>2)1eu),]SMd!Fgme1ob?nGG0/j!+NgHb8Ooe=o^?oT#1j1!([a5[(%MGLU[H6jY9Z\J@;BmlF8of!O99c'!=JueC.B6^?#Wt
%F"b_e7M]AK&`@OW1O;l"0?GjrN2\2a`?H5p(M`G0#nlKL3*\TO`!cG:ilP;0J-StbID2/uAhU%QoGZ+n@JJD0\DZ;C`u:/go6r^$
%+()!=Jrr>SS7*gF#3;cDKjol8#XbEl)QK;gObOU5n#$%,"3matYLK,H@KW7L]L/n+lP1s&%@)3lBrl\Qms@g"1^Qg_15^aYd]PZ=
%P>%[D0leIL!3b70Ui*O@_Wt(IXI]M`#_u8E\@rmg"PuO]0BWLD+PfcriBXBZnL@>lbsut!)'a+YJEbGaPX4*9BF\lV/6fj,h1Fm,
%Sm/5=,BfD:Vtr;1jY=9/Ua4oPcC]>N&F-j-mSik/-j9JkC<[&UR^Sgh8Rf5f]IK4+d&PP'8kt[+lLQJSR\uO]K?r';H*7Ij$47'k
%@>7?60[O$Ko7hWrD2Q&$DX]09#eG)Y7,O!XBOX_NEXq)BO64Mq5e]%i7%nCRmsR'>osil:i%,\9YO@srW0">,A<A039>gui,tOse
%Mi;6sd(NbFU'!t_[Sl<CZ!f>mS.o?th_,a.ctqJ-^7=&o^EH!P-paJO-SOr$"3Er%-;!'V`\sYIi$5YYC-3,]?j#7*l7TD1GVT>)
%SF)8T^PL6ti)9`PH@-NB-/o;boqj`U-cbt@V!^:T83IN[W)hg15uSOO]$LiTXM3g(P!SBm+2.TKKSH\(6nB&>a"VMl"rRV8iAd`s
%\m,5pQajDA:NMm74fsiNJ\Gom!'#8%X!-%$92o;Qcd8m(pL55j3^9jPn)hgE6=8rW8d2C-<*-h@F3*,BGdF/-09Z&VnEn,r8>u5q
%Qq)H#,k"*n2cd,Ckir>EPbJ_08P=KsWT`I(,+:cN@G^'>0.?/%F@k0.GDV\`9B_Ts/nGOX!3)61k<deV)9F+d3"[aI=\bpPMd6<j
%bg5Q&,h,mJ;CU)h:g,3AJkF(B_pqt+Zf1GW"/E&9i!a9[7[QWG>(GJcl2Y]F)!.'MnMPj?kUS.pbi^bAe.UNdbP14[`!rMeX!%JU
%RM"ck]](II+<huQYO#2TZP9\_]Y_hTl]_gG"D(G)J*uUhJ@nMU_70oRbAWV9oEKA1_!%nr$L$bDJ"f&i$=PB2C7DNk7cWLam1I<S
%^e&^/NuJV:2OliB3u83&eUTJZA!4,tVh/E"*S1IRC60!<&)O<uo;EhJaD]4T(_poC$d6\C+MT<^K=Q2-Y]#1Q,$N^=MR/GZ&I[PL
%-<gjTE\.lk*XH#f#Up+`42stW+[lmV>#qcg73TT9KPX,]\Y[t)jpPn0X2#T,)O"^r/!g/6YI8N*[2_30kZiZ;TdDp%K?R$'L3>ie
%$oD?&4?"21%EX,H)(i[Zs5%Cj*D)i,jf)m8UIZF]RES1>IV@EZo<AO'T>.j7E]u6j<bU1@<mmZea@91(d7I0nTg*>Z>J?ed@OA*S
%0h]OC@OK)*Gl=nUSV0K!?YaY:G`c.i;L4\C"S%=;;0b/WV*^eA<E.(AefV+BNr%nA4[)9'kcd7+UkWf\2VF<sm-<LBr;[L5gmOq(
%]\FFH!W8_N][aL#D:jY^9B_!S%MGCNp28>jRpDLAeuo\.H'QuKW_u_Dp\"KD<VaIRS*2rI?hKG,NJRg\R)(E,-7H)!pnj8TFouqf
%rda69Hp$)W_ia2k+<W+.)QB]kUhB'8)51MaiZ6fP](T$DIEMQO6]%2b<U9Vm&:jX-&!/$+<pj7!)'YA`GspK,mt`?O.apV;+b?jf
%p0Id<:7p9_g"TH]U[DS'@Jt:XW`R6RK\&ki;jn$<jf1E0,quBA?-@Mj4lWn:hIA,d[l`T+E..!Vl`_<%j-RkonNAWnp2@c'7!e=<
%O!!`M[JA%_oUa5.2M49'Lccpl5LQES)<sg56/ucET*QgQEbp+5_fsC#Yfo'BH433k4.D_YYSK8\_4jUo^EDXcV0(5Q+oUmGfUd6H
%'1ARGGL>Q_6"5Q4]'DK,K5-p^0a'jXR5fY55sm7$1]7TJM<$A5KR<:("9\?AH%9cNO^PVpm28\:YL))>6N,j.Wa5A>1KM"B9h^Bt
%$Xk@I3'Q>#Eg9`a+,4LWVWparLV`hkh(*<-=I4!.G,)(KmXa)mXRk6i_1DXmF*[:DcuBHVpapYY?%ki-J_Lc"C-R,E,LRfO8_"jB
%[oa=.?^(AUeeP,/FVd>i5#JM_QJm,%rG@3iatkt>0Xm1"YSA!HTl%lsX/63h:W!G.(J[*Pi;2e09@h(+Uq3N?Ytp,YQ8uX!5=MAi
%eqm2le.`k*Y;MYe8aeTWaY4T`>^akREb>^HAh:GliP`;BK#B"a-A&Xbq\M%ADHeCPNPmbkO,DPe80?I^N"nH!):nK?[117-f87Wb
%&=J^Q4WpAAk3?Pkf=f>k-lor:!#M'FJcNkIC@N'7Z3B1fEMdKq:_M16Zhj6tAHhaqJR*!Tf#,kd@CnU3m!C%@>Erm?%3JG;moYqf
%?%%`DeVM.sDP--eFqlE,j2)]L0ga;!;=t$+i9F)<B;3t<S.1U*oU)MW5mjEB\IfL1]PG?f4emh]P])\(91Zf$91b"6"ZV<#pMOc_
%^i5ZW^$lW`LOk7<ae%<(28.Lm#VR&_cJSa#%K&mig>7j!omG87mLD%Bmr:P(.q+laCGapZAFt"JiI[0r=mQj%lRVeAnf)VX$PNLQ
%-Puo<kHt^ZY!@,dA2lVbL#@f'LtT/YJ`(Ma_00?Y<0$AuU6!YY:TP[;[Y%Q4!"*#0ilm-gYN:V\Jo_9jR)acZPRiurra+f9],mF,
%UndFBpe!/=8Th.$eSEY]R>>Qkh1AL(I>dI@\G@d(^1[K:G,8'/Pii;K!ss,(V5kfOS$jrb9@Iupb:"c;@Ku+u^4nJVql!O2;Btu(
%b]iK=qZE%FY.2NscGX*lY+rrNYHKh"<b.8*GF_jP,GIY6b.QKb<ioV*mO#&m1A5"j*5IQ\a`gJJfYI4RH,:Gd';b)8+*G'CIAQDh
%@:f?PAV(dGlmh(:H784j<FuL`3RcY[QLG;J*%^?--e?.b@@;+PnZpGqW^9Q(GtLYjF-+"hQaLp<SX7YV&Gg.a6$Z'#")GdHdq=k%
%>$4-E!R/DGa=]TjLF.Fj3g%>d#n6c0qpt.NiBYAVAB[H_EbA>&a[Bj`7"`HU'`9?-39d/+MUZsU5Y*[+5$/"CSPcn[R0Z?;.f9tD
%iEs:DH=CYhZ=%4rUh`Qn!61+l['1P]-nH:Faa1MojbDE1bPkEun$TkL8(`p,(/89iZ,\!1F::'O<-ljV5rJ+FPL9`HV9QH)D\98q
%.admEiNY14WFUYaIg7s6l@/1,-+/q)p%9d'\sZT3h(`25='kolmHpe?kQnu$72o7LeN.Pb(RLZKTlS(6]/7LW,u$@q';EQ0YS`*c
%7Y$>@Q0'17[m'n;e/8u]1DfPuo2VbRc))O0g8:ip)+p*kPYO6]S`l%2D/?lLctee6d`@bhFIG/;83&7?(Nr84RFuoKrg8WkX,0/T
%[n',,1bLn%'K$<D*<](:p`+Y5.eE>U/_S"7fn9N-(5aHSN`)q_7?#]D$W)G=Y+jXe:0_;fR$B+j*i-\D.BcA@.:97*,HJn1X's#p
%6md*MVa.@%cpFl,S7`7o8j6fo.TadplJ0@Xa)KlEab43@"^J>`P*c=THkfW,.S\Sd&gmP`j:.%8^136+%c-0R-j$CmZe'6\%$Op$
%0h)Pq[('*UKj2gHYOt*dGUO^u`ncR=/k%k,Xog,e`&AMa*5"YZStfiZ0:da9'?GrlVEAa5qB)-^\Ob$orHX(B\.ACY=Yn?lh>EIh
%_M[;@;h*OiW!0gl;0Pg/hd4T(%/_L2`Q@I,+taBc8D^27Sk6Y0?.n3]8=pX=bXDNH_>_QFE]aAO8U0?$N/gom\ht6\9>"ZSWhjk.
%5U4bUC>HjfKmg%X\X7tEHD.RbPnEX,:V^$mP+A!qFl9[.*U,K>2.]sY,`=d0.[s)R,bQkn@4Duo-QiCXQjWD4lp-kI>h./I?#3FB
%.0u.Onp3F8;pTN>GQR<b".GabKA9?$EaM7$i7ApZIu8>6Q/_90Tr\c9oY0A'%/Q=fWTrqGXO\b3Lb34\IFfa]R)/sHk`;+IPjfj\
%AZ+;"_,$JJHi@V]Y[4.X0Ol@$Y["#!cr*YjU2T5Xk%""<W70SBCXIk(\+&4SRVSZ]r$V5AH``;Fnh%o-+Ci-^,U,b>#1A^pZ[7q=
%-+PR0BL82T9`D3\jd0FBnJ3!FC42=A6*!u?i]gi"k`\ZNmZIdhVTdfuKpNq%apVWB0%65\?ERC-1i_JDS9gblQ.Uau]H,O\pr'%(
%B"XQ;i?[`ipGJgKHRhE`D@6jelLXRdGA#,8=r%W)feTWq`3F$6SD'=daR4aM\gaSn12o_J2!]p8LWr0A;8SQi,0*U3i]DD%'tBtG
%Z1u>7/72Ng,\IG0i][t*Rp<?G]oj/5'@5mt._A*7l]-?\Ol/"2oc/.0?-T34bpB'8)@o6G\N]013JqS>=2d4nG)gko^B_4%!:_Yn
%,QH.*?.&,KPuB>OmCfr]QC@),<KWbSaD:#XZqB5HQXVhSPXN;F\+>omd6C1^m>]DMBMT')90SMMNV7Ebi"ate,ZrijpGOlE=B[XT
%.t1o*pP#^';PH<!*D["k)@_-13%pqW&fCl.>>nLTJR;50$@_81YtaVc">/":f)FIHoSN4EF6dnI?qZW=9.dlKJIbn3q'omkXdqf<
%0'H.5QA%Ea)Vito7^^&Y1_K8EP((_DiN^ZJ>?4u:G(W32@A,kXRU8^>1=YJ9J2&P@Y>CFBZUo'Y+D/2fM;$Ysn[q"FR('tj+"-rR
%L!$=7=e!2#fG,j#4^2IMcRqJ-M*=9Ka`2dSGEKgDhdddTT>9c+L\RTB>),>*NS>H,d+5kXJA%M!*qQC"0(7nYS2]Qg$');S-F+_2
%cI_igE2U;co$MAfT"Pb?.%MUhaL*iDR.rIBOk1Y^Jss\CMB"LEd(to:-3TuL#DZ\;dIOBp0$+%"5cn^<_Qk>qq>.*lQg\Wf#goEG
%m9.=L#gfJI#`DEdhM"??P$.umG\g$KTNf?F#rWgI]:"QgV6e\>e".-$DDQfkO#[U*E'Ht"M`,cGg5EJ5SbJ8cXJ=3JAD@e*Do&Jp
%a+4$>lnT1]mW1SooM<VKM']C61"WF=K[O2$*bZk<("?DhbFeHf<!Nt]p3'OG=KVraWrYNB8Z9kn=K>\RPe[[AGXUspfkeZMof]U[
%m$So@J".S9TV#F&Asn&WTJ2>rlVXZH;%`rSgT'J^DV.f%Uon$pQfRb<gWAB#,$W'@3jF9Q)9(@$ZbTM.p[7WYB^ZJ4gds2"R%ors
%4HO.AHa31uR]+e0DL>Yf`1105'I:n;XHOfGQ+4?@Vj1fi7+U\K*V0ab]X\5kj-=k9a789e\[=r"XB&GSd8C?"dh+m<Srm4DA@]kK
%o`T"6;MO?uLa63EL/qt-VEDN(pq<XTmpiba:an'-Wo]MNTg,aJ4`U]Q<[0q_["<"E2M^t;V&DL*h4OE=Lqo/h5`?iKjb!$Q`M8Q=
%`'Nd>^_rM\V9SKL24NmAd^Ln!8cG/t5'q7>InGuj@;(BhK4Di=[\0_5bL'&Xii!l?f8^Y9cfIfTZ,TO3?#F*?1U&7QcO"fSrL,21
%\cTeg.ol1R,kSjJjLH)bfk[GT\QO0c1*G`^bs5i:*U)sEaMbIT'(#\[Ap<<"'n.St$j>a\$'%mjTb%@R9E+qSDh1&f[95(:Fp9jC
%op'feG%%pO3Te$2^fXHOIN%qfDrbX3DdLh=F!HhZb#aXl[_IH-)!XLk8AO?p"k.VD(0tS%7TFXd?aeg#.YspXAjZ<@]`Lqel[22d
%$Mphqa)fm6hRkBg2PJ3ebgOm87Jc(\TZGLs]l._TksYf+-pu0G!Q-%\KF#D=\$o6c-M#l"L1mIU>;m:#=.3H7,+UT`GReL4hg57]
%GRKUU.p&@P?nXA\mV=7iDAdSKaX*`-el(XE@'\<tK7OhBkUPSib@Kof3;7>8<C7'=mQ'Wk4^uK[!&51u5!tLfAgsOr-'8"MD,aH[
%'FGIume(g_Zm0%SF^bOK0W78hVuY&5r&>ACpSa::?Bd[&^t!0Q0NC&iH*pP('FW9NUKf14YUUeKX]EEk>!C$$l-*>.9Qqp)Wp1&2
%?l%.TE/c-WQ$>0ff:p,dDNZ24cF]l>XnO[b;.k$?fC<ZMegV>D"\gFooP7[]2m'J:a'D"ZQMX@502"#2AqUKh=DiN/;GJP'KbCWJ
%LlMklWeEi)g2"kk<bJsT#=HIcjumS8>UBD!;G<:.UGU[!]VRbr70Om.+m6tAUFMg/'8idBhW<1/m2X'*ct:RBYbL@,F?h1;qYMN/
%`'UL&530cj.QMC]4pAk7eO_R*ZdBp-<TP`bGMa1:VQ"2![7Z5t"!fLXglD%=Z)s+rgrHL"2Vg7W23pYqf20:q5=-e.T]LI$T*"2C
%:GlWdG0g.G`?LkYY,Wl8j`O&Skp*%Igs6]=WikO$&SeeaDIq.a.RVT\dKSQN2*Q,lTGl^&aU@#'!*CU<+PnPK)YPD3J0<>^PSm'B
%j5'+`)^:mW>TU'M"Y4rG(2d40[>3D_=_tQ14E5Et>rN2,TQ.<23Y_gX[p;`2iBbdlR%WgTMMO$=Zn&`-<A6H,CK_UXAIR"Lq/dnH
%2.>Bn,9H*@<j>s56`8e6at<K&)O*r,_WuN7TDOV43,u[__g.&\,+EY=?h9C(Ed3-k1AcqKMW_3MP86$r.r,Y%p]STIE<H0:f\u:i
%o'Ibq'L"Slkef7Bf53_=N3TOrHUVkj05sskhC\t(RYV-88OHUSnS$1&JHURsP+GW-_0eD.G"0-McDt>EU_>c3V*[k."@ei'SU/M$
%G2;/W&FCNNF"tNa:AGfp;@0u\eM7`_^(2GgP3I-a@l(cor^Ig8lC3gO1':*^0lt&\@48F@j3.0ISZI>Gol-V/QnG_i`4gWbV+*7n
%6clSjU+agH@oM\YKDS]PaB,Je&2qE<BqQlLpk[M%)E6Q9&P[CCI"I-"\6MUo[!mqoNVU!;&LjqIA+8-F<>&(X.UjY2lu9c!aH\lK
%2^9*[Nh@hm_o>aJ`qQ<!c.29t2cN:3hem3\'?X(Y!S?Q`16UAc`&h)l_p>/K.7E&X3""9tH1SIXF]&UnXZpadgD<sF2RXI%3qD9U
%YA?bo%;'d,*Hft-8L3XRXkSTm12"NE\`,F;*+hFfJgW7Y_ZMGUXfVG1T2-M>CR/CF;b*IK:)#cmljiSiA-?"he\5Ja@Lni3@J)>:
%9%tU4I`MVi(9:QC5]_Q>=L4KrE"[EOc4D^"k+JRKp(ec:T@Lpp>\foJ5fb'.\\i$PiYJ8sc-!"3l,B4YA^`4'UBo5)P*;uhCEN$a
%?DgD77B1',P<F[E(V*M)_t;iZJ0rNrCh5o^"p,.meX=jJe"fnf4hdM=d68-TbhLc_\$'2#0dKguou@O/HC_e$ARs-ag.'SOp<kj9
%)@ZB4?H'e.WTZJ&<EZd<fJ#f]?giWURE@VN=?cRT:fD?$!@Z<f+Xc,*7=Gq#Wab(k&Vtrd0s^0ac$U1?WMmub*/sYk=1pn;)/d^a
%6mJ;UWolR$Ps$B)`NA#AgQ.%bH])2*Y3`U!=)N9-1ETgs1>8/Qo-T3S-A&EkK=[jZcl95/5CF-n1K'iRnosh:Nd,1F%c$5%-luSA
%BWa4XNNFb;9TO5k%'dWG]O$?cd'q'u'RgEB8TtdriTDus!\PNC<CfcFbU%G2!N3WWRA3aJ>Xncr6Wk>Uq5!LQMOe.^RXsgfjVV4\
%4NVN0%i\W*[j)$`Zc8E8e/I&:,S07V[l-B'H:H&9.?I$-Ep%%"<BnaYl@/S,3#QGE]&]?JFBbT84\_)GMPr\5[k!*;b`JF3#l:;[
%Ur6Gala]W-_b_1V%G3fe:[_kI5nHp`8I`HT6$[>#+tR-i=]]0ki,`kjbMJ'7((JE=7LMr3j%/6o3!+b].tpdJnlMjC;E<r_2cF(l
%Mqr=irJ>o4+X+Pf3GbbP*LBsG$@dpQ-/@u=k^+Tg*u^(TBh[A'4bS1>QnuJ=@u-2a`:=QZd4&OpkQY4YCUY5FEA-3APG-Oe75ACS
%>MgW#4nL>I4p?A2ED7mG[76u!j-+8kbXID4asD[[jHGT',=F33V0)7/&#H.7(VlanIXJB.Z$ma@nX3A,pZn.lN'7iJ&mL>fE*q-G
%5[o;%hEZ4)"M&.,FD1\dAC[gN,O5LH+/HD"2?ZG5W#d%HTi<IJ[>m*jF`eD?>Lib.YSD0mU*?S"K,,P/$eSp9O_K1N?0.th_Ug8R
%MH<'SOHhuHR^;=(bF-MP$g(de;gNhT;l=hBV4'\C][fSD[I((t2.-eToe$Pdl-*mU>pk%l\Tu5o^^oi5RU7B&11QdF?#(UL[oP<P
%3XVMG"M*@T4"2P(H+mP.$N-(cM_iM!m9cFiS.SML/8]t&3Ga[#cuUX<)cB;bIhA6j@uRl9@h#Pa"f:mb9P.g`(t*?=&InBq;G*/\
%Un,91BOd?8]Pf@L_3"oHc/3I&]9cVQ(Y(\`<R;>&X]J\4/u%W2Ft,'<8Bn,[\K!>TnbZ%fD;'i=;/E^>Uk3Eun`2N"A9J[[8?$^W
%>GL^2La./G.o&e9:7+C.fNJ;9f%Y>/Vef"@5RPh?*>C`QCZQ8q9cs%h=^Bmeka/]ZW1l\%[KnDGq@mYQ^ti468IA1*JBU^j9$a7^
%RnA\_5F0s,o$8NK7oAZeS#sWPdlVaX#r,fQ]n^@V+`")s'uQJLV]QGm)lU_iK9h+c11m,f`<.YkdN2qn?irUl0%",]=S[o'j@`jG
%pRoa/UJ<pa_6"nhc)YsZ*d$Mk<!Rq.!job(`E1^)F`f1JEo(+d%V'8=_Rr3%ObW(GV.b@(e\7t]3T[9>kf]!"oGeW5`TUG\]g]pm
%PPc1Y-<t;HEZOA&4e:]U3`6)N0os7L?#cjC@;F-OjB!fW?DV6SBllDHk.h^.O?+#e`3Y0rjjV+PV#ia"i\b;BbFN-l=q"L:fng.5
%0sOAMBU/%&PQ<8aj&E7NTI!WDF6(qamta5bF_/;Y;2Bn+J;%$HAIVr:!^M,imU/p<qo@mcP5?K8*-*]0S.^fT)-NmiEc@/r\0JdD
%*jMdR?H&LG1;-UM6Bo#=UDB9GY8N__#kRdd)81?Wkf((JO%%O6/nqkg:ILJ2V4\,jO=c!?fMbBB9sVl,rB)jdLrk7s/KSHkdprs8
%$aY$YZ7MN+&hi6%Y(!#t&ruW:;Ib0C#L?gk#W2[hepp[6[C!YT;UUL?e)NciAk??]\?FU-4b<R?7t1nu(Y_T.?8DqA*_:H7>chd5
%mVLW@oPIm$G:uC!O<3_REnClRTC3oq`d1clgr8Efiq$X)huqHm%%>&mPtN%=>*PSjs.uAKj!\c^qZb$Mo]-i">`FEL8p1A60KV,[
%jA&,b4ba!;&ZG=95h6^:oc<S@ndg+0CcHO9F<]r>%e-aRi-E@H%=r#R`ZSDaa+^eCXD1ppo^'.Qh0H*Dr7LXf7K?Xo(Q.<Tj`hbY
%jdR%jm>d0Xc?!:Y_QGATIb/9aJ[Li8,kEV?qFY.4Q^Rf.`!o^'<N%Sn^rf\\7aPX<3Yo!kV+\CKJGYpC$kRq?/u;d8W@udY@Z&bE
%(*MSX,#to5,@G\+7^!([etSH=ep_.$]4R,R03`m=7c,C/\S"VhqN;_iC*G4uG;cDl1ghnI4it0<nb!l2oXN%d)h#".eB.GFW!3"?
%k(aZZaVb6`7Ze?X61"EU7qojMZN],cKWE12=<AJnn7%FE8t$cD)1:o#MY!mIW;cnZ?Y/F?]SJ>F1QSLH>(@KONn#^>4b#+nCO8gq
%0F^--Bi>S.\:5Pu:d/L8Fa(*T/&PB91IL5JC1'0!9;<B'/=!'+qj:"g"]iOcK^89&BX^YU/KAP_*rR?Bp-G:%)`L&@"'2tpk2-_-
%LWeIm/&HCr@I[9i%@;l^,miDdO]1$bQ+4[m=/;(XVcbV&<M2*U.<4/KX[uXh/I[,LVZB7dak+Jc;R10lZOAE(J]ANnH31Z!;CL;s
%h'pjqlK,K@5\H_'"qEt7osD#1JP*D_<I[5H<S='76N0,%Gu@G>,j"BT![_O*jApJOkgH1@b?I1IPH"(OV$XPG+15S99pdo1JP)U1
%17j-$TR`h!G4SB&bbuSSQ+a2t'-L?HR[-YZ5b("+%eqInA!Sh^PKfC%?FCaa8g^3N1@Vub)K73@q\IQiIen/5d>BQp=tg)\=QNMJ
%9MtO?Y$4#@i+,I&/2P=IH7c.'f2/_(k,'DG;8O38s)kXXh4:G6WKYZ?F&n00;^C#eKg^g7ia91>c%2lq63bA3^Nq1nT]YPu_),$K
%@$SRqa`K\$<=<^G/7q1A`h'd@:>1f=]bcJ:V#r\/hp!Mjs0i=)\kU3L.P^9<@ARf%V0rRtjZ"ArE?N\_%+qOL"FVZP*U>fM)$A)'
%Z6te-ZG&A/nbj5KGhR)P(:;0;V:K>14?p@25dojiqA!,JF74K&;$<MP3$Y"S4boZI*-?e"M3-s;-,QoL@Tb*sn"]<.4b6TqW(,S<
%?.MZAhaW39_*WKo,qKFqVV7o,r-O?>J=Xl@UDeSL0DFkqI/=EFZ?6\;[cWkA7D7H=;lUsWW%o&ifVZ^QP4C_tl,"A!O%RtU\9@FY
%/uE`.N"tVaWsDTi4nFFe)4nkuHB/5b=a#L.=_ue?8k,Le;X,41)[Z>b,r/"9/oB<6T)5G,)GSjFZ%C.M.#uFm@seS!R<qK>+^8&j
%_AJ#0@Qhj:SHmTDQ_i>T`6)'rkrVeV2bN6,@5]:)<04H/D-=Chq*cT.X8?XKWW_Zd2CY)DQrmD)n;^1<juTc!\*j2U<I<DMEJJOF
%M1Y.0Zf33mBe&puQ=P+k76a$sdjT>9*Us`&/@aOH,K83Ni]<,XXVJ#REQ24Y`)uq-O*BI4fX$Od2cc`J?0%rCG<pe-)f(JVQUVR1
%Xn+AFb,9=Q-W9,q%Jb+u:eL)9r,@%D9MN,H7^_:!+I8(Z,hm"sntpKl\l5fS0!Qq$H\=e&Rl9((VJnNTPbZZcHt;SLf!W15<`h@8
%[4X<ddC(>"b'/hr@Ot/Mr;n1rmp/(caa6#L=!0AS3ic^_E`bea?r4/u#tU^cX78QVSMn;4J[=2%ler&$[*b5>aCM6N%qR4HEpqU>
%o+@oi6U\)Y3gOse9r!PNXimitJ\i]WJ6A+/Rd+W'@=$HiBKU&oHdf@sUZS\"Ms.(==L<GOo#Bs4WL6HU4G7%,XG_3AEr#h"6'n8n
%F5C4drHaN@q2jpT3uBo4X\t*A_d;Ir7mElGGtB/s9/_S/gT'ekR`aN&G+t7O"'Gj-+l9anI+;6p?S-g#:nika90dtb_g^]Z7Tj=7
%Hu7'tBM/"4M=(D&4V26o,Y[$VlD<gn(?n#aQX>F]>'n\VCs23[o/V'gS65`;R5RIHW!qFDiU1K!<NMEp)Tu#sF^OHCYH8u[idKHp
%%]:m@*?Q%/?mF+t3W;):H_cEN2,BaYCYs28fWlW(Y.9MDdUSo0$8SiO$;mL-;;@_eNr\J401ns%:Du+@9I6G(@9R1+Yp^MS.tgls
%fasM<C`^tDPR<g1[3?fuj``MdMc$5V!HaQejaP-rbr/eQO5el?M`(dB,8`+uZWD6e^V)cFZc.3SfRC&P_[Fj^[N&?sU@mjbp9e_r
%M<qH:k0hd7!(_Y7H^9rL*FWF3X$rXgT>H]'^<NEHUj/-r%oS*cM*(-h'Z9cX=gATs_p,O9q0#'rnc'_eb>K=d8<jn?>'0GkEjS/O
%@P$E<oTeJ;5_5L)d.'X::s2AHC;rf#MWrfB@7[/:2f#mJ06J4[3LE4]R&#%;E;QE),XT;^$(!O0l]b+XcdP#q37^gd#s0^t974@&
%L4st_Z3Y"iWSk&j`Z@l<>P$[qU,'4GFng8RVRk=:gK;g2I''`CmMR55_N8]l'@$TVh*!"E*EnYAgn`,^ZHscABgWMUjO7gr()^e*
%WirD]/5\luVJN3XFksNUs(t\u[UH@FZ#p[+KtiKj>dMKtlVU4jTT[lbAW%OZ=>"@-QG&L["U<;o<$EXmlmb>eRacj9mffaS-E2'N
%"iRlU.Ga[L$:Gu<KNJ3%5\m!C]u3(d=#(lab#GsG<(un+-bJClqO3cB0s`,%BsKUR/ir^eXt_\A:$,/Wl?K%^E2iDIg"*3neK,ZO
%9c>q\[Fs<*7s<1U3N(0gY]<cgqp!UN&V'ZShu;bn^\c(=?[r+=J,AKns7td.hu2sXpu.iprkgDho'=X%rZAoQqV0p*iNGKGf.UK[
%rpuc^o!b7kp<.s"rp.`LIf8B3J,@Em^O5kC+91oh6oaEpiJ/M(s%i[agY_o^($0e$~>
%AI9_PrivateDataEnd
