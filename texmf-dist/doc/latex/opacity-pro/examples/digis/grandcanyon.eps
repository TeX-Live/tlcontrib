%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: grandcanyon.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Donald Story
%%CreationDate: 12/14/2007, 5:46:14 PM
%%BoundingBox: 0 0 150 113
%%HiResBoundingBox: 0 0 149.6654 112.4498
%%CropBox: 0 0 149.6654 112.4498
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf    
/xddf
{3 -1 roll put}bdf  
/xpt
{exch put}bdf
/ndf
{
    exch dup where{
        pop pop pop
    }{
        xdf
    }ifelse
}def
/cdndf
{
    exch dup currentdict exch known{
        pop pop
    }{
        exch def
    }ifelse
}def
/gx
{get exec}bdf
/ps_level
    /languagelevel where{
        pop systemdict/languagelevel gx
    }{
        1
    }ifelse
def
/level2 
    ps_level 2 ge
def
/level3 
    ps_level 3 ge
def
/ps_version
    {version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
    /packedarray where{pop packedarray
    }{
        array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
    dup type/stringtype eq{
        dup/Red eq{
            pop(_Red_)
        }{
            dup/Green eq{
                pop(_Green_)
            }{
                dup/Blue eq{
                    pop(_Blue_)
                }{
                    dup()cvn eq{
                        pop(Process)
                    }if
                }ifelse
            }ifelse
        }ifelse
    }if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
    AGMUTIL_GSTATE begin
    /AGMUTIL_GSTATE_clr_spc currentcolorspace def
    /AGMUTIL_GSTATE_clr_indx 0 def
    /AGMUTIL_GSTATE_clr_comps 12 array def
    mark currentcolor counttomark
        {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
        /AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
    /AGMUTIL_GSTATE_fnt rootfont def
    /AGMUTIL_GSTATE_lw currentlinewidth def
    /AGMUTIL_GSTATE_lc currentlinecap def
    /AGMUTIL_GSTATE_lj currentlinejoin def
    /AGMUTIL_GSTATE_ml currentmiterlimit def
    currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
    /AGMUTIL_GSTATE_sa currentstrokeadjust def
    /AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
    /AGMUTIL_GSTATE_op currentoverprint def
    /AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
    /AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
    currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
        cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
    /AGMUTIL_GSTATE_ht currenthalftone def
    /AGMUTIL_GSTATE_flt currentflat def
    end
}def
/set_gstate
{
    AGMUTIL_GSTATE begin
    AGMUTIL_GSTATE_clr_spc setcolorspace
    AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
    /AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
    AGMUTIL_GSTATE_fnt setfont
    AGMUTIL_GSTATE_lw setlinewidth
    AGMUTIL_GSTATE_lc setlinecap
    AGMUTIL_GSTATE_lj setlinejoin
    AGMUTIL_GSTATE_ml setmiterlimit
    AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
    AGMUTIL_GSTATE_sa setstrokeadjust
    AGMUTIL_GSTATE_clr_rnd setcolorrendering
    AGMUTIL_GSTATE_op setoverprint
    AGMUTIL_GSTATE_bg cvx setblackgeneration
    AGMUTIL_GSTATE_ucr cvx setundercolorremoval
    AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
        AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
    AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
        {
        currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
            {
             mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
            }if
        }{
        AGMUTIL_GSTATE_ht sethalftone
        }ifelse
    AGMUTIL_GSTATE_flt setflat
    end
}def
/get_gstate_and_matrix
{
    AGMUTIL_GSTATE begin
    /AGMUTIL_GSTATE_ctm matrix currentmatrix def
    end
    get_gstate
}def
/set_gstate_and_matrix
{
    set_gstate
    AGMUTIL_GSTATE begin
    AGMUTIL_GSTATE_ctm setmatrix
    end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
    //Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
    level3
        {sethalftone currenthalftone}
        {
            dup/HalftoneType get 3 eq
            {
                sethalftone currenthalftone
            }{
                begin
                Width Height mul{
                    Thresholds read{pop}if
                }repeat
                end
                currenthalftone
            }ifelse
        }ifelse
}def 
/rdcmntline
{
    currentfile AGMUTIL_str256 readline pop
    (%)anchorsearch{pop}if
}bdf
/filter_cmyk
{   
    dup type/filetype ne{
        exch()/SubFileDecode filter
    }{
        exch pop
    }
    ifelse
    [
    exch
    {
        AGMUTIL_src256 readstring pop
        dup length/AGMUTIL_srcLen exch def
        /AGMUTIL_ndx 0 def
        AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
            1 index exch get
            AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
            /AGMUTIL_ndx AGMUTIL_ndx 1 add def
        }for
        pop
        AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
    }
    bind
    /exec cvx
    ]cvx
}bdf
/filter_indexed_devn
{
    cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{   
    4 dict begin
    /srcStr xdf
    /dstStr xdf
    dup type/filetype ne{
        0()/SubFileDecode filter
    }if
    [
    exch
        [
            /devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
            currentdict/srcStr get/readstring cvx/pop cvx
            /dup cvx/length cvx 0/gt cvx[
                Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
                names_index Names length currentdict/srcStr get length 1 sub{
                    1/index cvx/exch cvx/get cvx
                    currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
                    Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
                }for
                currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
            ]cvx/if cvx
            /end cvx
        ]cvx
        bind
        /exec cvx
    ]cvx
    end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
    AGMUTIL_imagefile 0 setfileposition
    10 dict begin
    /imageDict xdf
    /imbufLen Width BitsPerComponent mul 7 add 8 idiv def
    /imbufIdx 0 def
    /origDataSource imageDict/DataSource get def
    /origMultipleDataSources imageDict/MultipleDataSources get def
    /origDecode imageDict/Decode get def
    /dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
    imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
    {
        /imbufCnt imageDict/DataSource get length def
        /imbufs imbufCnt array def
        0 1 imbufCnt 1 sub{
            /imbufIdx xdf
            imbufs imbufIdx imbufLen string put
            imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
        }for
        DeviceN_PS2{
            imageDict begin
            /DataSource[DataSource/devn_sep_datasource cvx]cvx def
            /MultipleDataSources false def
            /Decode[0 1]def
            end
        }if
    }{
        /imbuf imbufLen string def
        Indexed_DeviceN level3 not and DeviceN_NoneName or{
            /srcDataStrs[imageDict begin
                currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
                {
                    Width Decode length 2 div mul cvi string
                }repeat
                end]def     
            imageDict begin
            /DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
            /Decode[0 1]def
            end
        }{
            imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
            imageDict/Decode[0 1]put
        }ifelse
    }ifelse
    imageDict exch
    load exec
    imageDict/DataSource origDataSource put
    imageDict/MultipleDataSources origMultipleDataSources put
    imageDict/Decode origDecode put 
    end
}bdf
/write_image_file
{
    begin
    {(AGMUTIL_imagefile)(w+)file}stopped{
        false
    }{
        Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
        2 dict begin
        /imbufLen Width BitsPerComponent mul 7 add 8 idiv def
        MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
            /imbuf imbufLen string def
        }if
        1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
            pop
            MultipleDataSources{
                0 1 DataSource length 1 sub{
                    DataSource type dup
                    /arraytype eq{
                        pop DataSource exch gx
                    }{
                        /filetype eq{
                            DataSource exch get imbuf readstring pop
                        }{
                            DataSource exch get
                        }ifelse
                    }ifelse
                    AGMUTIL_imagefile exch writestring
                }for
            }{
                DataSource type dup
                /arraytype eq{
                    pop DataSource exec
                }{
                    /filetype eq{
                        DataSource imbuf readstring pop
                    }{
                        DataSource
                    }ifelse
                }ifelse
                AGMUTIL_imagefile exch writestring
            }ifelse
        }for
        end
        true
    }ifelse
    end
}bdf
/close_image_file
{
    AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
    /pstr statusdict/product get def
    pstr(HP LaserJet 2200)eq    
    pstr(HP LaserJet 4000 Series)eq or
    pstr(HP LaserJet 4050 Series )eq or
    pstr(HP LaserJet 8000 Series)eq or
    pstr(HP LaserJet 8100 Series)eq or
    pstr(HP LaserJet 8150 Series)eq or
    pstr(HP LaserJet 5000 Series)eq or
    pstr(HP LaserJet 5100 Series)eq or
    pstr(HP Color LaserJet 4500)eq or
    pstr(HP Color LaserJet 4600)eq or
    pstr(HP LaserJet 5Si)eq or
    pstr(HP LaserJet 1200 Series)eq or
    pstr(HP LaserJet 1300 Series)eq or
    pstr(HP LaserJet 4100 Series)eq or 
    {
        userdict/AGMP_current_show/show load put
        userdict/show{
         currentcolorspace 0 get
         /Pattern eq
         {false charpath f}
         {AGMP_current_show}ifelse
        }put
    }if
    currentdict/pstr undef
}if
/consumeimagedata
{
    begin
    AGMIMG_init_common
    currentdict/MultipleDataSources known not
        {/MultipleDataSources false def}if
    MultipleDataSources
        {
        DataSource 0 get type
        dup/filetype eq
            {
            1 dict begin
            /flushbuffer Width cvi string def
            1 1 Height cvi
                {
                pop
                0 1 DataSource length 1 sub
                    {
                    DataSource exch get
                    flushbuffer readstring pop pop
                    }for
                }for
            end
            }if
        dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
            {
            Width Height mul cvi
                {
                0 1 DataSource length 1 sub
                    {dup DataSource exch gx length exch 0 ne{pop}if}for
                dup 0 eq
                    {pop exit}if
                sub dup 0 le
                    {exit}if
                }loop
            pop
            }if     
        }
        {
        /DataSource load type 
        dup/filetype eq
            {
            1 dict begin
            /flushbuffer Width Decode length 2 idiv mul cvi string def
            1 1 Height{pop DataSource flushbuffer readstring pop pop}for
            end
            }if
        dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
            {
                Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
                    {
                    DataSource length dup 0 eq
                        {pop exit}if
                    sub dup 0 le
                        {exit}if
                    }loop
                pop
            }if
        }ifelse
    end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
    currenthalftone dup length dict copy begin
     currentdict 2 index known{
        1 index load dup length dict copy begin
        currentdict/TransferFunction known{
            /TransferFunction load
        }{
            currenttransfer
        }ifelse
         addprocs/TransferFunction xdf 
         currentdict end def
        currentdict end sethalftone
    }{
        currentdict/TransferFunction known{
            /TransferFunction load 
        }{
            currenttransfer
        }ifelse
        addprocs/TransferFunction xdf
        currentdict end sethalftone     
        pop
    }ifelse
}def
/clonearray
{
    dup xcheck exch
    dup length array exch
    Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
    {
    Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
    dup type/dicttype eq
        {
            Adobe_AGM_Core/AGMCORE_tmp get
            exch
            clonedict
            Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
        }if
    dup type/arraytype eq
        {
            Adobe_AGM_Core/AGMCORE_tmp get exch
            clonearray
            Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
        }if
    exch dup
    Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
    }forall
    exch{cvx}if
}bdf
/clonedict
{
    dup length dict
    begin
    {
        dup type/dicttype eq
            {clonedict}if
        dup type/arraytype eq
            {clonearray}if
        def
    }forall
    currentdict
    end
}bdf
/DeviceN_PS2
{
    /currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
    /indexed_colorspace_dict AGMCORE_gget dup null ne{
        dup/CSDBase known{
            /CSDBase get/CSD get_res/Names known 
        }{
            pop false
        }ifelse
    }{
        pop false
    }ifelse
}bdf
/DeviceN_NoneName
{   
    /Names where{
        pop
        false Names
        {
            (None)eq or
        }forall
    }{
        false
    }ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
    /AGMCORE_in_rip_sep where
    {
        pop dup type dup/arraytype eq exch/packedarraytype eq or
        {
            dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
            {
                /currentcolorspace exch AGMCORE_gput
                false
            }{
                true
            }ifelse
        }{
            true
        }ifelse
    }{
        true
    }ifelse
}bdf
/base_colorspace_type
{
    dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
    /pdfmark_5{cleartomark}bind def
}{
    /pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
    currentfile exch 0 exch/SubFileDecode filter
    /currentdistillerparams where 
    {pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
    {flushfile cleartomark}
    {/PUT pdfmark}ifelse    
}bdf
/ReadBypdfmark_5_string
{
    2 dict begin
    /makerString exch def string/tmpString exch def
    {
        currentfile tmpString readline pop
        makerString anchorsearch
        {
            pop pop cleartomark exit
        }{
            3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
        }ifelse
    }loop
    end
}bdf
/xpdfm
{
    {
        dup 0 get/Label eq
        {
            aload length[exch 1 add 1 roll/PAGELABEL
        }{
            aload pop
            [{ThisPage}<<5 -2 roll>>/PUT
        }ifelse
        pdfmark_5
    }forall
}bdf
/lmt{
    dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
    dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
    Adobe_AGM_Utils begin
}bdf
/dt{
    currentdict Adobe_AGM_Utils eq{
        end
    }if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
    currentpacking
    true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
    /Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
    where{
        /Adobe_AGM_Core_Id known
    }{
        false
    }ifelse
}ndf
/flushinput
{
    save
    2 dict begin
    /CompareBuffer 3 -1 roll def
    /readbuffer 256 string def
    mark
    {
    currentfile readbuffer{readline}stopped
        {cleartomark mark}
        {
        not
            {pop exit}
        if
        CompareBuffer eq
            {exit}
        if
        }ifelse
    }loop
    cleartomark
    end
    restore
}bdf
/getspotfunction
{
    AGMCORE_screen exch pop exch pop
    dup type/dicttype eq{
        dup/HalftoneType get 1 eq{
            /SpotFunction get
        }{
            dup/HalftoneType get 2 eq{
                /GraySpotFunction get
            }{
                pop
                {
                    abs exch abs 2 copy add 1 gt{
                        1 sub dup mul exch 1 sub dup mul add 1 sub
                    }{
                        dup mul exch dup mul add 1 exch sub
                    }ifelse
                }bind
            }ifelse
        }ifelse
    }if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
    /AGMCORE_graphicsave save store
    concat
    0 setgray
    0 setlinecap
    0 setlinejoin
    1 setlinewidth
    []0 setdash
    10 setmiterlimit
    np
    false setoverprint
    false setstrokeadjust
    //Adobe_AGM_Core/spot_alias gx
    /Adobe_AGM_Image where{
        pop
        Adobe_AGM_Image/spot_alias 2 copy known{
            gx
        }{
            pop pop
        }ifelse
    }if
    /sep_colorspace_dict null AGMCORE_gput
    100 dict begin
    /dictstackcount countdictstack def
    /showpage{}def
    mark
}def
/graphic_cleanup
{
    cleartomark
    dictstackcount 1 countdictstack 1 sub{end}for
    end
    AGMCORE_graphicsave restore
}def
/compose_error_msg
{
    grestoreall initgraphics    
    /Helvetica findfont 10 scalefont setfont
    /AGMCORE_deltaY 100 def
    /AGMCORE_deltaX 310 def
    clippath pathbbox np pop pop 36 add exch 36 add exch moveto
    0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
    0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
    0 AGMCORE_&setgray
    gsave 1 AGMCORE_&setgray fill grestore 
    1 setlinewidth gsave stroke grestore
    currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
    /AGMCORE_deltaY 12 def
    /AGMCORE_tmp 0 def
    AGMCORE_err_strings exch get
        {
        dup 32 eq
            {
            pop
            AGMCORE_str256 0 AGMCORE_tmp getinterval
            stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
                {
                currentpoint AGMCORE_deltaY sub exch pop
                clippath pathbbox pop pop pop 44 add exch moveto
                }if
            AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
            0 1 AGMCORE_str256 length 1 sub
                {
                AGMCORE_str256 exch 0 put
                }for
            /AGMCORE_tmp 0 def
            }{
                AGMCORE_str256 exch AGMCORE_tmp xpt
                /AGMCORE_tmp AGMCORE_tmp 1 add def
            }ifelse
        }forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
    [/Separation/None/DeviceCMYK{0 0 0}]
    [/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
    [/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
    [/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
    [/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
    [/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
    [/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
    [/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
    [/Separation(Cyan)/DeviceCMYK{0 0 0}]
    [/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
    [/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
    [/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
    [/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
    [/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
    [/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
    [/DeviceCMYK]
]def
/ds{
    Adobe_AGM_Core begin
    /currentdistillerparams where
        {
        pop currentdistillerparams/CoreDistVersion get 5000 lt
            {<</DetectBlends false>>setdistillerparams}if
        }if 
    /AGMCORE_ps_version xdf
    /AGMCORE_ps_level xdf
    errordict/AGM_handleerror known not{
        errordict/AGM_handleerror errordict/handleerror get put
        errordict/handleerror{
            Adobe_AGM_Core begin
            $error/newerror get AGMCORE_cur_err null ne and{
                $error/newerror false put
                AGMCORE_cur_err compose_error_msg
            }if
            $error/newerror true put
            end
            errordict/AGM_handleerror get exec
            }bind put
        }if
    /AGMCORE_environ_ok 
        ps_level AGMCORE_ps_level ge
        ps_version AGMCORE_ps_version ge and 
        AGMCORE_ps_level -1 eq or
    def
    AGMCORE_environ_ok not
        {/AGMCORE_cur_err/AGMCORE_bad_environ def}if
    /AGMCORE_&setgray systemdict/setgray get def
    level2{
        /AGMCORE_&setcolor systemdict/setcolor get def
        /AGMCORE_&setcolorspace systemdict/setcolorspace get def
    }if
    /AGMCORE_currentbg currentblackgeneration def
    /AGMCORE_currentucr currentundercolorremoval def
    /AGMCORE_Default_flatness currentflat def
    /AGMCORE_distilling
        /product where{
            pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
        }{
            false
        }ifelse
    def
    /AGMCORE_GSTATE AGMCORE_key_known not{
        /AGMCORE_GSTATE 21 dict def
        /AGMCORE_tmpmatrix matrix def
        /AGMCORE_gstack 32 array def
        /AGMCORE_gstackptr 0 def
        /AGMCORE_gstacksaveptr 0 def
        /AGMCORE_gstackframekeys 14 def
        /AGMCORE_&gsave/gsave ldf
        /AGMCORE_&grestore/grestore ldf
        /AGMCORE_&grestoreall/grestoreall ldf
        /AGMCORE_&save/save ldf
        /AGMCORE_&setoverprint/setoverprint ldf
        /AGMCORE_gdictcopy{
            begin
            {def}forall
            end
        }def
        /AGMCORE_gput{
            AGMCORE_gstack AGMCORE_gstackptr get
            3 1 roll
            put
        }def
        /AGMCORE_gget{
            AGMCORE_gstack AGMCORE_gstackptr get
            exch
            get
        }def
        /gsave{
            AGMCORE_&gsave
            AGMCORE_gstack AGMCORE_gstackptr get
            AGMCORE_gstackptr 1 add
            dup 32 ge{limitcheck}if
            /AGMCORE_gstackptr exch store
            AGMCORE_gstack AGMCORE_gstackptr get
            AGMCORE_gdictcopy
        }def
        /grestore{
            AGMCORE_&grestore
            AGMCORE_gstackptr 1 sub
            dup AGMCORE_gstacksaveptr lt{1 add}if
            dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
                {/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
            /AGMCORE_gstackptr exch store
        }def
        /grestoreall{
            AGMCORE_&grestoreall
            /AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
        }def
        /save{
            AGMCORE_&save
            AGMCORE_gstack AGMCORE_gstackptr get
            AGMCORE_gstackptr 1 add
            dup 32 ge{limitcheck}if
            /AGMCORE_gstackptr exch store
            /AGMCORE_gstacksaveptr AGMCORE_gstackptr store
            AGMCORE_gstack AGMCORE_gstackptr get
            AGMCORE_gdictcopy
        }def
        /setoverprint{
            dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
        }def    
        0 1 AGMCORE_gstack length 1 sub{
                AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
        }for
    }if
    level3/AGMCORE_&sysshfill AGMCORE_key_known not and
    {
        /AGMCORE_&sysshfill systemdict/shfill get def
        /AGMCORE_&sysmakepattern systemdict/makepattern get def
        /AGMCORE_&usrmakepattern/makepattern load def
    }if
    /currentcmykcolor[0 0 0 0]AGMCORE_gput
    /currentstrokeadjust false AGMCORE_gput
    /currentcolorspace[/DeviceGray]AGMCORE_gput
    /sep_tint 0 AGMCORE_gput
    /devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
    /sep_colorspace_dict null AGMCORE_gput
    /devicen_colorspace_dict null AGMCORE_gput
    /indexed_colorspace_dict null AGMCORE_gput
    /currentcolor_intent()AGMCORE_gput
    /customcolor_tint 1 AGMCORE_gput
    /absolute_colorimetric_crd null AGMCORE_gput
    /relative_colorimetric_crd null AGMCORE_gput
    /saturation_crd null AGMCORE_gput
    /perceptual_crd null AGMCORE_gput
    currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
         cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
    <<
    /MaxPatternItem currentsystemparams/MaxPatternCache get
    >>
    setuserparams
    end
}def
/ps
{
    /setcmykcolor where{
        pop
        Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
    }if
    Adobe_AGM_Core begin
    /setcmykcolor
    {
        4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
        1 sub 4 1 roll
        3{
            3 index add neg dup 0 lt{
                pop 0
            }if
            3 1 roll
        }repeat
        setrgbcolor pop
    }ndf
    /currentcmykcolor
    {
        /currentcmykcolor AGMCORE_gget aload pop
    }ndf
    /setoverprint
    {pop}ndf
    /currentoverprint
    {false}ndf
    /AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
    /AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
    /AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
    /AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
    /AGMCORE_plate_ndx 
        AGMCORE_cyan_plate{
            0
        }{
            AGMCORE_magenta_plate{
                1
            }{
                AGMCORE_yellow_plate{
                    2
                }{
                    AGMCORE_black_plate{
                        3
                    }{
                        4
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
        def
    /AGMCORE_have_reported_unsupported_color_space false def
    /AGMCORE_report_unsupported_color_space
    {
        AGMCORE_have_reported_unsupported_color_space false eq
        {
            (Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
            Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
        }if
    }def
    /AGMCORE_composite_job
        AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
    /AGMCORE_in_rip_sep
        /AGMCORE_in_rip_sep where{
            pop AGMCORE_in_rip_sep
        }{
            AGMCORE_distilling 
            {
                false
            }{
                userdict/Adobe_AGM_OnHost_Seps known{
                    false
                }{
                    level2{
                        currentpagedevice/Separations 2 copy known{
                            get
                        }{
                            pop pop false
                        }ifelse
                    }{
                        false
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
    def
    /AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
    /AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
    /AGM_preserve_spots 
        /AGM_preserve_spots where{
            pop AGM_preserve_spots
        }{
            AGMCORE_distilling AGMCORE_producing_seps or
        }ifelse
    def
    /AGM_is_distiller_preserving_spotimages
    {
        currentdistillerparams/PreserveOverprintSettings known
        {
            currentdistillerparams/PreserveOverprintSettings get
                {
                    currentdistillerparams/ColorConversionStrategy known
                    {
                        currentdistillerparams/ColorConversionStrategy get
                        /sRGB ne
                    }{
                        true
                    }ifelse
                }{
                    false
                }ifelse
        }{
            false
        }ifelse
    }def
    /convert_spot_to_process where{pop}{
        /convert_spot_to_process
        {
            //Adobe_AGM_Core begin
            dup map_alias{
                /Name get exch pop
            }if
            dup dup(None)eq exch(All)eq or
                {
                pop false
                }{
                AGMCORE_host_sep
                {
                    gsave
                    1 0 0 0 setcmykcolor currentgray 1 exch sub
                    0 1 0 0 setcmykcolor currentgray 1 exch sub
                    0 0 1 0 setcmykcolor currentgray 1 exch sub
                    0 0 0 1 setcmykcolor currentgray 1 exch sub
                    add add add 0 eq
                    {
                        pop false
                    }{
                        false setoverprint
                        current_spot_alias false set_spot_alias
                        1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
                        set_spot_alias
                        currentgray 1 ne
                    }ifelse
                    grestore
                }{
                    AGMCORE_distilling
                    {
                        pop AGM_is_distiller_preserving_spotimages not
                    }{
                        //Adobe_AGM_Core/AGMCORE_name xddf
                        false
                        //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
                        AGMUTIL_cpd/OverrideSeparations known and
                        {
                            AGMUTIL_cpd/OverrideSeparations get
                            {
                                /HqnSpots/ProcSet resourcestatus
                                {
                                    pop pop pop true
                                }if
                            }if
                        }if                 
                        {
                            AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
                        }{
                            gsave
                            [/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
                            false
                            AGMUTIL_cpd/SeparationColorNames 2 copy known
                            {
                                get
                                {AGMCORE_name eq or}forall
                                not
                            }{
                                pop pop pop true
                            }ifelse
                            grestore
                        }ifelse
                    }ifelse
                }ifelse
            }ifelse
            end
        }def
    }ifelse
    /convert_to_process where{pop}{
        /convert_to_process
        {
            dup length 0 eq
                {
                pop false
                }{
                AGMCORE_host_sep
                {
                dup true exch
                    {
                    dup(Cyan)eq exch
                    dup(Magenta)eq 3 -1 roll or exch
                    dup(Yellow)eq 3 -1 roll or exch
                    dup(Black)eq 3 -1 roll or
                        {pop}
                        {convert_spot_to_process and}ifelse
                    }
                forall
                    {
                    true exch
                        {
                        dup(Cyan)eq exch
                        dup(Magenta)eq 3 -1 roll or exch
                        dup(Yellow)eq 3 -1 roll or exch
                        (Black)eq or and
                        }forall
                        not
                    }{pop false}ifelse
                }{
                false exch
                    {
                    /PhotoshopDuotoneList where{pop false}{true}ifelse
                        {
                        dup(Cyan)eq exch
                        dup(Magenta)eq 3 -1 roll or exch
                        dup(Yellow)eq 3 -1 roll or exch
                        dup(Black)eq 3 -1 roll or
                        {pop}
                        {convert_spot_to_process or}ifelse
                        }
                        {
                        convert_spot_to_process or
                        }
                    ifelse
                    }
                forall
                }ifelse
            }ifelse
        }def
    }ifelse 
    /AGMCORE_avoid_L2_sep_space 
        version cvr 2012 lt 
        level2 and 
        AGMCORE_producing_seps not and
    def
    /AGMCORE_is_cmyk_sep
        AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
    def
    /AGM_avoid_0_cmyk where{
        pop AGM_avoid_0_cmyk
    }{
        AGM_preserve_spots 
        userdict/Adobe_AGM_OnHost_Seps known 
        userdict/Adobe_AGM_InRip_Seps known or
        not and
    }ifelse
    {
        /setcmykcolor[
            {
                4 copy add add add 0 eq currentoverprint and{
                    pop 0.0005
                }if
            }/exec cvx
            /AGMCORE_&setcmykcolor load dup type/operatortype ne{
                /exec cvx
            }if
        ]cvx def
    }if
    /AGMCORE_IsSeparationAProcessColor
        {
        dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
        }def
    AGMCORE_host_sep{
        /setcolortransfer
        {
            AGMCORE_cyan_plate{
                pop pop pop
            }{
                AGMCORE_magenta_plate{
                    4 3 roll pop pop pop
                }{
                    AGMCORE_yellow_plate{
                        4 2 roll pop pop pop
                    }{
                        4 1 roll pop pop pop
                    }ifelse
                }ifelse
            }ifelse
            settransfer 
        }   
        def
        /AGMCORE_get_ink_data
            AGMCORE_cyan_plate{
                {pop pop pop}
            }{
                AGMCORE_magenta_plate{
                    {4 3 roll pop pop pop}
                }{
                    AGMCORE_yellow_plate{
                        {4 2 roll pop pop pop}
                    }{
                        {4 1 roll pop pop pop}
                    }ifelse
                }ifelse
            }ifelse
        def
        /AGMCORE_RemoveProcessColorNames
            {
            1 dict begin
            /filtername
                {
                dup/Cyan eq 1 index(Cyan)eq or
                    {pop(_cyan_)}if
                dup/Magenta eq 1 index(Magenta)eq or
                    {pop(_magenta_)}if
                dup/Yellow eq 1 index(Yellow)eq or
                    {pop(_yellow_)}if
                dup/Black eq 1 index(Black)eq or
                    {pop(_black_)}if
                }def
            dup type/arraytype eq
                {[exch{filtername}forall]}
                {filtername}ifelse
            end
            }def
        level3{
            /AGMCORE_IsCurrentColor
                {
                dup AGMCORE_IsSeparationAProcessColor
                    {
                    AGMCORE_plate_ndx 0 eq
                        {dup(Cyan)eq exch/Cyan eq or}if
                    AGMCORE_plate_ndx 1 eq
                        {dup(Magenta)eq exch/Magenta eq or}if
                    AGMCORE_plate_ndx 2 eq
                        {dup(Yellow)eq exch/Yellow eq or}if
                    AGMCORE_plate_ndx 3 eq
                        {dup(Black)eq exch/Black eq or}if
                    AGMCORE_plate_ndx 4 eq
                        {pop false}if
                    }{
                    gsave
                    false setoverprint
                    current_spot_alias false set_spot_alias
                    1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
                    set_spot_alias
                    currentgray 1 ne
                    grestore
                    }ifelse
                }def
            /AGMCORE_filter_functiondatasource
                {   
                5 dict begin
                /data_in xdf
                data_in type/stringtype eq
                    {
                    /ncomp xdf
                    /comp xdf
                    /string_out data_in length ncomp idiv string def
                    0 ncomp data_in length 1 sub
                        {
                        string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
                        }for
                    string_out
                    }{
                    string/string_in xdf
                    /string_out 1 string def
                    /component xdf
                    [
                    data_in string_in/readstring cvx
                        [component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
                        [/pop cvx()]cvx/ifelse cvx
                    ]cvx/ReusableStreamDecode filter
                }ifelse
                end
                }def
            /AGMCORE_separateShadingFunction
                {
                2 dict begin
                /paint? xdf
                /channel xdf
                dup type/dicttype eq
                    {
                    begin
                    FunctionType 0 eq
                        {
                        /DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
                        currentdict/Decode known
                            {/Decode Decode channel 2 mul 2 getinterval def}if
                        paint? not
                            {/Decode[1 1]def}if
                        }if
                    FunctionType 2 eq
                        {
                        paint?
                            {
                            /C0[C0 channel get 1 exch sub]def
                            /C1[C1 channel get 1 exch sub]def
                            }{
                            /C0[1]def
                            /C1[1]def
                            }ifelse         
                        }if
                    FunctionType 3 eq
                        {
                        /Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def          
                        }if
                    currentdict/Range known
                        {/Range[0 1]def}if
                    currentdict
                    end}{
                    channel get 0 paint? AGMCORE_separateShadingFunction
                    }ifelse
                end
                }def
            /AGMCORE_separateShading
                {
                3 -1 roll begin
                currentdict/Function known
                    {
                    currentdict/Background known
                        {[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
                    Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
                    /ColorSpace[/DeviceGray]def
                    }{
                    ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
                        {
                        /ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
                        }{
                        ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
                        }ifelse
                    ColorSpace 0 get/Separation eq
                        {
                            {
                                [1/exch cvx/sub cvx]cvx
                            }{
                                [/pop cvx 1]cvx
                            }ifelse
                            ColorSpace 3 3 -1 roll put
                            pop
                        }{
                            {
                                [exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
                            }{
                                pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
                            }ifelse
                            ColorSpace 3 3 -1 roll bind put
                        }ifelse
                    ColorSpace 2/DeviceGray put                                                                     
                    }ifelse
                end
                }def
            /AGMCORE_separateShadingDict
                {
                dup/ColorSpace get
                dup type/arraytype ne
                    {[exch]}if
                dup 0 get/DeviceCMYK eq
                    {
                    exch begin 
                    currentdict
                    AGMCORE_cyan_plate
                        {0 true}if
                    AGMCORE_magenta_plate
                        {1 true}if
                    AGMCORE_yellow_plate
                        {2 true}if
                    AGMCORE_black_plate
                        {3 true}if
                    AGMCORE_plate_ndx 4 eq
                        {0 false}if     
                    dup not currentoverprint and
                        {/AGMCORE_ignoreshade true def}if
                    AGMCORE_separateShading
                    currentdict
                    end exch
                    }if
                dup 0 get/Separation eq
                    {
                    exch begin
                    ColorSpace 1 get dup/None ne exch/All ne and
                        {
                        ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
                            {
                            ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
                                {
                                /ColorSpace
                                    [
                                    /Separation
                                    ColorSpace 1 get
                                    /DeviceGray
                                        [
                                        ColorSpace 3 get/exec cvx
                                        4 AGMCORE_plate_ndx sub -1/roll cvx
                                        4 1/roll cvx
                                        3[/pop cvx]cvx/repeat cvx
                                        1/exch cvx/sub cvx
                                        ]cvx                                    
                                    ]def
                                }{
                                AGMCORE_report_unsupported_color_space
                                AGMCORE_black_plate not
                                    {
                                    currentdict 0 false AGMCORE_separateShading
                                    }if
                                }ifelse
                            }{
                            currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
                            0 exch 
                            dup not currentoverprint and
                                {/AGMCORE_ignoreshade true def}if
                            AGMCORE_separateShading
                            }ifelse 
                        }if         
                    currentdict
                    end exch
                    }if
                dup 0 get/DeviceN eq
                    {
                    exch begin
                    ColorSpace 1 get convert_to_process
                        {
                        ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
                            {
                            /ColorSpace
                                [
                                /DeviceN
                                ColorSpace 1 get
                                /DeviceGray
                                    [
                                    ColorSpace 3 get/exec cvx
                                    4 AGMCORE_plate_ndx sub -1/roll cvx
                                    4 1/roll cvx
                                    3[/pop cvx]cvx/repeat cvx
                                    1/exch cvx/sub cvx
                                    ]cvx                                    
                                ]def
                            }{
                            AGMCORE_report_unsupported_color_space
                            AGMCORE_black_plate not
                                {
                                currentdict 0 false AGMCORE_separateShading
                                /ColorSpace[/DeviceGray]def
                                }if
                            }ifelse
                        }{
                        currentdict
                        false -1 ColorSpace 1 get
                            {
                            AGMCORE_IsCurrentColor
                                {
                                1 add
                                exch pop true exch exit
                                }if
                            1 add
                            }forall
                        exch 
                        dup not currentoverprint and
                            {/AGMCORE_ignoreshade true def}if
                        AGMCORE_separateShading
                        }ifelse
                    currentdict
                    end exch
                    }if
                dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
                    {
                    exch begin
                    ColorSpace dup type/arraytype eq
                        {0 get}if
                    /DeviceGray ne
                        {
                        AGMCORE_report_unsupported_color_space
                        AGMCORE_black_plate not
                            {
                            ColorSpace 0 get/CIEBasedA eq
                                {
                                /ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
                                }if
                            ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
                                {
                                /ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
                                }if
                            ColorSpace 0 get/CIEBasedDEFG eq
                                {
                                /ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
                                }if
                            currentdict 0 false AGMCORE_separateShading
                            }if
                        }if
                    currentdict
                    end exch
                    }if
                pop
                dup/AGMCORE_ignoreshade known
                    {
                    begin
                    /ColorSpace[/Separation(None)/DeviceGray{}]def
                    currentdict end
                    }if
                }def
            /shfill
                {
                AGMCORE_separateShadingDict 
                dup/AGMCORE_ignoreshade known
                    {pop}
                    {AGMCORE_&sysshfill}ifelse
                }def
            /makepattern
                {
                exch
                dup/PatternType get 2 eq
                    {
                    clonedict
                    begin
                    /Shading Shading AGMCORE_separateShadingDict def
                    Shading/AGMCORE_ignoreshade known
                    currentdict end exch
                    {pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
                    exch AGMCORE_&sysmakepattern
                    }{
                    exch AGMCORE_&usrmakepattern
                    }ifelse
                }def
        }if
    }if
    AGMCORE_in_rip_sep{
        /setcustomcolor
        {
            exch aload pop
            dup 7 1 roll inRip_spot_has_ink not {
                4{4 index mul 4 1 roll}
                repeat
                /DeviceCMYK setcolorspace
                6 -2 roll pop pop
            }{
                //Adobe_AGM_Core begin
                    /AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
                end
                [/Separation 4 -1 roll/DeviceCMYK
                {dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
                ]
                setcolorspace
            }ifelse
            setcolor
        }ndf
        /setseparationgray
        {
            [/Separation(All)/DeviceGray{}]setcolorspace_opt
            1 exch sub setcolor
        }ndf
    }{
        /setseparationgray
        {
            AGMCORE_&setgray
        }ndf
    }ifelse
    /findcmykcustomcolor
    {
        5 makereadonlyarray
    }ndf
    /setcustomcolor
    {
        exch aload pop pop
        4{4 index mul 4 1 roll}repeat
        setcmykcolor pop
    }ndf
    /has_color
        /colorimage where{
            AGMCORE_producing_seps{
                pop true
            }{
                systemdict eq
            }ifelse
        }{
            false
        }ifelse
    def
    /map_index
    {
        1 index mul exch getinterval{255 div}forall
    }bdf
    /map_indexed_devn
    {
        Lookup Names length 3 -1 roll cvi map_index
    }bdf
    /n_color_components
    {
        base_colorspace_type
        dup/DeviceGray eq{
            pop 1
        }{
            /DeviceCMYK eq{
                4
            }{
                3
            }ifelse
        }ifelse
    }bdf
    level2{
        /mo/moveto ldf
        /li/lineto ldf
        /cv/curveto ldf
        /knockout_unitsq
        {
            1 setgray
            0 0 1 1 rectfill
        }def
        level2/setcolorspace AGMCORE_key_known not and{
            /AGMCORE_&&&setcolorspace/setcolorspace ldf
            /AGMCORE_ReplaceMappedColor
            {
                dup type dup/arraytype eq exch/packedarraytype eq or
                {
                    /AGMCORE_SpotAliasAry2 where{
                        begin
                        dup 0 get dup/Separation eq
                        {
                            pop
                            dup length array copy
                            dup dup 1 get
                            current_spot_alias
                            {
                                dup map_alias
                                {
                                    false set_spot_alias
                                    dup 1 exch setsepcolorspace
                                    true set_spot_alias
                                    begin
                                    /sep_colorspace_dict currentdict AGMCORE_gput
                                    pop pop pop
                                    [
                                        /Separation Name 
                                        CSA map_csa
                                        MappedCSA 
                                        /sep_colorspace_proc load
                                    ]
                                    dup Name
                                    end
                                }if
                            }if
                            map_reserved_ink_name 1 xpt
                        }{
                            /DeviceN eq 
                            {
                                dup length array copy
                                dup dup 1 get[
                                    exch{
                                        current_spot_alias{
                                            dup map_alias{
                                                /Name get exch pop
                                            }if
                                        }if
                                        map_reserved_ink_name
                                    }forall 
                                ]1 xpt
                            }if
                        }ifelse
                        end
                    }if
                }if
            }def
            /setcolorspace
            {
                dup type dup/arraytype eq exch/packedarraytype eq or
                {
                    dup 0 get/Indexed eq
                    {
                        AGMCORE_distilling
                        {
                            /PhotoshopDuotoneList where
                            {
                                pop false
                            }{
                                true
                            }ifelse
                        }{
                            true
                        }ifelse
                        {
                            aload pop 3 -1 roll
                            AGMCORE_ReplaceMappedColor
                            3 1 roll 4 array astore
                        }if
                    }{
                        AGMCORE_ReplaceMappedColor
                    }ifelse
                }if
                DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
            }def
        }if 
    }{
        /adj
        {
            currentstrokeadjust{
                transform
                0.25 sub round 0.25 add exch
                0.25 sub round 0.25 add exch
                itransform
            }if
        }def
        /mo{
            adj moveto
        }def
        /li{
            adj lineto
        }def
        /cv{
            6 2 roll adj
            6 2 roll adj
            6 2 roll adj curveto
        }def
        /knockout_unitsq
        {
            1 setgray
            8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
        }def
        /currentstrokeadjust{
            /currentstrokeadjust AGMCORE_gget
        }def
        /setstrokeadjust{
            /currentstrokeadjust exch AGMCORE_gput
        }def
        /setcolorspace
        {
            /currentcolorspace exch AGMCORE_gput
        }def
        /currentcolorspace
        {
            /currentcolorspace AGMCORE_gget
        }def
        /setcolor_devicecolor
        {
            base_colorspace_type
            dup/DeviceGray eq{
                pop setgray
            }{
                /DeviceCMYK eq{
                    setcmykcolor
                }{
                    setrgbcolor
                }ifelse
            }ifelse
        }def
        /setcolor
        {
            currentcolorspace 0 get
            dup/DeviceGray ne{
                dup/DeviceCMYK ne{
                    dup/DeviceRGB ne{
                        dup/Separation eq{
                            pop
                            currentcolorspace 3 gx
                            currentcolorspace 2 get
                        }{
                            dup/Indexed eq{
                                pop
                                currentcolorspace 3 get dup type/stringtype eq{
                                    currentcolorspace 1 get n_color_components
                                    3 -1 roll map_index
                                }{
                                    exec
                                }ifelse
                                currentcolorspace 1 get
                            }{
                                /AGMCORE_cur_err/AGMCORE_invalid_color_space def
                                AGMCORE_invalid_color_space
                            }ifelse
                        }ifelse
                    }if
                }if
            }if
            setcolor_devicecolor
        }def
    }ifelse
    /sop/setoverprint ldf
    /lw/setlinewidth ldf
    /lc/setlinecap ldf
    /lj/setlinejoin ldf
    /ml/setmiterlimit ldf
    /dsh/setdash ldf
    /sadj/setstrokeadjust ldf
    /gry/setgray ldf
    /rgb/setrgbcolor ldf
    /cmyk[
        /currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
        /setcmykcolor load dup type/operatortype ne{/exec cvx}if
    ]cvx bdf
    level3 AGMCORE_host_sep not and{
        /nzopmsc{
            6 dict begin
            /kk exch def
            /yy exch def
            /mm exch def
            /cc exch def
            /sum 0 def
            cc 0 ne{/sum sum 2#1000 or def cc}if
            mm 0 ne{/sum sum 2#0100 or def mm}if
            yy 0 ne{/sum sum 2#0010 or def yy}if
            kk 0 ne{/sum sum 2#0001 or def kk}if
            AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
            sum 0 eq{0}if
            end
            setcolor
        }bdf
    }{
        /nzopmsc/cmyk ldf
    }ifelse
    /sep/setsepcolor ldf
    /devn/setdevicencolor ldf
    /idx/setindexedcolor ldf
    /colr/setcolor ldf
    /csacrd/set_csa_crd ldf
    /sepcs/setsepcolorspace ldf
    /devncs/setdevicencolorspace ldf
    /idxcs/setindexedcolorspace ldf
    /cp/closepath ldf
    /clp/clp_npth ldf
    /eclp/eoclp_npth ldf
    /f/fill ldf
    /ef/eofill ldf
    /@/stroke ldf
    /nclp/npth_clp ldf
    /gset/graphic_setup ldf
    /gcln/graphic_cleanup ldf
    /ct/concat ldf
    /cf/currentfile ldf
    /fl/filter ldf
    /rs/readstring ldf
    /AGMCORE_def_ht currenthalftone def
    /clonedict Adobe_AGM_Utils begin/clonedict load end def
    /clonearray Adobe_AGM_Utils begin/clonearray load end def
    currentdict{
        dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
            bind
        }if
        def
    }forall
    /getrampcolor
    {
        /indx exch def
        0 1 NumComp 1 sub
        {
            dup
            Samples exch get
            dup type/stringtype eq{indx get}if
            exch
            Scaling exch get aload pop
            3 1 roll
            mul add
        }for
        ColorSpaceFamily/Separation eq 
        {sep}
        {
            ColorSpaceFamily/DeviceN eq
            {devn}{setcolor}ifelse
        }ifelse
    }bdf
    /sssetbackground{aload pop setcolor}bdf
    /RadialShade
    {
        40 dict begin
        /ColorSpaceFamily xdf
        /background xdf
        /ext1 xdf
        /ext0 xdf
        /BBox xdf
        /r2 xdf
        /c2y xdf
        /c2x xdf
        /r1 xdf
        /c1y xdf
        /c1x xdf
        /rampdict xdf
        /setinkoverprint where{pop/setinkoverprint{pop}def}if
        gsave
        BBox length 0 gt
        {
            np
            BBox 0 get BBox 1 get moveto
            BBox 2 get BBox 0 get sub 0 rlineto
            0 BBox 3 get BBox 1 get sub rlineto
            BBox 2 get BBox 0 get sub neg 0 rlineto
            closepath
            clip
            np
        }if
        c1x c2x eq
        {
            c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
        }{
            /slope c2y c1y sub c2x c1x sub div def
            /theta slope 1 atan def
            c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
            c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
        }ifelse
        gsave
        clippath
        c1x c1y translate
        theta rotate
        -90 rotate
        {pathbbox}stopped
        {0 0 0 0}if
        /yMax xdf
        /xMax xdf
        /yMin xdf
        /xMin xdf
        grestore
        xMax xMin eq yMax yMin eq or
        {
            grestore
            end
        }{
            /max{2 copy gt{pop}{exch pop}ifelse}bdf
            /min{2 copy lt{pop}{exch pop}ifelse}bdf
            rampdict begin
            40 dict begin
            background length 0 gt{background sssetbackground gsave clippath fill grestore}if
            gsave
            c1x c1y translate
            theta rotate
            -90 rotate
            /c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
            /c1y 0 def
            /c1x 0 def
            /c2x 0 def
            ext0
            {
                0 getrampcolor
                c2y r2 add r1 sub 0.0001 lt
                {
                    c1x c1y r1 360 0 arcn
                    pathbbox
                    /aymax exch def
                    /axmax exch def
                    /aymin exch def
                    /axmin exch def
                    /bxMin xMin axmin min def
                    /byMin yMin aymin min def
                    /bxMax xMax axmax max def
                    /byMax yMax aymax max def
                    bxMin byMin moveto
                    bxMax byMin lineto
                    bxMax byMax lineto
                    bxMin byMax lineto
                    bxMin byMin lineto
                    eofill
                }{
                    c2y r1 add r2 le
                    {
                        c1x c1y r1 0 360 arc
                        fill
                    }
                    {
                        c2x c2y r2 0 360 arc fill
                        r1 r2 eq
                        {
                            /p1x r1 neg def
                            /p1y c1y def
                            /p2x r1 def
                            /p2y c1y def
                            p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
                            fill
                        }{
                            /AA r2 r1 sub c2y div def
                            AA -1 eq
                            {/theta 89.99 def}
                            {/theta AA 1 AA dup mul sub sqrt div 1 atan def}
                            ifelse
                            /SS1 90 theta add dup sin exch cos div def
                            /p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
                            /p1y p1x SS1 div neg def
                            /SS2 90 theta sub dup sin exch cos div def
                            /p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
                            /p2y p2x SS2 div neg def
                            r1 r2 gt
                            {
                                /L1maxX p1x yMin p1y sub SS1 div add def
                                /L2maxX p2x yMin p2y sub SS2 div add def
                            }{
                                /L1maxX 0 def
                                /L2maxX 0 def
                            }ifelse
                            p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
                            L1maxX L1maxX p1x sub SS1 mul p1y add lineto
                            fill
                        }ifelse
                    }ifelse
                }ifelse
            }if
        c1x c2x sub dup mul
        c1y c2y sub dup mul
        add 0.5 exp
        0 dtransform
        dup mul exch dup mul add 0.5 exp 72 div
        0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
        72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
        1 index 1 index lt{exch}if pop
        /hires xdf
        hires mul
        /numpix xdf
        /numsteps NumSamples def
        /rampIndxInc 1 def
        /subsampling false def
        numpix 0 ne
        {
            NumSamples numpix div 0.5 gt
            {
                /numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
                /rampIndxInc NumSamples 1 sub numsteps div def
                /subsampling true def
            }if
        }if
        /xInc c2x c1x sub numsteps div def
        /yInc c2y c1y sub numsteps div def
        /rInc r2 r1 sub numsteps div def
        /cx c1x def
        /cy c1y def
        /radius r1 def
        np
        xInc 0 eq yInc 0 eq rInc 0 eq and and
        {
            0 getrampcolor
            cx cy radius 0 360 arc
            stroke
            NumSamples 1 sub getrampcolor
            cx cy radius 72 hires div add 0 360 arc
            0 setlinewidth
            stroke
        }{
            0
            numsteps
            {
                dup
                subsampling{round cvi}if
                getrampcolor
                cx cy radius 0 360 arc
                /cx cx xInc add def
                /cy cy yInc add def
                /radius radius rInc add def
                cx cy radius 360 0 arcn
                eofill
                rampIndxInc add
            }repeat
            pop
        }ifelse
        ext1
        {
            c2y r2 add r1 lt
            {
                c2x c2y r2 0 360 arc
                fill
            }{
                c2y r1 add r2 sub 0.0001 le
                {
                    c2x c2y r2 360 0 arcn
                    pathbbox
                    /aymax exch def
                    /axmax exch def
                    /aymin exch def
                    /axmin exch def
                    /bxMin xMin axmin min def
                    /byMin yMin aymin min def
                    /bxMax xMax axmax max def
                    /byMax yMax aymax max def
                    bxMin byMin moveto
                    bxMax byMin lineto
                    bxMax byMax lineto
                    bxMin byMax lineto
                    bxMin byMin lineto
                    eofill
                }{
                    c2x c2y r2 0 360 arc fill
                    r1 r2 eq
                    {
                        /p1x r2 neg def
                        /p1y c2y def
                        /p2x r2 def
                        /p2y c2y def
                        p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
                        fill
                    }{
                        /AA r2 r1 sub c2y div def
                        AA -1 eq
                        {/theta 89.99 def}
                        {/theta AA 1 AA dup mul sub sqrt div 1 atan def}
                        ifelse
                        /SS1 90 theta add dup sin exch cos div def
                        /p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
                        /p1y c2y p1x SS1 div sub def
                        /SS2 90 theta sub dup sin exch cos div def
                        /p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
                        /p2y c2y p2x SS2 div sub def
                        r1 r2 lt
                        {
                            /L1maxX p1x yMax p1y sub SS1 div add def
                            /L2maxX p2x yMax p2y sub SS2 div add def
                        }{
                            /L1maxX 0 def
                            /L2maxX 0 def
                        }ifelse
                        p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
                        L1maxX L1maxX p1x sub SS1 mul p1y add lineto
                        fill
                    }ifelse
                }ifelse
            }ifelse
        }if
        grestore
        grestore
        end
        end
        end
        }ifelse
    }bdf
    /GenStrips
    {
        40 dict begin
        /ColorSpaceFamily xdf
        /background xdf
        /ext1 xdf
        /ext0 xdf
        /BBox xdf
        /y2 xdf
        /x2 xdf
        /y1 xdf
        /x1 xdf
        /rampdict xdf
        /setinkoverprint where{pop/setinkoverprint{pop}def}if
        gsave
        BBox length 0 gt
        {
            np
            BBox 0 get BBox 1 get moveto
            BBox 2 get BBox 0 get sub 0 rlineto
            0 BBox 3 get BBox 1 get sub rlineto
            BBox 2 get BBox 0 get sub neg 0 rlineto
            closepath
            clip
            np
        }if
        x1 x2 eq
        {
            y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
        }{
            /slope y2 y1 sub x2 x1 sub div def
            /theta slope 1 atan def
            x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
            x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
        }
        ifelse
        gsave
        clippath
        x1 y1 translate
        theta rotate
        {pathbbox}stopped
        {0 0 0 0}if
        /yMax exch def
        /xMax exch def
        /yMin exch def
        /xMin exch def
        grestore
        xMax xMin eq yMax yMin eq or
        {
            grestore
            end
        }{
            rampdict begin
            20 dict begin
            background length 0 gt{background sssetbackground gsave clippath fill grestore}if
            gsave
            x1 y1 translate
            theta rotate
            /xStart 0 def
            /xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
            /ySpan yMax yMin sub def
            /numsteps NumSamples def
            /rampIndxInc 1 def
            /subsampling false def
            xStart 0 transform
            xEnd 0 transform
            3 -1 roll
            sub dup mul
            3 1 roll
            sub dup mul
            add 0.5 exp 72 div
            0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
            72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
            1 index 1 index lt{exch}if pop
            mul
            /numpix xdf
            numpix 0 ne
            {
                NumSamples numpix div 0.5 gt
                {
                    /numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
                    /rampIndxInc NumSamples 1 sub numsteps div def
                    /subsampling true def
                }if
            }if
            ext0
            {
                0 getrampcolor
                xMin xStart lt
                {
                    xMin yMin xMin neg ySpan rectfill
                }if
            }if
            /xInc xEnd xStart sub numsteps div def
            /x xStart def
            0
            numsteps
            {
                dup
                subsampling{round cvi}if
                getrampcolor
                x yMin xInc ySpan rectfill
                /x x xInc add def
                rampIndxInc add
            }repeat
            pop
            ext1{
                xMax xEnd gt
                {
                    xEnd yMin xMax xEnd sub ySpan rectfill
                }if
            }if
            grestore
            grestore
            end
            end
            end
        }ifelse
    }bdf
}def
/pt
{
    end
}def
/dt{
}def
/pgsv{
    //Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
    //Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
    /findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
    /setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
    gsave
    setcmykcolor currentgray 1 ne
    grestore
}def
/inRip_spot_has_ink
{
    dup//Adobe_AGM_Core/AGMCORE_name xddf
    convert_spot_to_process not
}def
/map255_to_range
{
    1 index sub
    3 -1 roll 255 div mul add
}def
/set_csa_crd
{
    /sep_colorspace_dict null AGMCORE_gput
    begin
        CSA get_csa_by_name setcolorspace_opt
        set_crd
    end
}
def
/map_csa
{
    currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
    {pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
    /sep_colorspace_dict AGMCORE_gget begin
        dup/sep_tint exch AGMCORE_gput
        TintProc
    end
}def
/setdevicencolor
{
    /devicen_colorspace_dict AGMCORE_gget begin
        Names length copy
        Names length 1 sub -1 0
        {
            /devicen_tints AGMCORE_gget 3 1 roll xpt
        }for
        TintProc
    end
}def
/sep_colorspace_proc
{
    /AGMCORE_tmp exch store
    /sep_colorspace_dict AGMCORE_gget begin
    currentdict/Components known{
        Components aload pop 
        TintMethod/Lab eq{
            2{AGMCORE_tmp mul NComponents 1 roll}repeat
            LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
        }{
            TintMethod/Subtractive eq{
                NComponents{
                    AGMCORE_tmp mul NComponents 1 roll
                }repeat
            }{
                NComponents{
                    1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
                }repeat
            }ifelse
        }ifelse
    }{
        ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
        aload pop
    }ifelse
    end
}def
/sep_colorspace_gray_proc
{
    /AGMCORE_tmp exch store
    /sep_colorspace_dict AGMCORE_gget begin
    GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
    end
}def
/sep_proc_name
{
    dup 0 get 
    dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
        pop[/DeviceGray]
        /sep_colorspace_gray_proc
    }{
        /sep_colorspace_proc
    }ifelse
}def
/setsepcolorspace
{
    current_spot_alias{
        dup begin
            Name map_alias{
                exch pop
            }if
        end
    }if
    dup/sep_colorspace_dict exch AGMCORE_gput
    begin
    CSA map_csa
    /AGMCORE_sep_special Name dup()eq exch(All)eq or store
    AGMCORE_avoid_L2_sep_space{
        [/Indexed MappedCSA sep_proc_name 255 exch 
            {255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
        ]setcolorspace_opt
        /TintProc{
            255 mul round cvi setcolor
        }bdf
    }{
        MappedCSA 0 get/DeviceCMYK eq 
        currentdict/Components known and 
        AGMCORE_sep_special not and{
            /TintProc[
                Components aload pop Name findcmykcustomcolor 
                /exch cvx/setcustomcolor cvx
            ]cvx bdf
        }{
            AGMCORE_host_sep Name(All)eq and{
                /TintProc{
                    1 exch sub setseparationgray 
                }bdf
            }{
                AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
                AGMCORE_host_sep or
                Name()eq and{
                    /TintProc[
                        MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
                            cvx/setcmykcolor cvx
                        }{
                            cvx/setgray cvx
                        }ifelse
                    ]cvx bdf
                }{
                    AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
                        /TintProc[
                            /dup cvx
                            MappedCSA sep_proc_name cvx exch
                            0 get/DeviceGray eq{
                                1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
                            }if
                            /Name cvx/findcmykcustomcolor cvx/exch cvx
                            AGMCORE_host_sep{
                                AGMCORE_is_cmyk_sep
                                /Name cvx 
                                /AGMCORE_IsSeparationAProcessColor load/exec cvx
                                /not cvx/and cvx 
                            }{
                                Name inRip_spot_has_ink not
                            }ifelse
                            [
                                /pop cvx 1
                            ]cvx/if cvx
                            /setcustomcolor cvx
                        ]cvx bdf
                    }{
                        /TintProc{setcolor}bdf
                        [/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
    }ifelse
    set_crd
    setsepcolor
    end
}def
/additive_blend
{
    3 dict begin
    /numarrays xdf
    /numcolors xdf
    0 1 numcolors 1 sub
        {
        /c1 xdf
        1
        0 1 numarrays 1 sub
            {
            1 exch add/index cvx
            c1/get cvx/mul cvx
            }for
        numarrays 1 add 1/roll cvx 
        }for
    numarrays[/pop cvx]cvx/repeat cvx
    end
}def
/subtractive_blend
{
    3 dict begin
    /numarrays xdf
    /numcolors xdf
    0 1 numcolors 1 sub
        {
        /c1 xdf
        1 1
        0 1 numarrays 1 sub
            {
            1 3 3 -1 roll add/index cvx 
            c1/get cvx/sub cvx/mul cvx
            }for
        /sub cvx
        numarrays 1 add 1/roll cvx
        }for
    numarrays[/pop cvx]cvx/repeat cvx
    end
}def
/exec_tint_transform
{
    /TintProc[
        /TintTransform cvx/setcolor cvx
    ]cvx bdf
    MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
    2 dict begin
    /names_index xdf
    /Names xdf
    1 1 1 1 Names names_index get findcmykcustomcolor
    /devicen_tints AGMCORE_gget names_index get setcustomcolor
    Names length{pop}repeat
    end
}bdf
/setdevicencolorspace
{
    dup/AliasedColorants known{false}{true}ifelse 
    current_spot_alias and{
        7 dict begin
        /names_index 0 def
        dup/names_len exch/Names get length def
        /new_names names_len array def
        /new_LookupTables names_len array def
        /alias_cnt 0 def
        dup/Names get
        {
            dup map_alias{
                exch pop
                dup/ColorLookup known{
                    dup begin
                    new_LookupTables names_index ColorLookup put
                    end
                }{
                    dup/Components known{
                        dup begin
                        new_LookupTables names_index Components put
                        end
                    }{
                        dup begin
                        new_LookupTables names_index[null null null null]put
                        end
                    }ifelse
                }ifelse
                new_names names_index 3 -1 roll/Name get put
                /alias_cnt alias_cnt 1 add def 
            }{
                /name xdf               
                new_names names_index name put
                dup/LookupTables known{
                    dup begin
                    new_LookupTables names_index LookupTables names_index get put
                    end
                }{
                    dup begin
                    new_LookupTables names_index[null null null null]put
                    end
                }ifelse
            }ifelse
            /names_index names_index 1 add def 
        }forall
        alias_cnt 0 gt{
            /AliasedColorants true def
            /lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
            0 1 names_len 1 sub{
                /names_index xdf
                new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
                    /AliasedColorants false def
                    exit
                }{
                    new_LookupTables names_index get 0 get null eq{
                        dup/Names get names_index get/name xdf
                        name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
                        or or or not{
                            /AliasedColorants false def
                            exit
                        }if
                    }if
                }ifelse
            }for
            lut_entry_len 1 eq{
                /AliasedColorants false def
            }if
            AliasedColorants{
                dup begin
                /Names new_names def
                /LookupTables new_LookupTables def
                /AliasedColorants true def
                /NComponents lut_entry_len def
                /TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
                /MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
                currentdict/TTTablesIdx known not{
                    /TTTablesIdx -1 def
                }if
                end
            }if
        }if
        end
    }if
    dup/devicen_colorspace_dict exch AGMCORE_gput
    begin
    currentdict/AliasedColorants known{
        AliasedColorants
    }{
        false
    }ifelse
    dup not{
        CSA map_csa
    }if
    /TintTransform load type/nulltype eq or{
        /TintTransform[
            0 1 Names length 1 sub
                {
                /TTTablesIdx TTTablesIdx 1 add def
                dup LookupTables exch get dup 0 get null eq
                    {
                    1 index
                    Names exch get
                    dup(Cyan)eq
                        {
                        pop exch
                        LookupTables length exch sub
                        /index cvx
                        0 0 0
                        }
                        {
                        dup(Magenta)eq
                            {
                            pop exch
                            LookupTables length exch sub
                            /index cvx
                            0/exch cvx 0 0
                            }{
                            (Yellow)eq
                                {
                                exch
                                LookupTables length exch sub
                                /index cvx
                                0 0 3 -1/roll cvx 0
                                }{
                                exch
                                LookupTables length exch sub
                                /index cvx
                                0 0 0 4 -1/roll cvx
                                }ifelse
                            }ifelse
                        }ifelse
                    5 -1/roll cvx/astore cvx
                    }{
                    dup length 1 sub
                    LookupTables length 4 -1 roll sub 1 add
                    /index cvx/mul cvx/round cvx/cvi cvx/get cvx
                    }ifelse
                    Names length TTTablesIdx add 1 add 1/roll cvx
                }for
            Names length[/pop cvx]cvx/repeat cvx
            NComponents Names length
            TintMethod/Subtractive eq
                {
                subtractive_blend
                }{
                additive_blend
                }ifelse
        ]cvx bdf
    }if
    AGMCORE_host_sep{
        Names convert_to_process{
            exec_tint_transform
        }
        {   
            currentdict/AliasedColorants known{
                AliasedColorants not
            }{
                false
            }ifelse
            5 dict begin
            /AvoidAliasedColorants xdf
            /painted? false def
            /names_index 0 def
            /names_len Names length def
            AvoidAliasedColorants{
                /currentspotalias current_spot_alias def
                false set_spot_alias
            }if
            Names{
                AGMCORE_is_cmyk_sep{
                    dup(Cyan)eq AGMCORE_cyan_plate and exch
                    dup(Magenta)eq AGMCORE_magenta_plate and exch
                    dup(Yellow)eq AGMCORE_yellow_plate and exch
                    (Black)eq AGMCORE_black_plate and or or or{
                        /devicen_colorspace_dict AGMCORE_gget/TintProc[
                            Names names_index/devn_makecustomcolor cvx
                        ]cvx ddf
                        /painted? true def
                    }if
                    painted?{exit}if
                }{
                    0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
                    /devicen_colorspace_dict AGMCORE_gget/TintProc[
                        Names names_index/devn_makecustomcolor cvx
                    ]cvx ddf
                    /painted? true def
                    exit
                    }if
                }ifelse
                /names_index names_index 1 add def
            }forall
            AvoidAliasedColorants{
                currentspotalias set_spot_alias
            }if
            painted?{
                /devicen_colorspace_dict AGMCORE_gget/names_index names_index put
            }{
                /devicen_colorspace_dict AGMCORE_gget/TintProc[
                    names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
                    0 0 0 0/setcmykcolor cvx
                ]cvx ddf
            }ifelse
            end
        }ifelse
    }
    {
        AGMCORE_in_rip_sep{
            Names convert_to_process not
        }{
            level3
        }ifelse
        {
            [/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
            /TintProc level3 not AGMCORE_in_rip_sep and{
                [
                    Names/length cvx[/pop cvx]cvx/repeat cvx
                ]cvx bdf
            }{
                {setcolor}bdf
            }ifelse
        }{
            exec_tint_transform
        }ifelse
    }ifelse
    set_crd
    /AliasedColorants false def
    end
}def
/setindexedcolorspace
{
    dup/indexed_colorspace_dict exch AGMCORE_gput
    begin
        currentdict/CSDBase known{
            CSDBase/CSD get_res begin
            currentdict/Names known{
                currentdict devncs
            }{
                1 currentdict sepcs
            }ifelse
            AGMCORE_host_sep{
                4 dict begin
                /compCnt/Names where{pop Names length}{1}ifelse def
                /NewLookup HiVal 1 add string def
                0 1 HiVal{
                    /tableIndex xdf
                    Lookup dup type/stringtype eq{
                        compCnt tableIndex map_index
                    }{
                        exec
                    }ifelse
                    /Names where{
                        pop setdevicencolor
                    }{
                        setsepcolor
                    }ifelse
                    currentgray
                    tableIndex exch
                    255 mul cvi 
                    NewLookup 3 1 roll put
                }for
                [/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
                end
            }{
                level3
                {
                    currentdict/Names known{
                        [/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
                    }{
                        [/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
                    }ifelse
                }{
                [/Indexed MappedCSA HiVal
                    [
                    currentdict/Names known{
                        Lookup dup type/stringtype eq
                            {/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
                            {/exec cvx}ifelse
                            /TintTransform load/exec cvx
                    }{
                        Lookup dup type/stringtype eq
                            {/exch cvx/get cvx 255/div cvx}
                            {/exec cvx}ifelse
                            CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
                    }ifelse
                    ]cvx
                ]setcolorspace_opt
                }ifelse
            }ifelse
            end
            set_crd
        }
        {
            CSA map_csa
            AGMCORE_host_sep level2 not and{
                0 0 0 0 setcmykcolor
            }{
                [/Indexed MappedCSA 
                level2 not has_color not and{
                    dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
                        pop[/DeviceGray]
                    }if
                    HiVal GrayLookup
                }{
                    HiVal 
                    currentdict/RangeArray known{
                        {
                            /indexed_colorspace_dict AGMCORE_gget begin
                            Lookup exch 
                            dup HiVal gt{
                                pop HiVal
                            }if
                            NComponents mul NComponents getinterval{}forall
                            NComponents 1 sub -1 0{
                                RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
                                NComponents 1 roll
                            }for
                            end
                        }bind
                    }{
                        Lookup
                    }ifelse
                }ifelse
                ]setcolorspace_opt
                set_crd
            }ifelse
        }ifelse
    end
}def
/setindexedcolor
{
    AGMCORE_host_sep{
        /indexed_colorspace_dict AGMCORE_gget
        begin
        currentdict/CSDBase known{
            CSDBase/CSD get_res begin
            currentdict/Names known{
                map_indexed_devn
                devn
            }
            {
                Lookup 1 3 -1 roll map_index
                sep
            }ifelse
            end
        }{
            Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
            map_index
            MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
        }ifelse
        end
    }{
        level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
            /indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
            map_indexed_devn
            devn
            end
        }
        {
            setcolor
        }ifelse
    }ifelse
}def
/ignoreimagedata
{
    currentoverprint not{
        gsave
        dup clonedict begin
        1 setgray
        /Decode[0 1]def
        /DataSource<FF>def
        /MultipleDataSources false def
        /BitsPerComponent 8 def
        currentdict end
        systemdict/image gx
        grestore
        }if
    consumeimagedata
}def
/add_res
{
    dup/CSD eq{
        pop 
        //Adobe_AGM_Core begin
        /AGMCORE_CSD_cache load 3 1 roll put
        end
    }{
        defineresource pop
    }ifelse
}def
/del_res
{
    {
        aload pop exch
        dup/CSD eq{
            pop 
            {//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
        }{
            exch
            {1 index undefineresource}forall
            pop
        }ifelse
    }forall
}def
/get_res
{
    dup/CSD eq{
        pop
        dup type dup/nametype eq exch/stringtype eq or{
            AGMCORE_CSD_cache exch get
        }if
    }{
        findresource
    }ifelse
}def
/get_csa_by_name
{
    dup type dup/nametype eq exch/stringtype eq or{
        /CSA get_res
    }if
}def
/paintproc_buf_init
{
    /count get 0 0 put
}def
/paintproc_buf_next
{
    dup/count get dup 0 get
    dup 3 1 roll
    1 add 0 xpt
    get             
}def
/cachepaintproc_compress
{
    5 dict begin
    currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
    /ppdict 20 dict def
    /string_size 16000 def
    /readbuffer string_size string def
    currentglobal true setglobal 
    ppdict 1 array dup 0 1 put/count xpt
    setglobal
    /LZWFilter 
    {
        exch
        dup length 0 eq{
            pop
        }{
            ppdict dup length 1 sub 3 -1 roll put
        }ifelse
        {string_size}{0}ifelse string
    }/LZWEncode filter def
    {       
        ReadFilter readbuffer readstring
        exch LZWFilter exch writestring
        not{exit}if
    }loop
    LZWFilter closefile
    ppdict              
    end
}def
/cachepaintproc
{
    2 dict begin
    currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
    /ppdict 20 dict def
    currentglobal true setglobal 
    ppdict 1 array dup 0 1 put/count xpt
    setglobal
    {
        ReadFilter 16000 string readstring exch
        ppdict dup length 1 sub 3 -1 roll put
        not{exit}if
    }loop
    ppdict dup dup length 1 sub()put                    
    end 
}def
/make_pattern
{
    exch clonedict exch
    dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
    exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
    exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
    matrix translate exch matrix concatmatrix
             1 index begin
        BBox 0 get XStep div cvi XStep mul/xshift exch neg def
        BBox 1 get YStep div cvi YStep mul/yshift exch neg def
        BBox 0 get xshift add
        BBox 1 get yshift add
        BBox 2 get xshift add
        BBox 3 get yshift add
        4 array astore
        /BBox exch def
        [xshift yshift/translate load null/exec load]dup
        3/PaintProc load put cvx/PaintProc exch def
        end
    gsave 0 setgray
    makepattern
    grestore
}def
/set_pattern
{
    dup/PatternType get 1 eq{
        dup/PaintType get 1 eq{
            currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
        }if
    }if
    setpattern
}def
/setcolorspace_opt
{
    dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
    currentcolorrendering/RenderingIntent known{
        currentcolorrendering/RenderingIntent get
    }
    {
        Intent/AbsoluteColorimetric eq 
        {
            /absolute_colorimetric_crd AGMCORE_gget dup null eq
        }
        {
            Intent/RelativeColorimetric eq
            {
                /relative_colorimetric_crd AGMCORE_gget dup null eq
            }
            {
                Intent/Saturation eq
                {
                    /saturation_crd AGMCORE_gget dup null eq
                }
                {
                    /perceptual_crd AGMCORE_gget dup null eq
                }ifelse
            }ifelse
        }ifelse
        {
            pop null    
        }
        {
            /RenderingIntent known{null}{Intent}ifelse
        }ifelse
    }ifelse
    Intent ne{
        Intent/ColorRendering{findresource}stopped
        {
            pop pop systemdict/findcolorrendering known
            {
                Intent findcolorrendering
                {
                    /ColorRendering findresource true exch
                }
                {
                    /ColorRendering findresource
                    product(Xerox Phaser 5400)ne
                    exch
                }ifelse
                dup Intent/AbsoluteColorimetric eq 
                {
                    /absolute_colorimetric_crd exch AGMCORE_gput
                }
                {
                    Intent/RelativeColorimetric eq
                    {
                        /relative_colorimetric_crd exch AGMCORE_gput
                    }
                    {
                        Intent/Saturation eq
                        {
                            /saturation_crd exch AGMCORE_gput
                        }
                        {
                            Intent/Perceptual eq
                            {
                                /perceptual_crd exch AGMCORE_gput
                            }
                            {
                                pop
                            }ifelse
                        }ifelse
                    }ifelse
                }ifelse
                1 index{exch}{pop}ifelse
            }
            {false}ifelse
        }
        {true}ifelse
        {
            dup begin
            currentdict/TransformPQR known{
                currentdict/TransformPQR get aload pop
                3{{}eq 3 1 roll}repeat or or
            }
            {true}ifelse
            currentdict/MatrixPQR known{
                currentdict/MatrixPQR get aload pop
                1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
                0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
                0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
                and and and and and and and and
            }
            {true}ifelse
            end
            or
            {
                clonedict begin
                /TransformPQR[
                    {4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
                    3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
                    {4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
                    3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
                    {4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
                    3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
                ]def
                /MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
                /RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
                currentdict end
            }if
            setcolorrendering_opt
        }if     
    }if
}def
/set_crd
{
    AGMCORE_host_sep not level2 and{
        currentdict/ColorRendering known{
            ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
        }{
            currentdict/Intent known{
                updatecolorrendering
            }if
        }ifelse
        currentcolorspace dup type/arraytype eq
            {0 get}if
        /DeviceRGB eq
            {
            currentdict/UCR known
                {/UCR}{/AGMCORE_currentucr}ifelse
            load setundercolorremoval
            currentdict/BG known 
                {/BG}{/AGMCORE_currentbg}ifelse
            load setblackgeneration
            }if
    }if
}def
/set_ucrbg
{
    dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
    dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
    dup currentcolorrendering eq{
        pop
    }{
        clonedict
        begin
            /Intent Intent def
            currentdict
        end
        setcolorrendering
    }ifelse
}def
/cpaint_gcomp
{
    convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
    //Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
    {
        (%end_cpaint_gcomp)flushinput
    }if
}def
/cpaint_gsep
{
    //Adobe_AGM_Core/AGMCORE_ConvertToProcess get
    {   
        (%end_cpaint_gsep)flushinput
    }if
}def
/cpaint_gend
{np}def
/T1_path
{
    currentfile token pop currentfile token pop mo
    {
        currentfile token pop dup type/stringtype eq
            {pop exit}if 
        0 exch rlineto 
        currentfile token pop dup type/stringtype eq
            {pop exit}if 
        0 rlineto
    }loop
}def
/T1_gsave
    level3
    {/clipsave}
    {/gsave}ifelse
    load def
/T1_grestore
    level3
    {/cliprestore}
    {/grestore}ifelse 
    load def
/set_spot_alias_ary
{
    dup inherit_aliases
    //Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
    dup inherit_aliases
    dup length
    /AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
    array
    //Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
    /AGMCORE_SpotAliasAry where{
        pop
        AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
        AGMCORE_SpotAliasAry length
    }{0}ifelse
    AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
    true set_spot_alias
}def
/inherit_aliases
{
    {dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
    /AGMCORE_SpotAliasAry2 where{
        /AGMCORE_current_spot_alias 3 -1 roll put
    }{
        pop
    }ifelse
}def
/current_spot_alias
{
    /AGMCORE_SpotAliasAry2 where{
        /AGMCORE_current_spot_alias get
    }{
        false
    }ifelse
}def
/map_alias
{
    /AGMCORE_SpotAliasAry2 where{
        begin
            /AGMCORE_name xdf
            false   
            AGMCORE_SpotAliasAry2{
                dup/Name get AGMCORE_name eq{
                    /CSD get/CSD get_res
                    exch pop true
                    exit
                }{
                    pop
                }ifelse
            }forall
        end
    }{
        pop false
    }ifelse
}bdf
/spot_alias
{
    true set_spot_alias
    /AGMCORE_&setcustomcolor AGMCORE_key_known not{
        //Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
    }if
    /customcolor_tint 1 AGMCORE_gput
    //Adobe_AGM_Core begin
    /setcustomcolor
    {
        //Adobe_AGM_Core begin
        dup/customcolor_tint exch AGMCORE_gput
        1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
        current_spot_alias and{1 index 4 get map_alias}{false}ifelse
        {
            false set_spot_alias
            /sep_colorspace_dict AGMCORE_gget null ne{
                exch pop/sep_tint AGMCORE_gget exch
            }if
            mark 3 1 roll
            setsepcolorspace
            counttomark 0 ne{
                setsepcolor
            }if
            pop
            pop
            true set_spot_alias
        }{
            AGMCORE_&setcustomcolor
        }ifelse
        end
    }bdf
    end
}def
/begin_feature
{
    Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
    count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
    {Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
    2 dict begin
    /spd/setpagedevice load def
    /setpagedevice{get_gstate spd set_gstate}def
    stopped{$error/newerror false put}if
    end
    count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
    countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
    {Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
    //Adobe_AGM_Core begin
    /AGMCORE_inverting exch def
    level2{
        currentpagedevice/NegativePrint known AGMCORE_distilling not and{
            currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
                true begin_feature true{
                        <</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
                }end_feature
            }if
            /AGMCORE_inverting false def
        }if
    }if
    AGMCORE_inverting{
        [{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
        AGMCORE_distilling{
            erasepage
        }{
            gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
            /AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
        }ifelse
    }if
    end
}def
/lw_save_restore_override{
    /md where{
        pop
        md begin
        initializepage
        /initializepage{}def
        /pmSVsetup{}def
        /endp{}def
        /pse{}def
        /psb{}def
        /orig_showpage where
            {pop}
            {/orig_showpage/showpage load def}
        ifelse
        /showpage{orig_showpage gR}def
        end
    }if
}def
/pscript_showpage_override{
    /NTPSOct95 where
    {
        begin
        showpage
        save
        /showpage/restore load def
        /restore{exch pop}def
        end
    }if
}def
/driver_media_override
{
    /md where{
        pop
        md/initializepage known{
            md/initializepage{}put
        }if
        md/rC known{
            md/rC{4{pop}repeat}put
        }if
    }if
    /mysetup where{
        /mysetup[1 0 0 1 0 0]put
    }if
    Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
    level2
        {Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
    /PrepsDict where
        {pop}
        {
        Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
        Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
            {
            Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
            Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
            }if
            {
            Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
            }if
        }ifelse
}def
AGMCORE_err_strings begin
    /AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
    /AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
    /AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
    {/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
    systemdict/languagelevel known dup
        {pop systemdict/languagelevel get 2 ge}
    if def
Level2? not
    {
    /currentglobal false def
    /setglobal/pop load def
    /gcheck{pop false}bind def
    /currentpacking false def
    /setpacking/pop load def
    /SharedFontDirectory 0 dict def
    }
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
    {2 copy 10 dict put}
if
get
     begin
    /@opStackCountByLevel 32 dict def
    /@opStackLevel 0 def
    /@dictStackCountByLevel 32 dict def
    /@dictStackLevel 0 def
     end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
    {userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
    {userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
    {
    dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
    3 1 roll put
    }bind def
/ct_VMDictUndef
    {
    dup Adobe_CoolType_GVMFonts exch known
        {Adobe_CoolType_GVMFonts exch undef}
        {
            dup Adobe_CoolType_LVMFonts exch known
            {Adobe_CoolType_LVMFonts exch undef}
            {pop}
            ifelse
        }ifelse
    }bind def
/ct_str1 1 string def
/ct_xshow
{
    /_ct_na exch def
    /_ct_i 0 def
    currentpoint
    /_ct_y exch def
    /_ct_x exch def
    {
        pop pop
        ct_str1 exch 0 exch put
        ct_str1 show
        {_ct_na _ct_i get}stopped 
        {pop pop}
        {
            _ct_x _ct_y moveto
            0
            rmoveto
        }
        ifelse
        /_ct_i _ct_i 1 add def
        currentpoint
        /_ct_y exch def
        /_ct_x exch def
    }
    exch
    @cshow
}bind def
/ct_yshow
{
    /_ct_na exch def
    /_ct_i 0 def
    currentpoint
    /_ct_y exch def
    /_ct_x exch def
    {
        pop pop
        ct_str1 exch 0 exch put
        ct_str1 show
        {_ct_na _ct_i get}stopped 
        {pop pop}
        {
            _ct_x _ct_y moveto
            0 exch
            rmoveto
        }
        ifelse
        /_ct_i _ct_i 1 add def
        currentpoint
        /_ct_y exch def
        /_ct_x exch def
    }
    exch
    @cshow
}bind def
/ct_xyshow
{
    /_ct_na exch def
    /_ct_i 0 def
    currentpoint
    /_ct_y exch def
    /_ct_x exch def
    {
        pop pop
        ct_str1 exch 0 exch put
        ct_str1 show
        {_ct_na _ct_i get}stopped 
        {pop pop}
        {
            {_ct_na _ct_i 1 add get}stopped 
            {pop pop pop}
            {
                _ct_x _ct_y moveto
                rmoveto
            }
            ifelse
        }
        ifelse
        /_ct_i _ct_i 2 add def
        currentpoint
        /_ct_y exch def
        /_ct_x exch def
    }
    exch
    @cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
    1 index/Encoding get exch get
    1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
    exch begin
    GlyphProcs exch get exec
    end
}bind def
}bind def
setglobal
/@_SaveStackLevels
    {
    Adobe_CoolType_Data
        begin
        /@vmState currentglobal def false setglobal
        @opStackCountByLevel
        @opStackLevel
        2 copy known not
            {
            2 copy
            3 dict dup/args
            7 index
            5 add array put
            put get
            }
            {
            get dup/args get dup length 3 index lt
                {
                dup length 5 add array exch
                1 index exch 0 exch putinterval
                1 index exch/args exch put
                }
                {pop}
            ifelse
            }
        ifelse
            begin
            count 1 sub
            1 index lt
                {pop count}
            if
            dup/argCount exch def
            dup 0 gt
                {
                args exch 0 exch getinterval 
            astore pop
                }
                {pop}
            ifelse
            count
            /restCount exch def
            end
        /@opStackLevel @opStackLevel 1 add def
        countdictstack 1 sub
        @dictStackCountByLevel exch @dictStackLevel exch put
        /@dictStackLevel @dictStackLevel 1 add def
        @vmState setglobal
        end
    }bind def
/@_RestoreStackLevels
    {
    Adobe_CoolType_Data
        begin
        /@opStackLevel @opStackLevel 1 sub def
        @opStackCountByLevel @opStackLevel get
            begin
            count restCount sub dup 0 gt
                {{pop}repeat}
                {pop}
            ifelse
            args 0 argCount getinterval{}forall
            end
        /@dictStackLevel @dictStackLevel 1 sub def
        @dictStackCountByLevel @dictStackLevel get
        end
    countdictstack exch sub dup 0 gt
        {{end}repeat}
        {pop}
    ifelse
    }bind def
/@_PopStackLevels
    {
    Adobe_CoolType_Data
        begin
        /@opStackLevel @opStackLevel 1 sub def
        /@dictStackLevel @dictStackLevel 1 sub def
        end
    }bind def
/@Raise
    {
    exch cvx exch errordict exch get exec
    stop
    }bind def
/@ReRaise
    {
    cvx $error/errorname get errordict exch get exec
    stop
    }bind def
/@Stopped
    {
    0 @#Stopped
    }bind def
/@#Stopped
    {
    @_SaveStackLevels
    stopped
        {@_RestoreStackLevels true}
        {@_PopStackLevels false}
    ifelse
    }bind def
/@Arg
    {
    Adobe_CoolType_Data
        begin
        @opStackCountByLevel @opStackLevel 1 sub get
        begin
        args exch
        argCount 1 sub exch sub get
        end
        end
    }bind def
currentglobal true setglobal
/CTHasResourceForAllBug
    Level2?
        {
        1 dict dup
                /@shouldNotDisappearDictValue true def
                Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
                begin
                count @_SaveStackLevels
                    {(*){pop stop}128 string/Category resourceforall}
                stopped pop
                @_RestoreStackLevels
                currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
                    {
                         /@shouldNotDisappearDictValue known
                                {
                                         {
                                                end
                                                currentdict 1 index eq
                                                    {pop exit}
                                                if
                                         }
                                     loop
                                }
                         if
                    }
                    {
                         pop
                         end
                    }
                ifelse
        }
        {false}
    ifelse
    def
true setglobal
/CTHasResourceStatusBug
    Level2?
        {
        mark
            {/steveamerige/Category resourcestatus}
        stopped
            {cleartomark true}
            {cleartomark currentglobal not}
        ifelse
        }
        {false}
    ifelse
    def
setglobal
/CTResourceStatus
        {
        mark 3 1 roll
        /Category findresource
            begin
            ({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
                {cleartomark false}
                {{3 2 roll pop true}{cleartomark false}ifelse}
            ifelse
            end
        }bind def
/CTWorkAroundBugs
    {
    Level2?
        {
        /cid_PreLoad/ProcSet resourcestatus
            {
            pop pop
            currentglobal
            mark
                {
                (*)
                    {
                    dup/CMap CTHasResourceStatusBug
                        {CTResourceStatus}
                        {resourcestatus}
                    ifelse
                        {
                        pop dup 0 eq exch 1 eq or
                            {
                            dup/CMap findresource gcheck setglobal
                            /CMap undefineresource
                            }
                            {
                            pop CTHasResourceForAllBug
                                {exit}
                                {stop}
                            ifelse
                            }
                        ifelse
                        }
                        {pop}
                    ifelse
                    }
                128 string/CMap resourceforall
                }
            stopped
                {cleartomark}
            stopped pop
            setglobal
            }
        if
        }
    if
    }bind def
/ds
    {
    Adobe_CoolType_Core
        begin
        CTWorkAroundBugs
        /mo/moveto load def
        /nf/newencodedfont load def
        /msf{makefont setfont}bind def
        /uf{dup undefinefont ct_VMDictUndef}bind def
        /ur/undefineresource load def
        /chp/charpath load def
        /awsh/awidthshow load def
        /wsh/widthshow load def
        /ash/ashow load def
        /@xshow/xshow load def
        /@yshow/yshow load def
        /@xyshow/xyshow load def
        /@cshow/cshow load def
        /sh/show load def
        /rp/repeat load def
        /.n/.notdef def
        end
        currentglobal false setglobal
     userdict/Adobe_CoolType_Data 2 copy known not
         {2 copy 10 dict put}
        if
        get
        begin
        /AddWidths? false def
        /CC 0 def
        /charcode 2 string def
        /@opStackCountByLevel 32 dict def
        /@opStackLevel 0 def
        /@dictStackCountByLevel 32 dict def
        /@dictStackLevel 0 def
        /InVMFontsByCMap 10 dict def
        /InVMDeepCopiedFonts 10 dict def
        end
        setglobal
    }bind def
/dt
    {
    currentdict Adobe_CoolType_Core eq
        {end}
    if
    }bind def
/ps
    {
    Adobe_CoolType_Core begin
    Adobe_CoolType_GVMFonts begin
    Adobe_CoolType_LVMFonts begin
    SharedFontDirectory begin
    }bind def
/pt
    {
    end
    end
    end
    end
    }bind def
/unload
    {
    systemdict/languagelevel known
        {
        systemdict/languagelevel get 2 ge
            {
            userdict/Adobe_CoolType_Core 2 copy known
                {undef}
                {pop pop}
            ifelse
            }
        if
        }
    if
    }bind def
/ndf
    {
    1 index where
        {pop pop pop}
        {dup xcheck{bind}if def}
    ifelse
    }def
/findfont systemdict
    begin
    userdict
        begin
        /globaldict where{/globaldict get begin}if
            dup where pop exch get
        /globaldict where{pop end}if
        end
    end
Adobe_CoolType_Core_Defined
    {/systemfindfont exch def}
    {
    /findfont 1 index def
    /systemfindfont exch def
    }
ifelse
/undefinefont
    {pop}ndf
/copyfont
    {
    currentglobal 3 1 roll
    1 index gcheck setglobal
    dup null eq{0}{dup length}ifelse
    2 index length add 1 add dict
        begin
        exch
            {
            1 index/FID eq
                {pop pop}
                {def}
            ifelse
            }
        forall
        dup null eq
            {pop}
            {{def}forall}
        ifelse
        currentdict
        end
    exch setglobal
    }bind def
/copyarray
    {
    currentglobal exch
    dup gcheck setglobal
    dup length array copy
    exch setglobal
    }bind def
/newencodedfont
    {
    currentglobal
        {
        SharedFontDirectory 3 index known
            {SharedFontDirectory 3 index get/FontReferenced known}
            {false}
        ifelse
        }
        {
        FontDirectory 3 index known
            {FontDirectory 3 index get/FontReferenced known}
            {
            SharedFontDirectory 3 index known
                {SharedFontDirectory 3 index get/FontReferenced known}
                {false}
            ifelse
            }
        ifelse
        }
    ifelse
    dup
        {
        3 index findfont/FontReferenced get
        2 index dup type/nametype eq
            {findfont}
        if ne
            {pop false}
        if
        }
    if
    dup
        {
        1 index dup type/nametype eq
            {findfont}
         if
        dup/CharStrings known
            {
            /CharStrings get length
            4 index findfont/CharStrings get length
            ne
                {
                pop false
                }
            if 
            }
            {pop}
            ifelse
        }
    if
        {
        pop
        1 index findfont
        /Encoding get exch
        0 1 255
            {2 copy get 3 index 3 1 roll put}
        for
        pop pop pop
        }
        {
        currentglobal
     4 1 roll
        dup type/nametype eq
         {findfont}
     if
     dup gcheck setglobal
        dup dup maxlength 2 add dict
            begin
            exch
                {
                1 index/FID ne
                2 index/Encoding ne and
                    {def}
                    {pop pop}
                ifelse
                }
            forall
            /FontReferenced exch def
            /Encoding exch dup length array copy def
            /FontName 1 index dup type/stringtype eq{cvn}if def dup
            currentdict
            end
        definefont ct_VMDictPut
        setglobal
        }
    ifelse
    }bind def
/SetSubstituteStrategy
    {
    $SubstituteFont
        begin
        dup type/dicttype ne
            {0 dict}
        if
        currentdict/$Strategies known
            {
            exch $Strategies exch 
            2 copy known
                {
                get
                2 copy maxlength exch maxlength add dict
                    begin
                    {def}forall
                    {def}forall
                    currentdict
                    dup/$Init known
                        {dup/$Init get exec}
                    if
                    end
                /$Strategy exch def
                }
                {pop pop pop}
            ifelse
            }
            {pop pop}
        ifelse
        end
    }bind def
/scff
    {
    $SubstituteFont
        begin
        dup type/stringtype eq
            {dup length exch}
            {null}
        ifelse
        /$sname exch def
        /$slen exch def
        /$inVMIndex
            $sname null eq
                {
                1 index $str cvs
                dup length $slen sub $slen getinterval cvn
                }
                {$sname}
            ifelse def
        end
        {findfont}
    @Stopped
        {
        dup length 8 add string exch
        1 index 0(BadFont:)putinterval
        1 index exch 8 exch dup length string cvs putinterval cvn
            {findfont}
        @Stopped
            {pop/Courier findfont}
        if
        }
    if
    $SubstituteFont
        begin
        /$sname null def
        /$slen 0 def
        /$inVMIndex null def
        end
    }bind def
/isWidthsOnlyFont
    {
    dup/WidthsOnly known
        {pop pop true}
        {
        dup/FDepVector known
            {/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
            {
            dup/FDArray known
                {/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
                {pop}
            ifelse
            }
        ifelse
        }
    ifelse
    }bind def
/ct_StyleDicts 4 dict dup begin
         /Adobe-Japan1 4 dict dup begin
                     Level2?
                                {
                                /Serif
                                /HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
                                {pop pop/HeiseiMin-W3}
                                {
                            /CIDFont/Category resourcestatus
                            {
                                pop pop
                                /HeiseiMin-W3/CIDFont resourcestatus
                                {pop pop/HeiseiMin-W3}
                                {/Ryumin-Light}
                                ifelse
                            }
                            {/Ryumin-Light}
                            ifelse
                                }
                                ifelse
                                def
                                /SansSerif
                                /HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
                                {pop pop/HeiseiKakuGo-W5}
                                {
                            /CIDFont/Category resourcestatus
                            {
                                pop pop
                                /HeiseiKakuGo-W5/CIDFont resourcestatus
                                {pop pop/HeiseiKakuGo-W5}
                                {/GothicBBB-Medium}
                                ifelse
                            }
                            {/GothicBBB-Medium}
                            ifelse
                                }
                                ifelse
                                def
                                /HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
                                {pop pop/HeiseiMaruGo-W4}
                                {
                            /CIDFont/Category resourcestatus
                            {
                                pop pop
                                /HeiseiMaruGo-W4/CIDFont resourcestatus
                                {pop pop/HeiseiMaruGo-W4}
                                {
                                    /Jun101-Light-RKSJ-H/Font resourcestatus
                                    {pop pop/Jun101-Light}
                                    {SansSerif}
                                    ifelse
                                }
                                ifelse
                            }
                            {
                                /Jun101-Light-RKSJ-H/Font resourcestatus
                                {pop pop/Jun101-Light}
                                {SansSerif}
                                ifelse
                            }
                            ifelse
                                }
                                ifelse
                                /RoundSansSerif exch def
                                /Default Serif def
                                }
                                {
                                /Serif/Ryumin-Light def
                                /SansSerif/GothicBBB-Medium def
                                {
                                (fonts/Jun101-Light-83pv-RKSJ-H)status
                                }stopped
                                {pop}{
                                         {pop pop pop pop/Jun101-Light}
                                         {SansSerif}
                                         ifelse
                                         /RoundSansSerif exch def
                                }ifelse
                                /Default Serif def
                                }
                     ifelse
         end
         def
         /Adobe-Korea1 4 dict dup begin
                    /Serif/HYSMyeongJo-Medium def
                    /SansSerif/HYGoThic-Medium def
                    /RoundSansSerif SansSerif def
                    /Default Serif def
         end
         def
         /Adobe-GB1 4 dict dup begin
                    /Serif/STSong-Light def
                    /SansSerif/STHeiti-Regular def
                    /RoundSansSerif SansSerif def
                    /Default Serif def
         end
         def
         /Adobe-CNS1 4 dict dup begin
                    /Serif/MKai-Medium def
                    /SansSerif/MHei-Medium def
                    /RoundSansSerif SansSerif def
                    /Default Serif def
         end
         def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
    {
    stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
    0 0
    }bind def
/ct_Type0WidthProc 
    {
     dup stringwidth 0 0 moveto 
     2 index true charpath pathbbox
     0 -1 
     7 index 2 div .88 
     setcachedevice2
     pop
    0 0
    }bind def
/ct_Type0WMode1WidthProc 
    {
     dup stringwidth 
     pop 2 div neg -0.88
    2 copy
    moveto 
    0 -1
     5 -1 roll true charpath pathbbox
     setcachedevice
    }bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
     11 dict begin
        /FontType 3 def
        /FontMatrix[1 0 0 1 0 0]def
        /FontBBox[0 0 1 1]def
        /Encoding cHexEncoding def 
        /_setwidthProc/ct_BoldRomanWidthProc load def
        /_bcstr1 1 string def
        /BuildChar
        {
            exch begin
                _basefont setfont
                _bcstr1 dup 0 4 -1 roll put
                dup 
                _setwidthProc
                3 copy 
                moveto              
                show
                _basefonto setfont
                moveto
                show
            end
        }bind def
         currentdict
     end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
    /Identity-H/CMap resourcestatus
    {
        pop pop
    }
    {
        /CIDInit/ProcSet findresource begin
         12 dict begin
         begincmap
         /CIDSystemInfo 3 dict dup begin
             /Registry(Adobe)def
             /Ordering(Identity)def
             /Supplement 0 def
         end def
         /CMapName/Identity-H def
         /CMapVersion 1.000 def
         /CMapType 1 def
         1 begincodespacerange
         <0000><FFFF>
         endcodespacerange
         1 begincidrange
         <0000><FFFF>0
         endcidrange
         endcmap
         CMapName currentdict/CMap defineresource pop
         end
         end
     }
     ifelse
}
def
/ct_BoldBaseCIDFont 
     11 dict begin
        /CIDFontType 1 def
        /CIDFontName/ct_BoldBaseCIDFont def
        /FontMatrix[1 0 0 1 0 0]def
        /FontBBox[0 0 1 1]def
        /_setwidthProc/ct_Type0WidthProc load def
        /_bcstr2 2 string def
        /BuildGlyph
        {
            exch begin       
                _basefont setfont
                _bcstr2 1 2 index 256 mod put
                _bcstr2 0 3 -1 roll 256 idiv put
                _bcstr2 dup _setwidthProc        
                3 copy 
                moveto
                show
                _basefonto setfont
                moveto
                show
            end
        }bind def
         currentdict
     end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
    {
        1 index/FID ne 2 index/UniqueID ne and
        {def}{pop pop}ifelse
    }forall
}bind def
/ct_Type0CopyFont 
{
    exch
    dup length dict
    begin
    ct_CopyFont
    [
    exch
    FDepVector 
    {
         dup/FontType get 0 eq
        {   
        1 index ct_Type0CopyFont 
        /_ctType0 exch definefont
        }
        {
        /_ctBaseFont exch
        2 index exec
        }
         ifelse 
         exch
    }
    forall 
    pop
    ]               
    /FDepVector exch def
    currentdict
    end
}bind def
/ct_MakeBoldFont
{
     dup/ct_SyntheticBold known
    {
        dup length 3 add dict begin 
        ct_CopyFont 
        /ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
        /ct_SyntheticBold true def
        currentdict 
        end 
        definefont
    }
    {
        dup dup length 3 add dict
        begin
            ct_CopyFont
            /PaintType 2 def
            /StrokeWidth .03 0 FontMatrix idtransform pop def
            /dummybold currentdict
        end
        definefont
        dup/FontType get dup 9 ge exch 11 le and 
        {
            ct_BoldBaseCIDFont
            dup length 3 add dict copy begin
            dup/CIDSystemInfo get/CIDSystemInfo exch def
            ct_DefineIdentity-H
            /_Type0Identity/Identity-H 3 -1 roll[exch]composefont
            /_basefont exch def
            /_Type0Identity/Identity-H 3 -1 roll[exch]composefont
            /_basefonto exch def
            currentdict
            end
            /CIDFont defineresource
        }
        {
            ct_BoldBaseFont
            dup length 3 add dict copy begin
            /_basefont exch def
            /_basefonto exch def
            currentdict
            end
            definefont
        }
        ifelse
    }
    ifelse
}bind def
/ct_MakeBold{
    1 index 
    1 index
    findfont
    currentglobal 5 1 roll
    dup gcheck setglobal
        dup
         /FontType get 0 eq
            {
                dup/WMode known{dup/WMode get 1 eq}{false}ifelse
                version length 4 ge
                and
                    {version 0 4 getinterval cvi 2015 ge}
                    {true}
                ifelse 
                    {/ct_Type0WidthProc}
                    {/ct_Type0WMode1WidthProc}
                ifelse
                ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
                        {ct_MakeBoldFont}ct_Type0CopyFont definefont
            }
            {
                dup/_fauxfont known not 1 index/SubstMaster known not and
                {
                     ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
                     ct_MakeBoldFont 
                }
                {
                2 index 2 index eq
                    {exch pop   }
                    {
                        dup length dict begin
                        ct_CopyFont
                        currentdict
                        end
                        definefont 
                    }
                ifelse
                }
            ifelse
            }
         ifelse
         pop pop pop
         setglobal
}bind def
/?str1 256 string def
/?set
    {
    $SubstituteFont
        begin
        /$substituteFound false def
        /$fontname 1 index def
        /$doSmartSub false def
        end
    dup
     findfont
    $SubstituteFont
        begin
        $substituteFound
            {false}
            {
            dup/FontName known
                {
                dup/FontName get $fontname eq
                1 index/DistillerFauxFont known not and
                /currentdistillerparams where
                    {pop false 2 index isWidthsOnlyFont not and}
                if
                }
                {false}
            ifelse
            }
        ifelse
        exch pop
        /$doSmartSub true def
        end
        {
        5 1 roll pop pop pop pop
        findfont
        }
        {
        1 index
        findfont
        dup/FontType get 3 eq
        {
            6 1 roll pop pop pop pop pop false
        }
        {pop true}
        ifelse
        {
        $SubstituteFont
        begin
        pop pop
        /$styleArray 1 index def
        /$regOrdering 2 index def
        pop pop
        0 1 $styleArray length 1 sub
        {
            $styleArray exch get
            ct_StyleDicts $regOrdering
            2 copy known
            {
                get
                exch 2 copy known not
                {pop/Default}
                if
                get
                dup type/nametype eq
                {
                ?str1 cvs length dup 1 add exch
                ?str1 exch(-)putinterval
                exch dup length exch ?str1 exch 3 index exch putinterval
                add ?str1 exch 0 exch getinterval cvn
                }
                {
                pop pop/Unknown
                }
                ifelse
            }
            {
                pop pop pop pop/Unknown
            }
            ifelse
        }
        for
        end
        findfont 
        }if
        }
    ifelse
    currentglobal false setglobal 3 1 roll
    null copyfont definefont pop
    setglobal
    }bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
    begin
    /SubstituteFont
        dup $error exch 2 copy known
            {get}
            {pop pop{pop/Courier}bind}
        ifelse def
    /currentdistillerparams where dup
        {
        pop pop
        currentdistillerparams/CannotEmbedFontPolicy 2 copy known
            {get/Error eq}
            {pop pop false}
        ifelse
        }
    if not
        {
        countdictstack array dictstack 0 get
            begin
            userdict
                begin
                $SubstituteFont
                    begin
                    /$str 128 string def
                    /$fontpat 128 string def
                    /$slen 0 def
                    /$sname null def
                    /$match false def
                    /$fontname null def
                    /$substituteFound false def
                    /$inVMIndex null def
                    /$doSmartSub true def
                    /$depth 0 def
                    /$fontname null def
                    /$italicangle 26.5 def
                    /$dstack null def
                    /$Strategies 10 dict dup
                        begin
                        /$Type3Underprint
                            {
                            currentglobal exch false setglobal
                            11 dict
                                begin
                                /UseFont exch
                                    $WMode 0 ne
                                        {
                                        dup length dict copy
                                        dup/WMode $WMode put
                                        /UseFont exch definefont
                                        }
                                    if def
                                /FontName $fontname dup type/stringtype eq{cvn}if def
                                /FontType 3 def
                                /FontMatrix[.001 0 0 .001 0 0]def
                                /Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
                                /FontBBox[0 0 0 0]def
                                /CCInfo 7 dict dup
                                    begin
                                    /cc null def
                                    /x 0 def
                                    /y 0 def
                                    end def
                                /BuildChar
                                    {
                                    exch
                                        begin
                                        CCInfo
                                            begin
                                            1 string dup 0 3 index put exch pop
                                            /cc exch def
                                            UseFont 1000 scalefont setfont
                                            cc stringwidth/y exch def/x exch def
                                            x y setcharwidth
                                            $SubstituteFont/$Strategy get/$Underprint get exec
                                            0 0 moveto cc show
                                            x y moveto
                                            end
                                        end
                                    }bind def
                                currentdict
                                end
                            exch setglobal
                            }bind def
                        /$GetaTint
                            2 dict dup
                                begin
                                /$BuildFont
                                    {
                                    dup/WMode known
                                        {dup/WMode get}
                                        {0}
                                    ifelse
                                    /$WMode exch def
                                    $fontname exch
                                    dup/FontName known
                                        {
                                        dup/FontName get
                                        dup type/stringtype eq{cvn}if
                                        }
                                        {/unnamedfont}
                                    ifelse
                                    exch
                                    Adobe_CoolType_Data/InVMDeepCopiedFonts get
                                    1 index/FontName get known
                                        {
                                        pop
                                        Adobe_CoolType_Data/InVMDeepCopiedFonts get
                                        1 index get
                                        null copyfont
                                        }
                                        {$deepcopyfont}
                                    ifelse
                                    exch 1 index exch/FontBasedOn exch put
                                    dup/FontName $fontname dup type/stringtype eq{cvn}if put
                                    definefont
                                    Adobe_CoolType_Data/InVMDeepCopiedFonts get
                                        begin
                                        dup/FontBasedOn get 1 index def
                                        end
                                    }bind def
                                /$Underprint
                                    {
                                    gsave
                                    x abs y abs gt
                                        {/y 1000 def}
                                        {/x -1000 def 500 120 translate}
                                    ifelse
                                    Level2?
                                        {
                                        [/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
                                        setcolorspace
                                        }
                                        {0 setgray}
                                    ifelse
                                    10 setlinewidth
                                    x .8 mul
                                    [7 3]
                                        {
                                        y mul 8 div 120 sub x 10 div exch moveto
                                        0 y 4 div neg rlineto
                                        dup 0 rlineto
                                        0 y 4 div rlineto
                                        closepath
                                        gsave
                                        Level2?
                                            {.2 setcolor}
                                            {.8 setgray}
                                        ifelse
                                        fill grestore
                                        stroke
                                        }
                                    forall
                                    pop
                                    grestore
                                    }bind def
                                end def
                        /$Oblique
                            1 dict dup
                                begin
                                /$BuildFont
                                    {
                                    currentglobal exch dup gcheck setglobal
                                    null copyfont
                                        begin
                                        /FontBasedOn
                                        currentdict/FontName known
                                            {
                                            FontName
                                            dup type/stringtype eq{cvn}if
                                            }
                                            {/unnamedfont}
                                        ifelse
                                        def
                                        /FontName $fontname dup type/stringtype eq{cvn}if def
                                        /currentdistillerparams where
                                            {pop}
                                            {
                                            /FontInfo currentdict/FontInfo known
                                                {FontInfo null copyfont}
                                                {2 dict}
                                            ifelse
                                            dup
                                                begin
                                                /ItalicAngle $italicangle def
                                                /FontMatrix FontMatrix
                                                [1 0 ItalicAngle dup sin exch cos div 1 0 0]
                                                matrix concatmatrix readonly
                                                end
                                            4 2 roll def
                                            def
                                            }
                                        ifelse
                                        FontName currentdict
                                        end
                                    definefont
                                    exch setglobal
                                    }bind def
                                end def
                        /$None
                            1 dict dup
                                begin
                                /$BuildFont{}bind def
                                end def
                        end def
                    /$Oblique SetSubstituteStrategy
                    /$findfontByEnum
                        {
                        dup type/stringtype eq{cvn}if
                        dup/$fontname exch def
                        $sname null eq
                            {$str cvs dup length $slen sub $slen getinterval}
                            {pop $sname}
                        ifelse
                        $fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
                        /$match false def
                        $SubstituteFont/$dstack countdictstack array dictstack put
                        mark
                            {
                            $fontpat 0 $slen 7 add getinterval
                                {/$match exch def exit}
                            $str filenameforall
                            }
                        stopped
                            {
                            cleardictstack
                            currentdict
                            true
                            $SubstituteFont/$dstack get
                                {
                                exch
                                    {
                                    1 index eq
                                        {pop false}
                                        {true}
                                    ifelse
                                    }
                                    {begin false}
                                ifelse
                                }
                            forall
                            pop
                            }
                        if
                        cleartomark
                        /$slen 0 def
                        $match false ne
                            {$match(fonts/)anchorsearch pop pop cvn}
                            {/Courier}
                        ifelse
                        }bind def
                    /$ROS 1 dict dup
                        begin
                        /Adobe 4 dict dup
                            begin
                            /Japan1 [/Ryumin-Light/HeiseiMin-W3
                                         /GothicBBB-Medium/HeiseiKakuGo-W5
                                         /HeiseiMaruGo-W4/Jun101-Light]def
                            /Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
                            /GB1     [/STSong-Light/STHeiti-Regular]def
                            /CNS1   [/MKai-Medium/MHei-Medium]def
                            end def
                        end def
                    /$cmapname null def
                    /$deepcopyfont
                        {
                        dup/FontType get 0 eq
                            {
                            1 dict dup/FontName/copied put copyfont
                                begin
                                /FDepVector FDepVector copyarray
                                0 1 2 index length 1 sub
                                    {
                                    2 copy get $deepcopyfont
                                    dup/FontName/copied put
                                    /copied exch definefont
                                    3 copy put pop pop
                                    }
                                for
                                def
                                currentdict
                                end
                            }
                            {$Strategies/$Type3Underprint get exec}
                        ifelse
                        }bind def
                    /$buildfontname
                        {
                        dup/CIDFont findresource/CIDSystemInfo get
                            begin
                            Registry length Ordering length Supplement 8 string cvs
                            3 copy length 2 add add add string
                            dup 5 1 roll dup 0 Registry putinterval
                            dup 4 index(-)putinterval
                            dup 4 index 1 add Ordering putinterval
                            4 2 roll add 1 add 2 copy(-)putinterval
                            end
                        1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
                        anchorsearch
                            {pop pop 3 2 roll putinterval cvn/$cmapname exch def}
                            {pop pop pop pop pop}
                        ifelse
                        length
                        $str 1 index(-)putinterval 1 add
                        $str 1 index $cmapname $fontpat cvs putinterval
                        $cmapname length add
                        $str exch 0 exch getinterval cvn
                        }bind def
                    /$findfontByROS
                        {
                        /$fontname exch def
                        $ROS Registry 2 copy known
                            {
                            get Ordering 2 copy known
                                {get}
                                {pop pop[]}
                            ifelse
                            }
                            {pop pop[]}
                        ifelse
                        false exch
                            {
                            dup/CIDFont resourcestatus
                                {
                                pop pop
                                save
                                1 index/CIDFont findresource
                                dup/WidthsOnly known
                                    {dup/WidthsOnly get}
                                    {false}
                                ifelse
                                exch pop
                                exch restore
                                    {pop}
                                    {exch pop true exit}
                                ifelse
                                }
                                {pop}
                            ifelse
                            }
                        forall
                            {$str cvs $buildfontname}
                            {
                            false(*)
                                {
                                save exch
                                dup/CIDFont findresource
                                dup/WidthsOnly known
                                    {dup/WidthsOnly get not}
                                    {true}
                                ifelse
                                exch/CIDSystemInfo get
                                dup/Registry get Registry eq
                                exch/Ordering get Ordering eq and and
                                    {exch restore exch pop true exit}
                                    {pop restore}
                                ifelse
                                }
                            $str/CIDFont resourceforall
                                {$buildfontname}
                                {$fontname $findfontByEnum}
                            ifelse
                            }
                        ifelse
                        }bind def
                    end
                end
                currentdict/$error known currentdict/languagelevel known and dup
                    {pop $error/SubstituteFont known}
                if
                dup
                    {$error}
                    {Adobe_CoolType_Core}
                ifelse
                begin
                    {
                    /SubstituteFont
                    /CMap/Category resourcestatus
                        {
                        pop pop
                        {
                        $SubstituteFont
                            begin
                            /$substituteFound true def
                            dup length $slen gt
                            $sname null ne or
                            $slen 0 gt and
                                {
                                $sname null eq
                                    {dup $str cvs dup length $slen sub $slen getinterval cvn}
                                    {$sname}
                                ifelse
                                Adobe_CoolType_Data/InVMFontsByCMap get
                                1 index 2 copy known
                                    {
                                    get
                                    false exch
                                        {
                                        pop
                                        currentglobal
                                            {
                                            GlobalFontDirectory 1 index known
                                                {exch pop true exit}
                                                {pop}
                                            ifelse
                                            }
                                            {
                                            FontDirectory 1 index known
                                                {exch pop true exit}
                                                {
                                                GlobalFontDirectory 1 index known
                                                    {exch pop true exit}
                                                    {pop}
                                                ifelse
                                                }
                                            ifelse
                                            }
                                        ifelse
                                        }
                                    forall
                                    }
                                    {pop pop false}
                                ifelse
                                    {
                                    exch pop exch pop
                                    }
                                    {
                                    dup/CMap resourcestatus
                                        {
                                        pop pop
                                        dup/$cmapname exch def
                                        /CMap findresource/CIDSystemInfo get{def}forall
                                        $findfontByROS
                                        }
                                        {
                                        128 string cvs
                                        dup(-)search
                                            {
                                            3 1 roll search
                                                {
                                                3 1 roll pop
                                                    {dup cvi}
                                                stopped
                                                    {pop pop pop pop pop $findfontByEnum}
                                                    {
                                                    4 2 roll pop pop
                                                    exch length
                                                    exch
                                                    2 index length
                                                    2 index
                                                    sub
                                                    exch 1 sub -1 0
                                                        {
                                                        $str cvs dup length
                                                        4 index
                                                        0
                                                        4 index
                                                        4 3 roll add
                                                        getinterval
                                                        exch 1 index exch 3 index exch
                                                        putinterval
                                                        dup/CMap resourcestatus
                                                            {
                                                            pop pop
                                                            4 1 roll pop pop pop
                                                            dup/$cmapname exch def
                                                            /CMap findresource/CIDSystemInfo get{def}forall
                                                            $findfontByROS
                                                            true exit
                                                            }
                                                            {pop}
                                                        ifelse
                                                        }
                                                    for
                                                    dup type/booleantype eq
                                                        {pop}
                                                        {pop pop pop $findfontByEnum}
                                                    ifelse
                                                    }
                                                ifelse
                                                }
                                                {pop pop pop $findfontByEnum}
                                            ifelse
                                            }
                                            {pop pop $findfontByEnum}
                                        ifelse
                                        }
                                    ifelse
                                    }
                                ifelse
                                }
                                {//SubstituteFont exec}
                            ifelse
                            /$slen 0 def
                            end
                        }
                        }
                        {
                        {
                        $SubstituteFont
                            begin
                            /$substituteFound true def
                            dup length $slen gt
                            $sname null ne or
                            $slen 0 gt and
                                {$findfontByEnum}
                                {//SubstituteFont exec}
                            ifelse
                            end
                        }
                        }
                    ifelse
                    bind readonly def
                    Adobe_CoolType_Core/scfindfont/systemfindfont load put
                    }
                    {
                    /scfindfont
                        {
                        $SubstituteFont
                            begin
                            dup systemfindfont
                            dup/FontName known
                                {dup/FontName get dup 3 index ne}
                                {/noname true}
                            ifelse
                            dup
                                {
                                /$origfontnamefound 2 index def
                                /$origfontname 4 index def/$substituteFound true def
                                }
                            if
                            exch pop
                                {
                                $slen 0 gt
                                $sname null ne
                                3 index length $slen gt or and
                                    {
                                    pop dup $findfontByEnum findfont
                                    dup maxlength 1 add dict
                                        begin
                                            {1 index/FID eq{pop pop}{def}ifelse}
                                        forall
                                        currentdict
                                        end
                                    definefont
                                    dup/FontName known{dup/FontName get}{null}ifelse
                                    $origfontnamefound ne
                                        {
                                        $origfontname $str cvs print
                                        ( substitution revised, using )print
                                        dup/FontName known
                                            {dup/FontName get}{(unspecified font)}
                                        ifelse
                                        $str cvs print(.\n)print
                                        }
                                    if
                                    }
                                    {exch pop}
                                ifelse
                                }
                                {exch pop}
                            ifelse
                            end
                        }bind def
                    }
                ifelse
                end
            end
        Adobe_CoolType_Core_Defined not
            {
            Adobe_CoolType_Core/findfont
                {
                $SubstituteFont
                    begin
                    $depth 0 eq
                        {
                        /$fontname 1 index dup type/stringtype ne{$str cvs}if def
                        /$substituteFound false def
                        }
                    if
                    /$depth $depth 1 add def
                    end
                scfindfont
                $SubstituteFont
                    begin
                    /$depth $depth 1 sub def
                    $substituteFound $depth 0 eq and
                        {
                        $inVMIndex null ne
                            {dup $inVMIndex $AddInVMFont}
                        if
                        $doSmartSub
                            {
                            currentdict/$Strategy known
                                {$Strategy/$BuildFont get exec}
                            if
                            }
                        if
                        }
                    if
                    end
                }bind put
            }
        if
        }
    if
    end
/$AddInVMFont
    {
    exch/FontName 2 copy known
        {
        get
        1 dict dup begin exch 1 index gcheck def end exch
        Adobe_CoolType_Data/InVMFontsByCMap get exch
        $DictAdd
        }
        {pop pop pop}
    ifelse
    }bind def
/$DictAdd
    {
    2 copy known not
        {2 copy 4 index length dict put}
    if
    Level2? not
        {
        2 copy get dup maxlength exch length 4 index length add lt
        2 copy get dup length 4 index length add exch maxlength 1 index lt
            {
            2 mul dict
                begin
                2 copy get{forall}def
                2 copy currentdict put
                end
            }
            {pop}
        ifelse
        }
    if
    get
        begin
            {def}
        forall
        end
    }bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
    {currentglobal false setglobal}
    {false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
    {2 copy get dup maxlength 27 add dict copy}
    {27 dict}
ifelse put
Adobe_CoolType_Utility
    begin
    /@eexecStartData
         <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
         118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
         4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
    /@recognizeCIDFont null def
    /ct_Level2? exch def
    /ct_Clone? 1183615869 internaldict dup
            /CCRun known not
            exch/eCCRun known not
            ct_Level2? and or def
ct_Level2?
    {globaldict begin currentglobal true setglobal}
if
    /ct_AddStdCIDMap
        ct_Level2?
            {{
                mark
                Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
                    {
                    ((Hex)57 StartData
                     0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
                     7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
                     d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
                     cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
                    }
                stopped
                    {
                     cleartomark
                     Adobe_CoolType_Utility/@recognizeCIDFont get
                     countdictstack dup array dictstack
                     exch 1 sub -1 0
                         {
                         2 copy get 3 index eq
                                {1 index length exch sub 1 sub{end}repeat exit}
                                {pop}
                         ifelse
                         }
                     for
                     pop pop
                     Adobe_CoolType_Utility/@eexecStartData get eexec
                    }
                    {cleartomark}
                ifelse
            }}
            {{
                Adobe_CoolType_Utility/@eexecStartData get eexec
            }}
        ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
    {
     cid_extensions
     begin
    /cid_GetCIDSystemInfo
        {
         1 index type/stringtype eq
            {exch cvn exch}
         if
         cid_extensions
             begin
             dup load 2 index known
                {
                 2 copy
                 cid_GetStatusInfo
                 dup null ne
                    {
                     1 index load
                     3 index get
                     dup null eq
                         {pop pop cid_UpdateDB}
                         {
                         exch
                         1 index/Created get eq
                             {exch pop exch pop}
                             {pop cid_UpdateDB}
                         ifelse
                         }
                     ifelse
                    }
                    {pop cid_UpdateDB}
                 ifelse
                }
                {cid_UpdateDB}
             ifelse
             end
        }bind def
     end
    }
if
ct_Level2?
    {end setglobal}
if
    /ct_UseNativeCapability? systemdict/composefont known def
    /ct_MakeOCF 35 dict def
    /ct_Vars 25 dict def
    /ct_GlyphDirProcs 6 dict def
    /ct_BuildCharDict 15 dict dup
        begin
        /charcode 2 string def
        /dst_string 1500 string def
        /nullstring()def
        /usewidths? true def
        end def
    ct_Level2?{setglobal}{pop}ifelse
    ct_GlyphDirProcs
        begin
        /GetGlyphDirectory
            {
            systemdict/languagelevel known
                {pop/CIDFont findresource/GlyphDirectory get}
                {
                1 index/CIDFont findresource/GlyphDirectory
                get dup type/dicttype eq
                    {
                    dup dup maxlength exch length sub 2 index lt
                        {
                        dup length 2 index add dict copy 2 index
                        /CIDFont findresource/GlyphDirectory 2 index put
                        }
                    if
                    }
                if
                exch pop exch pop
                }
            ifelse
            +
            }def
        /+
            {
            systemdict/languagelevel known
                {
                currentglobal false setglobal
                3 dict begin
                    /vm exch def
                }
                {1 dict begin}
            ifelse
            /$ exch def
            systemdict/languagelevel known
                {
                vm setglobal
                /gvm currentglobal def
                $ gcheck setglobal
                }
            if
            ?{$ begin}if
            }def
        /?{$ type/dicttype eq}def
        /|{
            userdict/Adobe_CoolType_Data known
                {
            Adobe_CoolType_Data/AddWidths? known
                {
                 currentdict Adobe_CoolType_Data
                    begin
                     begin
                        AddWidths?
                                {
                                Adobe_CoolType_Data/CC 3 index put
                                ?{def}{$ 3 1 roll put}ifelse
                                CC charcode exch 1 index 0 2 index 256 idiv put
                                1 index exch 1 exch 256 mod put
                                stringwidth 2 array astore
                                currentfont/Widths get exch CC exch put
                                }
                                {?{def}{$ 3 1 roll put}ifelse}
                            ifelse
                    end
                end
                }
                {?{def}{$ 3 1 roll put}ifelse}  ifelse
                }
                {?{def}{$ 3 1 roll put}ifelse}
            ifelse
            }def
        /!
            {
            ?{end}if
            systemdict/languagelevel known
                {gvm setglobal}
            if
            end
            }def
        /:{string currentfile exch readstring pop}executeonly def
        end
    ct_MakeOCF
        begin
        /ct_cHexEncoding
        [/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
        /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
        /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
        /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
        /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
        /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
        /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
        /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
        /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
        /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
        /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
        /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
        /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
        /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
        /ct_CID_STR_SIZE 8000 def
        /ct_mkocfStr100 100 string def
        /ct_defaultFontMtx[.001 0 0 .001 0 0]def
        /ct_1000Mtx[1000 0 0 1000 0 0]def
        /ct_raise{exch cvx exch errordict exch get exec stop}bind def
        /ct_reraise
            {cvx $error/errorname get(Error: )print dup(                         )cvs print
                    errordict exch get exec stop
            }bind def
        /ct_cvnsi
            {
            1 index add 1 sub 1 exch 0 4 1 roll
                {
                2 index exch get
                exch 8 bitshift
                add
                }
            for
            exch pop
            }bind def
        /ct_GetInterval
            {
            Adobe_CoolType_Utility/ct_BuildCharDict get
                begin
                /dst_index 0 def
                dup dst_string length gt
                    {dup string/dst_string exch def}
                if
                1 index ct_CID_STR_SIZE idiv
                /arrayIndex exch def
                2 index arrayIndex get
                2 index
                arrayIndex ct_CID_STR_SIZE mul
                sub
                    {
                    dup 3 index add 2 index length le
                        {
                        2 index getinterval
                        dst_string dst_index 2 index putinterval
                        length dst_index add/dst_index exch def
                        exit
                        }
                        {
                        1 index length 1 index sub
                        dup 4 1 roll
                        getinterval
                        dst_string dst_index 2 index putinterval
                        pop dup dst_index add/dst_index exch def
                        sub
                        /arrayIndex arrayIndex 1 add def
                        2 index dup length arrayIndex gt
                             {arrayIndex get}
                             {
                             pop
                             exit
                             }
                        ifelse
                        0
                        }
                    ifelse
                    }
                loop
                pop pop pop
                dst_string 0 dst_index getinterval
                end
            }bind def
        ct_Level2?
            {
            /ct_resourcestatus
            currentglobal mark true setglobal
                {/unknowninstancename/Category resourcestatus}
            stopped
                {cleartomark setglobal true}
                {cleartomark currentglobal not exch setglobal}
            ifelse
                {
                    {
                    mark 3 1 roll/Category findresource
                        begin
                        ct_Vars/vm currentglobal put
                        ({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
                            {cleartomark false}
                            {{3 2 roll pop true}{cleartomark false}ifelse}
                        ifelse
                        ct_Vars/vm get setglobal
                        end
                    }
                }
                {{resourcestatus}}
            ifelse bind def
            /CIDFont/Category ct_resourcestatus
                {pop pop}
                {
                currentglobal true setglobal
                /Generic/Category findresource
                dup length dict copy
                dup/InstanceType/dicttype put
                /CIDFont exch/Category defineresource pop
                setglobal
                }
            ifelse
            ct_UseNativeCapability?
                {
                /CIDInit/ProcSet findresource begin
                12 dict begin
                begincmap
                /CIDSystemInfo 3 dict dup begin
                 /Registry(Adobe)def
                 /Ordering(Identity)def
                 /Supplement 0 def
                end def
                /CMapName/Identity-H def
                /CMapVersion 1.000 def
                /CMapType 1 def
                1 begincodespacerange
                <0000><FFFF>
                endcodespacerange
                1 begincidrange
                <0000><FFFF>0
                endcidrange
                endcmap
                CMapName currentdict/CMap defineresource pop
                end
                end
                }
            if
            }
            {
            /ct_Category 2 dict begin
            /CIDFont 10 dict def
            /ProcSet    2 dict def
            currentdict
            end
            def
            /defineresource
                {
                ct_Category 1 index 2 copy known
                    {
                    get
                    dup dup maxlength exch length eq
                        {
                        dup length 10 add dict copy
                        ct_Category 2 index 2 index put
                        }
                    if
                    3 index 3 index put
                    pop exch pop
                    }
                    {pop pop/defineresource/undefined ct_raise}
                ifelse
                }bind def
            /findresource
                {
                ct_Category 1 index 2 copy known
                    {
                    get
                    2 index 2 copy known
                        {get 3 1 roll pop pop}
                        {pop pop/findresource/undefinedresource ct_raise}
                    ifelse
                    }
                    {pop pop/findresource/undefined ct_raise}
                ifelse
                }bind def
            /resourcestatus
                {
                ct_Category 1 index 2 copy known
                    {
                    get
                    2 index known
                    exch pop exch pop
                        {
                        0 -1 true
                        }
                        {
                        false
                        }
                    ifelse
                    }
                    {pop pop/findresource/undefined ct_raise}
                ifelse
                }bind def
            /ct_resourcestatus/resourcestatus load def
            }
        ifelse
        /ct_CIDInit 2 dict
            begin
            /ct_cidfont_stream_init
                {
                    {
                    dup(Binary)eq
                        {
                        pop
                        null
                        currentfile
                        ct_Level2?
                            {
                                {cid_BYTE_COUNT()/SubFileDecode filter}
                            stopped
                                {pop pop pop}
                            if
                            }
                        if
                        /readstring load
                        exit
                        }
                    if
                    dup(Hex)eq
                        {
                        pop
                        currentfile
                        ct_Level2?
                            {
                                {null exch/ASCIIHexDecode filter/readstring}
                            stopped
                                {pop exch pop(>)exch/readhexstring}
                            if
                            }
                            {(>)exch/readhexstring}
                        ifelse
                        load
                        exit
                        }
                    if
                    /StartData/typecheck ct_raise
                    }
                loop
                cid_BYTE_COUNT ct_CID_STR_SIZE le
                    {
                    2 copy cid_BYTE_COUNT string exch exec
                    pop
                    1 array dup
                    3 -1 roll
                    0 exch put
                    }
                    {
                    cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
                    dup array exch 2 sub 0 exch 1 exch
                        {
                        2 copy
                        5 index
                        ct_CID_STR_SIZE
                        string
                        6 index exec
                        pop
                        put
                        pop
                        }
                    for
                    2 index
                    cid_BYTE_COUNT ct_CID_STR_SIZE mod string
                    3 index exec
                    pop
                    1 index exch
                    1 index length 1 sub
                    exch put
                    }
                ifelse
                cid_CIDFONT exch/GlyphData exch put
                2 index null eq
                    {
                    pop pop pop
                    }
                    {
                    pop/readstring load
                    1 string exch
                        {
                        3 copy exec
                        pop
                        dup length 0 eq
                            {
                            pop pop pop pop pop
                            true exit
                            }
                        if
                        4 index
                        eq
                            {
                            pop pop pop pop
                            false exit
                            }
                        if
                        }
                    loop
                    pop
                    }
                ifelse
                }bind def
            /StartData
                {
                mark
                    {
                    currentdict
                    dup/FDArray get 0 get/FontMatrix get
                    0 get 0.001 eq
                        {
                        dup/CDevProc known not
                            {
                            /CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
                                {get}
                                {
                                pop pop
                                {pop pop pop pop pop 0 -1000 7 index 2 div 880}
                                }
                            ifelse
                            def
                            }
                        if
                        }
                        {
                        /CDevProc
                            {
                             pop pop pop pop pop
                             0
                             1 cid_temp/cid_CIDFONT get
                            /FDArray get 0 get
                            /FontMatrix get 0 get div
                             7 index 2 div
                             1 index 0.88 mul
                            }def
                        }
                    ifelse
                    /cid_temp 15 dict def
                    cid_temp
                        begin
                        /cid_CIDFONT exch def
                        3 copy pop
                        dup/cid_BYTE_COUNT exch def 0 gt
                            {
                            ct_cidfont_stream_init
                            FDArray
                                {
                                /Private get
                                dup/SubrMapOffset known
                                    {
                                    begin
                                    /Subrs SubrCount array def
                                    Subrs
                                    SubrMapOffset
                                    SubrCount
                                    SDBytes
                                    ct_Level2?
                                        {
                                        currentdict dup/SubrMapOffset undef
                                        dup/SubrCount undef
                                        /SDBytes undef
                                        }
                                    if
                                    end
                                    /cid_SD_BYTES exch def
                                    /cid_SUBR_COUNT exch def
                                    /cid_SUBR_MAP_OFFSET exch def
                                    /cid_SUBRS exch def
                                    cid_SUBR_COUNT 0 gt
                                        {
                                        GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
                                        0 cid_SD_BYTES ct_cvnsi
                                        0 1 cid_SUBR_COUNT 1 sub
                                            {
                                            exch 1 index
                                            1 add
                                            cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
                                            GlyphData exch cid_SD_BYTES ct_GetInterval
                                            0 cid_SD_BYTES ct_cvnsi
                                            cid_SUBRS 4 2 roll
                                            GlyphData exch
                                            4 index
                                            1 index
                                            sub
                                            ct_GetInterval
                                            dup length string copy put
                                            }
                                        for
                                        pop
                                        }
                                    if
                                    }
                                    {pop}
                                ifelse
                                }
                            forall
                            }
                        if
                        cleartomark pop pop
                        end
                    CIDFontName currentdict/CIDFont defineresource pop
                    end end
                    }
                stopped
                    {cleartomark/StartData ct_reraise}
                if
                }bind def
            currentdict
            end def
        /ct_saveCIDInit
            {
            /CIDInit/ProcSet ct_resourcestatus
                {true}
                {/CIDInitC/ProcSet ct_resourcestatus}
            ifelse
                {
                pop pop
                /CIDInit/ProcSet findresource
                ct_UseNativeCapability?
                    {pop null}
                    {/CIDInit ct_CIDInit/ProcSet defineresource pop}
                ifelse
                }
                {/CIDInit ct_CIDInit/ProcSet defineresource pop null}
            ifelse
            ct_Vars exch/ct_oldCIDInit exch put
            }bind def
        /ct_restoreCIDInit
            {
            ct_Vars/ct_oldCIDInit get dup null ne
                {/CIDInit exch/ProcSet defineresource pop}
                {pop}
            ifelse
            }bind def
        /ct_BuildCharSetUp
            {
            1 index
                begin
                CIDFont
                    begin
                    Adobe_CoolType_Utility/ct_BuildCharDict get
                        begin
                        /ct_dfCharCode exch def
                        /ct_dfDict exch def
                        CIDFirstByte ct_dfCharCode add
                        dup CIDCount ge
                            {pop 0}
                        if
                        /cid exch def
                            {
                            GlyphDirectory cid 2 copy known
                                {get}
                                {pop pop nullstring}
                            ifelse
                            dup length FDBytes sub 0 gt
                                {
                                dup
                                FDBytes 0 ne
                                    {0 FDBytes ct_cvnsi}
                                    {pop 0}
                                ifelse
                                /fdIndex exch def
                                dup length FDBytes sub FDBytes exch getinterval
                                /charstring exch def
                                exit
                                }
                                {
                                pop
                                cid 0 eq
                                    {/charstring nullstring def exit}
                                if
                                /cid 0 def
                                }
                            ifelse
                            }
                        loop
            }def
        /ct_SetCacheDevice
            {
            0 0 moveto
            dup stringwidth
            3 -1 roll
            true charpath
            pathbbox
            0 -1000
            7 index 2 div 880
            setcachedevice2
            0 0 moveto
            }def
        /ct_CloneSetCacheProc
            {
            1 eq
                {
                stringwidth
                pop -2 div -880
                0 -1000 setcharwidth
                moveto
                }
                {
                usewidths?
                    {
                    currentfont/Widths get cid
                    2 copy known
                        {get exch pop aload pop}
                        {pop pop stringwidth}
                    ifelse
                    }
                    {stringwidth}
                ifelse
                setcharwidth
                0 0 moveto
                }
            ifelse
            }def
        /ct_Type3ShowCharString
            {
            ct_FDDict fdIndex 2 copy known
                {get}
                {
                currentglobal 3 1 roll
                1 index gcheck setglobal
                ct_Type1FontTemplate dup maxlength dict copy
                    begin
                    FDArray fdIndex get
                    dup/FontMatrix 2 copy known
                        {get}
                        {pop pop ct_defaultFontMtx}
                    ifelse
                    /FontMatrix exch dup length array copy def
                    /Private get
                    /Private exch def
                    /Widths rootfont/Widths get def
                    /CharStrings 1 dict dup/.notdef
                        <d841272cf18f54fc13>dup length string copy put def
                    currentdict
                    end
                /ct_Type1Font exch definefont
                dup 5 1 roll put
                setglobal
                }
            ifelse
            dup/CharStrings get 1 index/Encoding get
            ct_dfCharCode get charstring put
            rootfont/WMode 2 copy known
                {get}
                {pop pop 0}
            ifelse
            exch
            1000 scalefont setfont
            ct_str1 0 ct_dfCharCode put
            ct_str1 exch ct_dfSetCacheProc
            ct_SyntheticBold
                {
                currentpoint
                ct_str1 show
                newpath
                moveto
                ct_str1 true charpath
                ct_StrokeWidth setlinewidth
                stroke
                }
                {ct_str1 show}
            ifelse
            }def
        /ct_Type4ShowCharString
            {
            ct_dfDict ct_dfCharCode charstring
            FDArray fdIndex get
            dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
                {ct_1000Mtx matrix concatmatrix concat}
                {pop}
            ifelse
            /Private get
            Adobe_CoolType_Utility/ct_Level2? get not
                {
                ct_dfDict/Private
                3 -1 roll
                    {put}
                1183615869 internaldict/superexec get exec
                }
            if
            1183615869 internaldict
            Adobe_CoolType_Utility/ct_Level2? get
                {1 index}
                {3 index/Private get mark 6 1 roll}
            ifelse
            dup/RunInt known
                {/RunInt get}
                {pop/CCRun}
            ifelse
            get exec
            Adobe_CoolType_Utility/ct_Level2? get not
                {cleartomark}
            if
            }bind def
        /ct_BuildCharIncremental
            {
                {
                Adobe_CoolType_Utility/ct_MakeOCF get begin
                ct_BuildCharSetUp
                ct_ShowCharString
                }
            stopped
                {stop}
            if
            end
            end
            end
            end
            }bind def
        /BaseFontNameStr(BF00)def
        /ct_Type1FontTemplate 14 dict
            begin
            /FontType 1 def
            /FontMatrix [0.001 0 0 0.001 0 0]def
            /FontBBox [-250 -250 1250 1250]def
            /Encoding ct_cHexEncoding def
            /PaintType 0 def
            currentdict
            end def
        /BaseFontTemplate 11 dict
            begin
            /FontMatrix [0.001 0 0 0.001 0 0]def
            /FontBBox [-250 -250 1250 1250]def
            /Encoding ct_cHexEncoding def
            /BuildChar/ct_BuildCharIncremental load def
            ct_Clone?
                {
                /FontType 3 def
                /ct_ShowCharString/ct_Type3ShowCharString load def
                /ct_dfSetCacheProc/ct_CloneSetCacheProc load def
                /ct_SyntheticBold false def
                /ct_StrokeWidth 1 def
                }
                {
                /FontType 4 def
                /Private 1 dict dup/lenIV 4 put def
                /CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
                /PaintType 0 def
                /ct_ShowCharString/ct_Type4ShowCharString load def
                }
            ifelse
            /ct_str1 1 string def
            currentdict
            end def
        /BaseFontDictSize BaseFontTemplate length 5 add def
        /ct_matrixeq
            {
            true 0 1 5
                {
                dup 4 index exch get exch 3 index exch get eq and
                dup not
                    {exit}
                if
                }
            for
            exch pop exch pop
            }bind def
        /ct_makeocf
            {
            15 dict
                begin
                exch/WMode exch def
                exch/FontName exch def
                /FontType 0 def
                /FMapType 2 def
            dup/FontMatrix known
                {dup/FontMatrix get/FontMatrix exch def}
                {/FontMatrix matrix def}
            ifelse
                /bfCount 1 index/CIDCount get 256 idiv 1 add
                    dup 256 gt{pop 256}if def
                /Encoding
                    256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
                    bfCount 1 255{2 copy bfCount put pop}for
                    def
                /FDepVector bfCount dup 256 lt{1 add}if array def
                BaseFontTemplate BaseFontDictSize dict copy
                    begin
                    /CIDFont exch def
                    CIDFont/FontBBox known
                        {CIDFont/FontBBox get/FontBBox exch def}
                    if
                    CIDFont/CDevProc known
                        {CIDFont/CDevProc get/CDevProc exch def}
                    if
                    currentdict
                    end
                BaseFontNameStr 3(0)putinterval
                0 1 bfCount dup 256 eq{1 sub}if
                    {
                    FDepVector exch
                    2 index BaseFontDictSize dict copy
                        begin
                        dup/CIDFirstByte exch 256 mul def
                        FontType 3 eq
                            {/ct_FDDict 2 dict def}
                        if
                        currentdict
                        end
                    1 index 16
                    BaseFontNameStr 2 2 getinterval cvrs pop
                    BaseFontNameStr exch definefont
                    put
                    }
                for
                ct_Clone?
                    {/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
                if
                FontName
                currentdict
                end
            definefont
            ct_Clone?
                {
                gsave
                dup 1000 scalefont setfont
                ct_BuildCharDict
                    begin
                    /usewidths? false def
                    currentfont/Widths get
                        begin
                        exch/CIDFont get/GlyphDirectory get
                            {
                            pop
                            dup charcode exch 1 index 0 2 index 256 idiv put
                            1 index exch 1 exch 256 mod put
                            stringwidth 2 array astore def
                            }
                        forall
                        end
                    /usewidths? true def
                    end
                grestore
                }
                {exch pop}
            ifelse
            }bind def
        currentglobal true setglobal
        /ct_ComposeFont
            {
            ct_UseNativeCapability?
                {               
                2 index/CMap ct_resourcestatus
                    {pop pop exch pop}
                    {
                    /CIDInit/ProcSet findresource
                        begin
                        12 dict
                            begin
                            begincmap
                            /CMapName 3 index def
                            /CMapVersion 1.000 def
                            /CMapType 1 def
                            exch/WMode exch def
                            /CIDSystemInfo 3 dict dup
                                begin
                                /Registry(Adobe)def
                                /Ordering
                                CMapName ct_mkocfStr100 cvs
                                (Adobe-)search
                                    {
                                    pop pop
                                    (-)search
                                        {
                                        dup length string copy
                                        exch pop exch pop
                                        }
                                        {pop(Identity)}
                                    ifelse
                                    }
                                    {pop (Identity)}
                                ifelse
                                def
                                /Supplement 0 def
                                end def
                            1 begincodespacerange
                            <0000><FFFF>
                            endcodespacerange
                            1 begincidrange
                            <0000><FFFF>0
                            endcidrange
                            endcmap
                            CMapName currentdict/CMap defineresource pop
                            end
                        end
                    }
                ifelse
                composefont
                }
                {
                3 2 roll pop
                0 get/CIDFont findresource
                ct_makeocf
                }
            ifelse
            }bind def
            setglobal
        /ct_MakeIdentity
            {
            ct_UseNativeCapability?
                {
                1 index/CMap ct_resourcestatus
                    {pop pop}
                    {
                    /CIDInit/ProcSet findresource begin
                    12 dict begin
                    begincmap
                    /CMapName 2 index def
                    /CMapVersion 1.000 def
                    /CMapType 1 def
                    /CIDSystemInfo 3 dict dup
                        begin
                        /Registry(Adobe)def
                        /Ordering
                        CMapName ct_mkocfStr100 cvs
                        (Adobe-)search
                            {
                            pop pop
                            (-)search
                                {dup length string copy exch pop exch pop}
                                {pop(Identity)}
                            ifelse
                            }
                            {pop(Identity)}
                        ifelse
                        def
                        /Supplement 0 def
                        end def
                    1 begincodespacerange
                    <0000><FFFF>
                    endcodespacerange
                    1 begincidrange
                    <0000><FFFF>0
                    endcidrange
                    endcmap
                    CMapName currentdict/CMap defineresource pop
                    end
                    end
                    }
                ifelse
                composefont
                }
                {
                exch pop
                0 get/CIDFont findresource
                ct_makeocf
                }
            ifelse
            }bind def
        currentdict readonly pop
        end
    end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {  
    pop
 }
 {
    {string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
     /.notdef 0 def
     currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{        
    /GlyphDirectory 
     16
     dict def
     sfnts 0 get
     dup
     2 index
    (glyx)
     putinterval
     2 index 
    (locx)
     putinterval
     pop
     pop
}
{
     pop
     pop
}ifelse         
}bind def
/AddT42Char
{
Is2015?
{
    /GlyphDirectory get 
    begin
    def
    end
    pop
    pop
}
{
    /sfnts get
    4 index
    get
    3 index
 2 index
    putinterval
    pop
    pop
    pop
    pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
        ct_CopyFont 
        /Encoding Encoding dup length array copy 
        dup
        4 -1 roll
        0 exch put   
        def
        currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
    gsave 
    8 -1 roll pop 
    7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
    currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
    dup  9 1 roll 
    {  
        currentdict /StrokeWidth 2 copy known  
        {   
            get 2 div   
            0 ct_FontMatrix dtransform pop
            5 1 roll  
            4 -1 roll 4 index sub   
            4 1 roll   
            3 -1 roll 4 index sub  
            3 1 roll   
            exch 4 index add exch  
            4 index add  
            5 -1 roll pop  
        }  
        {    
            pop pop 
        }  
        ifelse  
    }       
    if  
    setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
        exec 
    end 
    {  
        currentdict /StrokeWidth 2 copy known  
            { get }  
            { pop pop 0 }  
        ifelse  
        setlinewidth stroke  
    }  
    {   
        fill  
    }  
    ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
    /m {moveto} def 
    /l {lineto} def 
    /c {curveto} def 
    /cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
    ct_CopyFont 
    /CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
    /ct_AddGlyphToPrinterFont {
        2 copy
        ct_GetGlyphOutline 3 add -1 roll restore 
        ct_MakeGlyphProc 
        ct_AddGlyphProc
    } def
}
{
    /ct_AddGlyphToPrinterFont {
        pop pop restore
        Adobe_CTFauxDict /$$$FONTNAME get
        /Euro
        Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
        ct_EuroDict exch get
        ct_AddGlyphProc
    } def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
    { 
    541 628 m 
    510 669 442 703 354 703 c 
    201 703 117 607 101 444 c 
    50 444 l 
    25 372 l 
    97 372 l 
    97 301 l 
    49 301 l 
    24 229 l 
    103 229 l 
    124 67 209 -19 350 -19 c 
    435 -19 501 25 509 32 c 
    509 131 l 
    492 105 417 60 343 60 c 
    267 60 204 127 197 229 c 
    406 229 l 
    430 301 l 
    191 301 l 
    191 372 l 
    455 372 l 
    479 444 l 
    194 444 l 
    201 531 245 624 348 624 c 
    433 624 484 583 509 534 c 
    cp 
    556 0 m 
    }
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
    { 
    347 298 m 
    171 298 l 
    170 310 170 322 170 335 c 
    170 362 l 
    362 362 l 
    374 403 l 
    172 403 l 
    184 580 244 642 308 642 c 
    380 642 434 574 457 457 c 
    481 462 l 
    474 691 l 
    449 691 l 
    433 670 429 657 410 657 c 
    394 657 360 692 299 692 c 
    204 692 94 604 73 403 c 
    22 403 l 
    10 362 l 
    70 362 l 
    69 352 69 341 69 330 c 
    69 319 69 308 70 298 c 
    22 298 l 
    10 257 l 
    73 257 l 
    97 57 216 -12 295 -12 c 
    364 -12 427 25 484 123 c 
    458 142 l 
    425 101 384 37 316 37 c 
    256 37 189 84 173 257 c 
    335 257 l 
    cp 
    500 0 m 
    } 
ct_PSBuildGlyph 
} def 
end     
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
    currentpacking
    true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
    null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
    Adobe_AGM_Core begin
    Adobe_AGM_Image begin
    /AGMIMG_&image systemdict/image get def
    /AGMIMG_&imagemask systemdict/imagemask get def
    /colorimage where{
        pop
        /AGMIMG_&colorimage/colorimage ldf
    }if
    end
    end
}def
/ps
{
    Adobe_AGM_Image begin
    /AGMIMG_ccimage_exists{/customcolorimage where 
        {
            pop
            /Adobe_AGM_OnHost_Seps where
            {
            pop false
            }{
            /Adobe_AGM_InRip_Seps where
                {
                pop false
                }{
                    true
                }ifelse
            }ifelse
            }{
            false
        }ifelse 
    }bdf
    level2{
        /invert_image_samples
        {
            Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
            /Decode[Decode 1 get Decode 0 get]def
        }def
        /knockout_image_samples
        {
            Operator/imagemask ne{
                /Decode[1 1]def
            }if
        }def
    }{  
        /invert_image_samples
        {
            {1 exch sub}currenttransfer addprocs settransfer
        }def
        /knockout_image_samples
        {
            {pop 1}currenttransfer addprocs settransfer
        }def
    }ifelse
    /img/imageormask ldf
    /sepimg/sep_imageormask ldf
    /devnimg/devn_imageormask ldf
    /idximg/indexed_imageormask ldf
    /_ctype 7 def
    currentdict{
        dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
            bind
        }if
        def
    }forall
}def
/pt
{
    end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
    dup type/arraytype ne
        {1 array astore}if
    dup 0 get currentfile ne
        {dup 0 get flushfile}if
        {
        dup type/filetype eq
            {
            dup status 1 index currentfile ne and
                {closefile}
                {pop}
            ifelse
            }{pop}ifelse
        }forall
}def
/AGMIMG_init_common
{
    currentdict/T known{/ImageType/T ldf currentdict/T undef}if
    currentdict/W known{/Width/W ldf currentdict/W undef}if
    currentdict/H known{/Height/H ldf currentdict/H undef}if
    currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
    currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
    currentdict/D known{/Decode/D ldf currentdict/D undef}if
    currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
    currentdict/O known{
        /Operator/O load 1 eq{
            /imagemask
        }{
            /O load 2 eq{
                /image 
            }{
                /colorimage
            }ifelse
        }ifelse
        def
        currentdict/O undef
    }if
    currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
    currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
    currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
    currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
    /DataSource load xcheck not{
        DataSource type/arraytype eq{
            DataSource 0 get type/filetype eq{
                /_Filters DataSource def
                currentdict/MultipleDataSources known not{
                    /DataSource DataSource dup length 1 sub get def 
                }if
            }if
        }if
        currentdict/MultipleDataSources known not{
            /MultipleDataSources DataSource type/arraytype eq{
                DataSource length 1 gt
            }
            {false}ifelse def
        }if
    }if
    /NComponents Decode length 2 div def
    currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
    begin
        AGMIMG_init_common
        save mark
        level2{
            currentdict
            Operator/imagemask eq{
                AGMIMG_&imagemask
            }{
                use_mask{
                    process_mask AGMIMG_&image
                }{
                    AGMIMG_&image
                }ifelse
            }ifelse
        }{
            Width Height
            Operator/imagemask eq{
                Decode 0 get 1 eq Decode 1 get 0 eq and
                ImageMatrix/DataSource load
                AGMIMG_&imagemask
            }{
                BitsPerComponent ImageMatrix/DataSource load
                AGMIMG_&image
            }ifelse
        }ifelse
        currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
        cleartomark restore
    end
}def
/overprint_plate
{
    currentoverprint{
        0 get dup type/nametype eq{
            dup/DeviceGray eq{
                pop AGMCORE_black_plate not
            }{
                /DeviceCMYK eq{
                    AGMCORE_is_cmyk_sep not
                }if
            }ifelse
        }{
            false exch
            {
                 AGMOHS_sepink eq or
            }forall
            not
        }ifelse
    }{
        pop false
    }ifelse
}def
/process_mask
{
    level3{
        dup begin
        /ImageType 1 def
        end
        4 dict begin
            /DataDict exch def
            /ImageType 3 def
            /InterleaveType 3 def
            /MaskDict 9 dict begin
                /ImageType 1 def
                /Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
                /Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
                /ImageMatrix[Width 0 0 Height neg 0 Height]def
                /NComponents 1 def
                /BitsPerComponent 1 def
                /Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
                /DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
            currentdict end def
        currentdict end
    }if
}def
/use_mask
{
    dup/Mask known  {dup/Mask get}{false}ifelse
}def
/imageormask
{
    begin
        AGMIMG_init_common
        SkipImageProc{
            currentdict consumeimagedata
        }
        {
            save mark
            level2 AGMCORE_host_sep not and{
                currentdict
                Operator/imagemask eq DeviceN_PS2 not and{
                    imagemask
                }{
                    AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
                        [/Separation/Black/DeviceGray{}]setcolorspace
                        /Decode[Decode 1 get Decode 0 get]def
                    }if
                    use_mask{
                        process_mask image
                    }{
                        DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
                        {
                            Names convert_to_process not{
                                2 dict begin
                                /imageDict xdf
                                /names_index 0 def
                                gsave
                                imageDict write_image_file{
                                    Names{
                                        dup(None)ne{
                                            [/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
                                            Operator imageDict read_image_file
                                            names_index 0 eq{true setoverprint}if
                                            /names_index names_index 1 add def
                                        }{
                                            pop
                                        }ifelse
                                    }forall
                                    close_image_file
                                }if
                                grestore
                                end
                            }{
                                Operator/imagemask eq{
                                    imagemask
                                }{
                                    image
                                }ifelse
                            }ifelse
                        }{
                            Operator/imagemask eq{
                                imagemask
                            }{
                                image
                            }ifelse
                        }ifelse
                    }ifelse
                }ifelse
            }{
                Width Height
                Operator/imagemask eq{
                    Decode 0 get 1 eq Decode 1 get 0 eq and
                    ImageMatrix/DataSource load
                    /Adobe_AGM_OnHost_Seps where{
                        pop imagemask
                    }{
                        currentgray 1 ne{
                            currentdict imageormask_sys
                        }{
                            currentoverprint not{
                                1 AGMCORE_&setgray
                                currentdict imageormask_sys
                            }{
                                currentdict ignoreimagedata
                            }ifelse                     
                        }ifelse
                    }ifelse
                }{
                    BitsPerComponent ImageMatrix 
                    MultipleDataSources{
                        0 1 NComponents 1 sub{
                            DataSource exch get
                        }for
                    }{
                        /DataSource load
                    }ifelse
                    Operator/colorimage eq{
                        AGMCORE_host_sep{
                            MultipleDataSources level2 or NComponents 4 eq and{
                                AGMCORE_is_cmyk_sep{
                                    MultipleDataSources{
                                        /DataSource[
                                            DataSource 0 get/exec cvx
                                            DataSource 1 get/exec cvx
                                            DataSource 2 get/exec cvx
                                            DataSource 3 get/exec cvx
                                            /AGMCORE_get_ink_data cvx
                                        ]cvx def
                                    }{
                                        /DataSource 
                                        Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
                                        /DataSource load
                                        filter_cmyk 0()/SubFileDecode filter def
                                    }ifelse
                                    /Decode[Decode 0 get Decode 1 get]def
                                    /MultipleDataSources false def
                                    /NComponents 1 def
                                    /Operator/image def
                                    invert_image_samples
                                    1 AGMCORE_&setgray
                                    currentdict imageormask_sys
                                }{
                                    currentoverprint not Operator/imagemask eq and{
                                        1 AGMCORE_&setgray
                                        currentdict imageormask_sys
                                    }{
                                        currentdict ignoreimagedata
                                    }ifelse
                                }ifelse
                            }{  
                                MultipleDataSources NComponents AGMIMG_&colorimage                      
                            }ifelse
                        }{
                            true NComponents colorimage
                        }ifelse
                    }{
                        Operator/image eq{
                            AGMCORE_host_sep{
                                /DoImage true def
                                currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
                                {
                                    AGMCORE_black_plate not Operator/imagemask ne and{
                                        /DoImage false def
                                        currentdict ignoreimagedata
                                    }if
                                }if
                                1 AGMCORE_&setgray
                                DoImage
                                    {currentdict imageormask_sys}if
                            }{
                                use_mask{
                                    process_mask image
                                }{
                                    image
                                }ifelse
                            }ifelse
                        }{
                            Operator/knockout eq{
                                pop pop pop pop pop
                                currentcolorspace overprint_plate not{
                                    knockout_unitsq
                                }if
                            }if
                        }ifelse
                    }ifelse
                }ifelse
            }ifelse
            cleartomark restore
        }ifelse
        currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
    end
}def
/sep_imageormask
{
    /sep_colorspace_dict AGMCORE_gget begin
    CSA map_csa
    begin
    AGMIMG_init_common
    SkipImageProc{
        currentdict consumeimagedata
    }{
        save mark 
        AGMCORE_avoid_L2_sep_space{
            /Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
        }if
        AGMIMG_ccimage_exists 
        MappedCSA 0 get/DeviceCMYK eq and
        currentdict/Components known and 
        Name()ne and 
        Name(All)ne and 
        Operator/image eq and
        AGMCORE_producing_seps not and
        level2 not and
        {
            Width Height BitsPerComponent ImageMatrix 
            [
            /DataSource load/exec cvx
            {
                0 1 2 index length 1 sub{
                    1 index exch
                    2 copy get 255 xor put
                }for
            }/exec cvx
            ]cvx bind
            MappedCSA 0 get/DeviceCMYK eq{
                Components aload pop
            }{
                0 0 0 Components aload pop 1 exch sub
            }ifelse
            Name findcmykcustomcolor
            customcolorimage
        }{
            AGMCORE_producing_seps not{
                level2{
                    //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
                        [/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
                        /sep_tint AGMCORE_gget setcolor
                    }if
                    currentdict imageormask
                }{
                    currentdict
                    Operator/imagemask eq{
                        imageormask
                    }{
                        sep_imageormask_lev1
                    }ifelse
                }ifelse
            }{
                AGMCORE_host_sep{
                    Operator/knockout eq{
                        currentdict/ImageMatrix get concat
                        knockout_unitsq
                    }{
                        currentgray 1 ne{
                            AGMCORE_is_cmyk_sep Name(All)ne and{
                                level2{
                                    Name AGMCORE_IsSeparationAProcessColor 
                                    {
                                        Operator/imagemask eq{
                                            //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
                                                /sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
                                            }if
                                        }{
                                            invert_image_samples
                                        }ifelse
                                    }{
                                        //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
                                            [/Separation Name[/DeviceGray]
                                            {
                                                sep_colorspace_proc AGMCORE_get_ink_data
                                                1 exch sub
                                            }bind
                                            ]AGMCORE_&setcolorspace
                                            /sep_tint AGMCORE_gget AGMCORE_&setcolor
                                        }if
                                    }ifelse
                                    currentdict imageormask_sys
                                }{
                                    currentdict
                                    Operator/imagemask eq{
                                        imageormask_sys
                                    }{
                                        sep_image_lev1_sep
                                    }ifelse
                                }ifelse
                            }{
                                Operator/imagemask ne{
                                    invert_image_samples
                                }if
                                currentdict imageormask_sys
                            }ifelse
                        }{
                            currentoverprint not Name(All)eq or Operator/imagemask eq and{
                                currentdict imageormask_sys 
                                }{
                                currentoverprint not
                                    {
                                    gsave 
                                    knockout_unitsq
                                    grestore
                                    }if
                                currentdict consumeimagedata 
                            }ifelse
                        }ifelse
                    }ifelse
                }{
                    //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
                        currentcolorspace 0 get/Separation ne{
                            [/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
                            /sep_tint AGMCORE_gget setcolor
                        }if
                    }if
                    currentoverprint 
                    MappedCSA 0 get/DeviceCMYK eq and 
                    Name AGMCORE_IsSeparationAProcessColor not and
                    //Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
                    Name(All)ne and{
                        imageormask_l2_overprint
                    }{
                        currentdict imageormask
                    }ifelse
                }ifelse
            }ifelse
        }ifelse
        cleartomark restore
    }ifelse
    currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
    end
    end
}def
/colorSpaceElemCnt
{
    mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
    1 dict begin
    /dataSource xdf
    [
        0 1 dataSource length 1 sub{
            dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
            /exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
        }for
    ]cvx bind
    end
}bdf        
/devn_alt_datasource
{
    11 dict begin
    /convProc xdf
    /origcolorSpaceElemCnt xdf
    /origMultipleDataSources xdf
    /origBitsPerComponent xdf
    /origDecode xdf
    /origDataSource xdf
    /dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
    /DataSource origMultipleDataSources
        {
            [
            BitsPerComponent 8 idiv origDecode length 2 idiv mul string
            0 1 origDecode length 2 idiv 1 sub
                {
                dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
                origDataSource exch get 0()/SubFileDecode filter
                BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
                }for 
            ]bind cvx
        }{origDataSource}ifelse 0()/SubFileDecode filter def        
    [
        origcolorSpaceElemCnt string
        0 2 origDecode length 2 sub
            {
            dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
            1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
            }for
        /convProc load/exec cvx
        origcolorSpaceElemCnt 1 sub -1 0
            {
            /dup cvx 2/add cvx/index cvx
            3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
            }for
    ]bind cvx 0()/SubFileDecode filter
    end
}bdf
/devn_imageormask
{
    /devicen_colorspace_dict AGMCORE_gget begin
    CSA map_csa
    2 dict begin
    dup
    /srcDataStrs[3 -1 roll begin
        AGMIMG_init_common
        currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
        {
            Width Decode length 2 div mul cvi
            {
                dup 65535 gt{1 add 2 div cvi}{exit}ifelse
            }loop
            string
        }repeat
        end]def
    /dstDataStr srcDataStrs 0 get length string def
    begin
    AGMIMG_init_common
    SkipImageProc{
        currentdict consumeimagedata
    }{
        save mark 
        AGMCORE_producing_seps not{
            level3 not{
                Operator/imagemask ne{
                    /DataSource[[
                        DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
                        colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
                        devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def              
                    /MultipleDataSources true def
                    /Decode colorSpaceElemCnt[exch{0 1}repeat]def
                }if
            }if
            currentdict imageormask
        }{
            AGMCORE_host_sep{
                Names convert_to_process{
                    CSA get_csa_by_name 0 get/DeviceCMYK eq{
                        /DataSource
                            Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
                            DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
                            4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
                            devn_alt_datasource
                        filter_cmyk 0()/SubFileDecode filter def
                        /MultipleDataSources false def
                        /Decode[1 0]def
                        /DeviceGray setcolorspace
                        currentdict imageormask_sys
                    }{
                        AGMCORE_report_unsupported_color_space
                        AGMCORE_black_plate{
                            /DataSource
                                DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
                                CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
                                devn_alt_datasource
                            /MultipleDataSources false def
                            /Decode colorSpaceElemCnt[exch{0 1}repeat]def
                            currentdict imageormask_sys
                        }{
                            gsave 
                            knockout_unitsq
                            grestore
                            currentdict consumeimagedata 
                        }ifelse
                    }ifelse
                }
                {   
                    /devicen_colorspace_dict AGMCORE_gget/names_index known{
                        Operator/imagemask ne{
                            MultipleDataSources{
                                /DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
                                /MultipleDataSources false def
                            }{
                                /DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
                            }ifelse
                            invert_image_samples
                        }if
                        currentdict imageormask_sys
                    }{
                        currentoverprint not Operator/imagemask eq and{
                            currentdict imageormask_sys 
                            }{
                            currentoverprint not
                                {
                                gsave 
                                knockout_unitsq
                                grestore
                                }if
                            currentdict consumeimagedata 
                        }ifelse
                    }ifelse
                }ifelse
            }{
                currentdict imageormask
            }ifelse
        }ifelse
        cleartomark restore
    }ifelse
    currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
    end
    end
    end
}def
/imageormask_l2_overprint
{
    currentdict
    currentcmykcolor add add add 0 eq{
        currentdict consumeimagedata
    }{
        level3{         
            currentcmykcolor 
            /AGMIMG_k xdf 
            /AGMIMG_y xdf 
            /AGMIMG_m xdf 
            /AGMIMG_c xdf
            Operator/imagemask eq{
                [/DeviceN[
                AGMIMG_c 0 ne{/Cyan}if
                AGMIMG_m 0 ne{/Magenta}if
                AGMIMG_y 0 ne{/Yellow}if
                AGMIMG_k 0 ne{/Black}if
                ]/DeviceCMYK{}]setcolorspace
                AGMIMG_c 0 ne{AGMIMG_c}if
                AGMIMG_m 0 ne{AGMIMG_m}if
                AGMIMG_y 0 ne{AGMIMG_y}if
                AGMIMG_k 0 ne{AGMIMG_k}if
                setcolor            
            }{  
                /Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
                [/Indexed               
                    [
                        /DeviceN[
                            AGMIMG_c 0 ne{/Cyan}if
                            AGMIMG_m 0 ne{/Magenta}if
                            AGMIMG_y 0 ne{/Yellow}if
                            AGMIMG_k 0 ne{/Black}if
                        ]
                        /DeviceCMYK{
                            AGMIMG_k 0 eq{0}if
                            AGMIMG_y 0 eq{0 exch}if
                            AGMIMG_m 0 eq{0 3 1 roll}if
                            AGMIMG_c 0 eq{0 4 1 roll}if                     
                        }
                    ]
                    255
                    {
                        255 div 
                        mark exch
                        dup dup dup
                        AGMIMG_k 0 ne{
                            /sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop      
                            counttomark 1 roll
                        }{
                            pop
                        }ifelse
                        AGMIMG_y 0 ne{
                            /sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop      
                            counttomark 1 roll
                        }{
                            pop
                        }ifelse
                        AGMIMG_m 0 ne{
                            /sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop      
                            counttomark 1 roll
                        }{
                            pop
                        }ifelse
                        AGMIMG_c 0 ne{
                            /sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop       
                            counttomark 1 roll
                        }{
                            pop
                        }ifelse
                        counttomark 1 add -1 roll pop
                    }
                ]setcolorspace
            }ifelse
            imageormask_sys
        }{
    write_image_file{
        currentcmykcolor
        0 ne{
            [/Separation/Black/DeviceGray{}]setcolorspace
            gsave
            /Black
            [{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
            cvx modify_halftone_xfer
            Operator currentdict read_image_file
            grestore
        }if
        0 ne{
            [/Separation/Yellow/DeviceGray{}]setcolorspace
            gsave
            /Yellow
            [{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
            cvx modify_halftone_xfer
            Operator currentdict read_image_file
            grestore
        }if
        0 ne{
            [/Separation/Magenta/DeviceGray{}]setcolorspace
            gsave
            /Magenta
            [{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
            cvx modify_halftone_xfer
            Operator currentdict read_image_file
            grestore
        }if
        0 ne{
            [/Separation/Cyan/DeviceGray{}]setcolorspace
            gsave
            /Cyan 
            [{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
            cvx modify_halftone_xfer
            Operator currentdict read_image_file
            grestore
        }if
                close_image_file
            }{
                imageormask
            }ifelse
        }ifelse
    }ifelse
}def
/indexed_imageormask
{
    begin
        AGMIMG_init_common
        save mark 
        currentdict
        AGMCORE_host_sep{
            Operator/knockout eq{
                /indexed_colorspace_dict AGMCORE_gget dup/CSA known{
                    /CSA get get_csa_by_name
                }{
                    /Names get
                }ifelse
                overprint_plate not{
                    knockout_unitsq
                }if
            }{
                Indexed_DeviceN{
                    /devicen_colorspace_dict AGMCORE_gget/names_index known{
                        indexed_image_lev2_sep
                    }{
                        currentoverprint not{
                            knockout_unitsq
                        }if
                        currentdict consumeimagedata
                    }ifelse
                }{
                    AGMCORE_is_cmyk_sep{
                        Operator/imagemask eq{
                            imageormask_sys
                        }{
                            level2{
                                indexed_image_lev2_sep
                            }{
                                indexed_image_lev1_sep
                            }ifelse
                        }ifelse
                    }{
                        currentoverprint not{
                            knockout_unitsq
                        }if
                        currentdict consumeimagedata
                    }ifelse
                }ifelse
            }ifelse
        }{
            level2{
                Indexed_DeviceN{
                    /indexed_colorspace_dict AGMCORE_gget begin
                }{
                    /indexed_colorspace_dict AGMCORE_gget dup null ne
                    {
                        begin
                        currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
                        get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
                        AGMCORE_in_rip_sep and{
                            [/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
                            setcolorspace
                        }if
                        end
                    }
                    {pop}ifelse
                }ifelse
                imageormask
                Indexed_DeviceN{
                    end
                }if
            }{
                Operator/imagemask eq{
                    imageormask
                }{
                    indexed_imageormask_lev1
                }ifelse
            }ifelse
        }ifelse
        cleartomark restore
    currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
    end
}def
/indexed_image_lev2_sep
{
    /indexed_colorspace_dict AGMCORE_gget begin
    begin
        Indexed_DeviceN not{
            currentcolorspace 
            dup 1/DeviceGray put
            dup 3
            currentcolorspace 2 get 1 add string
            0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
            {
            dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
            }for 
            put setcolorspace
        }if
        currentdict 
        Operator/imagemask eq{
            AGMIMG_&imagemask
        }{
            use_mask{
                process_mask AGMIMG_&image
            }{
                AGMIMG_&image
            }ifelse
        }ifelse
    end end
}def
 /OPIimage
 {
    dup type/dicttype ne{
        10 dict begin
            /DataSource xdf
            /ImageMatrix xdf
            /BitsPerComponent xdf
            /Height xdf
            /Width xdf
            /ImageType 1 def
            /Decode[0 1 def]
            currentdict
        end
    }if
    dup begin
        /NComponents 1 cdndf
        /MultipleDataSources false cdndf
        /SkipImageProc{false}cdndf
        /Decode[
                0 
                currentcolorspace 0 get/Indexed eq{
                    2 BitsPerComponent exp 1 sub
                }{
                    1
                }ifelse
        ]cdndf
        /Operator/image cdndf
    end
    /sep_colorspace_dict AGMCORE_gget null eq{
        imageormask
    }{
        gsave
        dup begin invert_image_samples end
        sep_imageormask
        grestore
    }ifelse
 }def
/cachemask_level2
{
    3 dict begin
    /LZWEncode filter/WriteFilter xdf
    /readBuffer 256 string def
    /ReadFilter
        currentfile
        0(%EndMask)/SubFileDecode filter
        /ASCII85Decode filter
        /RunLengthDecode filter
    def
    {
        ReadFilter readBuffer readstring exch
        WriteFilter exch writestring
        not{exit}if
    }loop
    WriteFilter closefile
    end
}def
/spot_alias
{
    /mapto_sep_imageormask 
    {
        dup type/dicttype ne{
            12 dict begin
                /ImageType 1 def
                /DataSource xdf
                /ImageMatrix xdf
                /BitsPerComponent xdf
                /Height xdf
                /Width xdf
                /MultipleDataSources false def
        }{
            begin
        }ifelse
                /Decode[/customcolor_tint AGMCORE_gget 0]def
                /Operator/image def
                /SkipImageProc{false}def
                currentdict 
            end
        sep_imageormask
    }bdf
    /customcolorimage
    {
        Adobe_AGM_Image/AGMIMG_colorAry xddf
        /customcolor_tint AGMCORE_gget
        <<
            /Name AGMIMG_colorAry 4 get
            /CSA[/DeviceCMYK]
            /TintMethod/Subtractive
            /TintProc null
            /MappedCSA null
            /NComponents 4 
            /Components[AGMIMG_colorAry aload pop pop]
        >>
        setsepcolorspace
        mapto_sep_imageormask
    }ndf
    Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
    /customcolorimage
    {
        Adobe_AGM_Image/AGMIMG_override false put
        current_spot_alias{dup 4 get map_alias}{false}ifelse
        {
            false set_spot_alias
            /customcolor_tint AGMCORE_gget exch setsepcolorspace
            pop
            mapto_sep_imageormask
            true set_spot_alias
        }{
            AGMIMG_&customcolorimage
        }ifelse         
    }bdf
}def
/snap_to_device
{
    6 dict begin
    matrix currentmatrix
    dup 0 get 0 eq 1 index 3 get 0 eq and
    1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
    {
        1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
        0 0 transform
        AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
        AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
        itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
        1 1 transform
        AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
        AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
        itransform/AGMIMG_urY exch def/AGMIMG_urX exch def          
        [AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
    }{
    }ifelse
    end
}def
level2 not{
    /colorbuf
    {
        0 1 2 index length 1 sub{
            dup 2 index exch get 
            255 exch sub 
            2 index 
            3 1 roll 
            put
        }for
    }def
    /tint_image_to_color
    {
        begin
            Width Height BitsPerComponent ImageMatrix 
            /DataSource load
        end
        Adobe_AGM_Image begin
            /AGMIMG_mbuf 0 string def
            /AGMIMG_ybuf 0 string def
            /AGMIMG_kbuf 0 string def
            {
                colorbuf dup length AGMIMG_mbuf length ne
                    {
                    dup length dup dup
                    /AGMIMG_mbuf exch string def
                    /AGMIMG_ybuf exch string def
                    /AGMIMG_kbuf exch string def
                    }if
                dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
            }
            addprocs
            {AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage    
        end
    }def            
    /sep_imageormask_lev1
    {
        begin
            MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
                {
                    255 mul round cvi GrayLookup exch get
                }currenttransfer addprocs settransfer
                currentdict imageormask
            }{
                /sep_colorspace_dict AGMCORE_gget/Components known{
                    MappedCSA 0 get/DeviceCMYK eq{
                        Components aload pop
                    }{
                        0 0 0 Components aload pop 1 exch sub
                    }ifelse
                    Adobe_AGM_Image/AGMIMG_k xddf 
                    Adobe_AGM_Image/AGMIMG_y xddf 
                    Adobe_AGM_Image/AGMIMG_m xddf 
                    Adobe_AGM_Image/AGMIMG_c xddf 
                    AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
                        {AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
                        currentdict imageormask
                    }{
                        currentcolortransfer
                        {AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
                        {AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
                        {AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
                        {AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
                        setcolortransfer
                        currentdict tint_image_to_color
                    }ifelse
                }{
                    MappedCSA 0 get/DeviceGray eq{
                        {255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
                        currentdict imageormask
                    }{
                        MappedCSA 0 get/DeviceCMYK eq{
                            currentcolortransfer
                            {255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
                            setcolortransfer 
                            currentdict tint_image_to_color
                        }{
                            currentcolortransfer
                            {pop 1}exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
                            {255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
                            setcolortransfer 
                            currentdict tint_image_to_color
                        }ifelse
                    }ifelse
                }ifelse
            }ifelse
        end
    }def
    /sep_image_lev1_sep
    {
        begin
            /sep_colorspace_dict AGMCORE_gget/Components known{
                Components aload pop
                Adobe_AGM_Image/AGMIMG_k xddf 
                Adobe_AGM_Image/AGMIMG_y xddf 
                Adobe_AGM_Image/AGMIMG_m xddf 
                Adobe_AGM_Image/AGMIMG_c xddf 
                {AGMIMG_c mul 1 exch sub}
                {AGMIMG_m mul 1 exch sub}
                {AGMIMG_y mul 1 exch sub}
                {AGMIMG_k mul 1 exch sub}
            }{
                {255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
                {255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
                {255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
                {255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
            }ifelse
            AGMCORE_get_ink_data currenttransfer addprocs settransfer
            currentdict imageormask_sys
        end
    }def
    /indexed_imageormask_lev1
    {
        /indexed_colorspace_dict AGMCORE_gget begin
        begin
            currentdict
            MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
                {HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
                imageormask
            }{
                MappedCSA 0 get/DeviceGray eq{
                    {HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
                    imageormask
                }{
                    MappedCSA 0 get/DeviceCMYK eq{
                        currentcolortransfer
                        {4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
                        {4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
                        {4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
                        {4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
                        setcolortransfer 
                        tint_image_to_color
                    }{
                        currentcolortransfer
                        {pop 1}exch addprocs 4 1 roll
                        {3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
                        {3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
                        {3 mul HiVal mul round cvi      Lookup exch get HiVal div}exch addprocs 4 1 roll
                        setcolortransfer 
                        tint_image_to_color
                    }ifelse
                }ifelse
            }ifelse
        end end
    }def
    /indexed_image_lev1_sep
    {
        /indexed_colorspace_dict AGMCORE_gget begin
        begin
            {4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
            {4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
            {4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
            {4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
            AGMCORE_get_ink_data currenttransfer addprocs settransfer
            currentdict imageormask_sys
        end end
    }def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4722 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:CreateDate="2007-12-14T17:44:55-06:00"
   xap:ModifyDate="2007-12-14T17:44:55-06:00"
   xap:MetadataDate="2005-12-27T20:27:21-05:00"
   xap:CreatorTool="Adobe Acrobat 7.0"
   xapMM:DocumentID="uuid:4C94C1FE4077DA11A0CECADC253085D0"
   xapMM:InstanceID="uuid:fbbd54dd-6f3a-452c-ae6c-0ae9c6ea26ec"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)">
   <xapMM:DerivedFrom
    stRef:instanceID="uuid:10f6350e-0e46-4322-83e0-998f5490025a"
    stRef:documentID="uuid:F10EF329395CDA119D739CF0512C738A"/>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Acr1D.tmp</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -112.45 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 112.45 li
149.665 112.45 li
149.665 0 li
cp
clp
[1 0 0 1 -.267731 0 ]ct
-3e-6 198.929 mo
150 198.929 li
150 -1.07095 li
-3e-6 -1.07095 li
cp
false sop
gsave
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 .267731 112.45 ]ct
[150 0 0 200 -.267734 -86.4793 ]ct
snap_to_device
<<
/T 1
/W 375 
/H 500 
/M[375 0 0 -500 0 500 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [cf /ASCII85Decode fl dup/DCTDecode fl]
/O 2
>>
%%BeginBinary: 0
img
s4IA>!"M;*Ddm8XA:OX[!!3,S!/(=\#RC\B#Rh"G$kWjS$P=*a$k*X](_[Pt',)3!&el#o'G;2u)]Tn=
)]'bF-RU/b2)@$E2*3l]4$,Mc4$,M)%1<OQ%LisZ%M0<a%h99f&.oKc'HIl%'bh?&,oRR9(Ddu9+<qpK
*[;dU-m^/f-o*P31,:pQ4$,Mc4$,Mcs1eUH#QaPuG67ji!!3`5!tbS6_uW(&!!*6(!<E3%!<<*"!!!!!
!rr?'"9eu7#RLhG!<<-(!<E3%!<E0#!!!!!!!*'$!sAc3#7(VC$P3:="9AT+"9J`3"pbA7$o7na!YGM;
+VHL55uD&(,&r/h"r*2nYsKZ\'iMkW1Gj-(d6e-bP#Ll/nRHVt(8A*e-:F%sA4=A1F>ar`<T7T\Z\66F
FlW'_-^:E\[$ASZjRf:V`RX)C<b?N0QDV+1f&lZb7os>ILR4pJa4KMK&HDk6!<NB,!sAc3#6tG:2$![Y
&Ha12&d1Kt@<!J)"YtXk'VVcu,Jd:*n1u>!iGsO56W4_0F#<D5"r<r=K*N_\_U:i9<217?79)6fA`E9e
KYu8]j7>a)UkQ1@`73l?V7":mjn2YdG(u<[[`6n\p*Vdh=(c`4Q`%=5s4RG]!s&B'&H`UF56-oqg8D>B
e[FVo3)9QNC-eemfPO4m+YBZCfPO4m2P_7SQu,G-2Q#2kQpQ$rKV9np#YG[eV$ST(-+-J\KU$?s-r\ia
,`?(;iD42bQ)TE_$?24TX'rCm,!o+hXWGuc&e]k_B_J8.Ro7t'XWH!#WPVk;;E.8\2Pg^0dHsX6Ro4p(
O(rO1OH_#k8$t8)84jLpUY;2P,UEaHd6_:S92cV%X$sEQ,4/+4-!DK+67HYdW%-1]8=NLK2VQlWC7`qK
.mjS<[8%?fX\9ld;hVTUC1.G-:MO*3[4m9BU2<P<(8_Y-.DgM4>*6ZuM7"q7>,`JhKfuD%<i-g6g8D>1
WEL-U8eg59WEPZU:l2S3WEN09:l2S3WEKnN>>[;T[4>-7955_!JsE<g-A4o_C._"(-rYf-Uo"]mC*Y+5
'dJC?WU3:j[3L@5U-`^r>*82H[23RpWEPG$D5b'F6:sXLR'd`FD5g^$(8ffD[4uDg6a\1FW?e@j-++D$
:n)/g)P:ake@)2g8$tP24fS.KC'aO0[1d:Z;RE[^QIJX.D+`09C0OOnV6qgP%B424g6<mu8$sqIRo4pA
8Dtsbg6U6j9K&d%M7"q7>*qWQM7"q7>*6ZuVmS+U>*s/$[1d:Z;RIb'QIJGuC0$"7;M7cDD+`67C0OOn
V6qg?4fPlam7J#!,2/@484jK%,MJW%-IdrO[3F=je6Sn/e?)982Ul$3[\[_/[59(E9slKL3)!M5>,#2X
OmP_9C.KMW[4SD*;sdH:,!DpC;'@Nj=t,3U[]/Xi$!M$ae@))<:mJ#7e@)?nIApC!*n7WmD+YGK;[o^C
;qdH^C1.Ec;hUhp;[?$2,UKiK;E_#<:MO*3[8K/e66mkb.odgITb7ukX[r/^[1X+*X]1?r:o=WnV.rN.
-r\ia-#06&;VHs6Tds%I955g'd#F_?e@))<>>hjQ/PBh*e@)2gUg$aNM[?(-<?`SC,*o+[Q(\m=KO(Pm
UM<,!R'dX9,1N_of6`n#$d8Z>8&`CIplq(VIU2U=RV94<@b^.UVJE]S]H,^N3'p3Ni8W^+p5]_#qp.\;
iD(#=b=s^ETh6!8<iTR7iCdp6WEQ9Ue=fVMKWS4n&qr;;'"(XD:C;'*-#0:gPUXIGQ)^3<:o=Ud<iTR7
6C]>.=t,3UThZ5RX]3.MKfD[;[8R?'']CH4eP%,C,!os8eP'C";hUhp<?m0j:(i5^<5K9%3(adi;[>u0
iA;iqVAiFeV[734eO\XNW0!G\[8JtV&KrtWC8>g5,!os8d7E4Se4<1D[3@1r67E6e-"s3Ilh=EV=/FsE
%Y(Y5]2B#+k/!'<8S7W:X'b8*.!*@pj"@Cu^N"GJP0i@3!!k#%4kTYDoVTq;]rM'3h<_l5MZf@X#:-_!
IaGq:><kAm5:X`i1.*0b,JW?2'<l)1mEGbp6\4=sl.>!gCX;?j#'Lma!"@C4Q&L40Zi&e[<[%?+J6321
nM$N[H#,[T*JrCo8Oh+p*rc4m\h0`Ip7L^U+Qf7$56A)>/>s+qP'[`Nj[lo3**d6/"AAqO_*6b;i9ipV
.hC13S_fkY%c<N`q,$)TbQJHO0L#&mT#s%<p)Sr](.3/!g=EsT`9XLKeks_(RR?,urTJ6G-t4Q=FAjXo
/c'h8#JQ%TFbABh-dFr.>Y=_5UBs8b<d68,Gm1sriV+j^+i$'P%\TS49M!qg&qoM>k-.L;%lCC&W(IV]
8aTH4*Pi(-0p*flO-'>HE?r>[KfgXe6S>.TGkeYF2YrqcG.r9O<-XPCi6DsgksAFN=qa5c8Qr*P-\U_N
<iT=:6Bic&=t+,Z$;cs5C8N\L.4#8RWJi,1:m<8@VD+5^KT`]?d$bZB-q`#`@45$,d#G)[N$a6<8eSL0
#Y[RT-6l5Bnk.G'/\7BoqQFZn(iJ@H:7]ukorG5R[ke[5a`,hO1#:1'DP)6QorG5Vr9%IFp9PY.?)*SH
LNr$]rl2OnVV,ZsU>L.*]8r`RSK0N]'b3ojnNoHYRk?g&7&BT6*He$`dfn#\UJIDDq*I^A79&WIoiCdn
b?c2!EG3bF&LVd?1eCd,f62LelZ2<6DJ3GlVLsa#WOD*cK'!V7d1Qs3EWfM#6'd`/+rLK&+J'=J$`dRd
IBV<-KPT=F,D]6tb+5]/`:4`gM>B[PO3'@&+F0bJ<'`U:gOdQuJ6i,@kO2;YZ/O\.STW@Eoi"ro2!73"
6qPmk4F<=H>uGN"e[We0";h,.ZD8L3O9c%[SAZm"(OKUV;YM1OfcT"/Gc4sF2VQm>--cMc*pGau`p@@c
@E7p)X1qP'1-90G^01ZUR=Y)U?7N,YT!gAu4.pBVnk@2nGA\uqa-m*8nM)E0Gc6_f3bj!d8%Lm84"4[?
CPVt>GEccsf3)2p*($\f>7n(5WUBJ14![g0<B#BWOP8WC9PEJc`Eq-W>4C^G^i0MsrQ',pc/[Sbf]s*0
AZQ=B97-aQFORUi8KKBM,J?tdChl4nPFt/.;QLWC>"k)S\n\%pSHD\VbD1LpjE"TN#X7^m63]`*%s2:D
ni$[@;)Z%#"F`D-,`W0Ul$)^bNF/Fae$Si_aqd&ea%b7Iju6sjP9][[nV(PXA&Pa0%jaIF3Q$EOA)aB$
(dVj9pn.7-ENu#s6#S$LrMR^):\LC],KVn\,6FD]&%)liV\oq4*$m@4]pV^MC_&;%P$K>r9GBIL0pCPN
[ef6Jk>T/'9RC*mk*ZBc$B);SGlIcW&V]T!Y9Ud/rmWND[A/-q#36=Yi^a`\GY[%oggUOW)d$Q8W_AQf
aCaqd8LZ_JVN0hAJ.Yihm$/h.P>Uil'Y`#KqBp3=<j!+h11^[F`u#"E.@lSo9KD#P'!r3:7%k%McjU_@
<4uJU0,jY_BVnUp'7,W9iV05[CUbMb'!tQ`U>b)*Gc@W)Z`eJQ<:IS$K&3Dhp5O_ghkM@K!'&[8F7JEn
HAq\MTt'gVL>(3I60'&2K(;\*MQ,,Za.oTe"uDZaQ>H45Y1W1+rU5NuQ8,JFZ/@Xe4165Y[$]ZV/fJu5
AKiI8SAYslU*GS)YhN0.7=a+0_=0#im4l[#'Tp,Rk?%K'CL*_J-'>]uRRrFnW0rJK`E!o$SL:mX(:Z\u
E0W;e(gA#m6l8-0nts`K5Ti[9iQ#AYdB96@7tdUghnPfV.2%N5\fqC#W+o,U+W/c90R3*L:W3d'+J%6M
4J<<dflhrXd3m.)Oci!1P+R!S"*Kkl`\e\7!3^t\!git1OfFL]aJCPO5R1RokCUrV;[/F?a@uCWbKU_b
#pa1H<$'uhaCptAoD#"m/0f/#l1h.cZhM!!&<i#>B:jd+H2QKk*^NEJ!nKBu+Hn%%!!iCa(<_8spk7CY
G0hLZK/*+pC*XAoHk7f^,rn9FnDYS+m\+4hg^F`!dK%'3Rd_=YM":ss#*C-%eg)B,*LN>K2/<3H_&`O9
5IJ=j!@,@%1)f(-e'*(7&?Mn;@#]PArr<0j+RQI8f[Hp8FV#]e=RJ1X4;9h](^#,0O7o:QM2_Z3rr@@9
+d]-2!,)oHE1ON_\riu]:d.">%ff2['G98qecm--%^7sFTNu8TmElmU^d3%W+H6Brrr<28@R(l-^"]_R
q]fkZ5\0%]mS;\)f=HpP:7;d9nl()N1kb^[k^N_P.W*/"Ce4Qt_^"f,M%Dm$Bd':DI$=_`r\BaVN@ZGp
5SaE3\%!JD2!6*!Mjk=:BD<tRk?^9fR+cfH%@9mB`a,15i4qkAU19Eu'$^oXRZ-RLMi47D6kuRCR>e99
,RqIpmo!asHV@4L6#Q0%iBII^:9JD_YECf$DMq^37r:F9=*,)-cjj#DXoR^aJI.$h/CWj/VaQ'D5aG1s
EAO>N/1q)!i?HOJ3_>;F`F*jWO\8)E*O81kr44==DVY^:p@oe`\`K_[e=VVc?o+K!I$,uCZ[XY1IDSe'
<M,i5C;R@)**moE[=Aq:_-M688Ka"cTCmoXAp#)oZCR(,jG*%`Tpnf?1b(VNTr1kG[i9[7m<+`'d<iY^
I][%=IZQ;U<WQT?dC#bO#J8#^A8&7PR?nc%[Yj`105giYDpg"/+Ko[f[>IL:kB!aIT@gM-bl/4:TsW9V
)T.Q/a6u'DJ4iK%l-]S";F#+hb1uPkiqA21Ogm@G9a!8qnt^u9krfnF*BjS:@90tU56PoPC.S/R^j'gp
"`]Z7p2E11&"8u&QYJ`!Mn>1iP@#>neJq4?V[gb8kJ96[%@N<-fA_psJN`o9F?;.^M%SMb^TnYI(FfG.
CO^`XMNK"`-g%EJSp5ne^1k]:l98ocG\,F0gF@E89k/ft%0stI8H/BZ?`p&QnO[[8Ha@gc)snQ2+5W[N
Zq8\D(H`P*&g$Z4J2iXEYMgLeU$R5"K3QDqE1(Aoi+5?9E,"5%V"<R"KL%nae?`p2bY"4ug_+$Th_7%l
GY?l!?K[CD+__N=#-`;Il*_pLVV8p+r0*FuFJ"mJ>2^+7BS`3LJo-97EVZCt8CsG\3;=q!"0-G'(d?h!
%d;eMOqh0)28?K)9[`WjNPi:kl;;AAkuuBJCE<;N[s%0b+poX%eQD"ilJ)JMTT;)eM!5?eGMoES%GSDa
;^%/4mu^6871.QKGLp>_G3pE7*\jAI'o`ZBJ!R)M:`9XK/j+CLMV[YHGjJ1]P@I%g7dH3B3dajhcnp>!
O#69C[WEnd-k6k_>W2#s8!6/+pIH:g1*h)mLH\6\d7o;\ClN_4MH0q:&i:T#aHc%Z$NRsd+EO8rjq50L
=OdSXFF.6nERK)mRTm7=CYQ4Km>ih]d7/uONZ,`2g<oE\:$IiNBnP,aT%ka%Q2i1DbpWJS";4k.ViqFU
d5j7ZRN&q;,Q^aRnOqZi,SB"01pfh1[mA]IO1m[W%\Wh%YtD'J*0%l+6b7mrmEiNC]_qCe*fI.M;Wd0_
+F&SpIG?n\X1Z)#@S_c?A1#u>1aU!>,'DiY:io)G7]4/=n5+R/cq";%^kG\!Rl@s!"hZc_1LVo!F<'W$
k)Id<>13P%>nQ7BS3/LSF,50tm>^6iF2I#)l5*T=mgh9:`tQ?cVnu?TbK7un)rAJT-.-&W#h_6rd2FQ`
a7$Ng2DTAfi()Y)jI).Z5SG!`dp]Qd]f"@WqA).hpZd70hIU2TZN]b3mrO?^6lC)c"S(KXl,\!X%:2'`
XEO@h%ChNHYR@pBdD5)RFP\T"Z9W7\k0'g5NN<^CX4dr;51.TB.4jpdoUC^3LHo;;8M\ajW-42!JcX=g
5?rAqn/_nL7lh#]5k?)QXWiWo4nVU\'-KS-%^F#8Gps(2-0NTVr)3G)9W)0ol$.6:c-o0Q`>YpSJ:Q,2
Gp[pWWL#A"1Y_k#Bp/7KeYL@M^^d)a+*p"^Jk=sKWAl\!FH\NDnl'<.VK[3J$!_";RMtR$30X?S-Z+2I
2`F<Y3CWS[U]EXc!9aD>M#RH]kp/gmC6ggr%JV-TNf?:0`'Dg$28V5t,d20[%JL*$_9tE^PNmGel97Ao
<-%[h:LiA_`8]/&&]\tle.cFd:ug1RO*((V.5r:%7dU_:7jQ:j#FJ=@FQcRl)=Fu0a8c7=@[Ycu[o)]F
#Eg9[jNd[N;PXVjlLZSLm4mS'pF+Qb=OP4S-^(8UgC??._!k);8cB#=P\mU@L#[g=8@fMh_li^RqY;CP
XGPXDh/JGr&T5tjTM:!8h7:=b`+Z6@g#,%9mQktH-=R4HOs)TJm+1j3?o$F'4+9Rk>MG>b^=SBK<*rSX
AVM+!d5m?-9*+#&O<=P?#`Wpg-QN4<3.W9C)dL/gkYX6bFWc`!Me)2ddf[166&slU1F'?-J<if]?EBQ9
2NtUF,Uj:0$jd&P*XRIiZiUcJcC1Vte8>nAPcUr14Y:9NN=l;6>?hSimb/Vja%>@l!2rRBBc7l\::;o,
LY:ie8D5HFHp/sq>gXoo2<?aj27aVH$0U_O/hudHrk<E(,rMFo(dW^:AO[)(.F5MU+<M*4,@D./EZh$0
#-fs&T*4O4DmdRn^`\,IMf'%<__(CUFaJZE8`Y=`ddpBb!7F.gA+KOo9^<.N31fEQ(`36eRI#&g89U_;
^BfFkBmPFQ=:9ml@)tmo>uZ^&E?0fJhcX!<>419)4L[MeCJA8Tg3.sL1e,=c]Oh%#5/"dfeYE_O1^":m
"'JcEVO#&.:EQCi!!3[Kl1/`9Am=#8/A7&iiaYpVd0f'D&NYa:bl"/9OVVV2X0q5QkH_^)CCnoU)&i9h
M2bWGZ30g5):M.^``5>j4sRk>>J8qsYS5?7BjBo6g>-Z)cu%,ighI=k0aT0dNGE(4hWFsp6'2:FUTmBF
+'6h`!d3jn7_0,@7Ae>J&CN\`MnNa_$#9Msj"RW>3.+p3#<_f2C461`WRaVsicY.[=:QB:H3IM/d"iTU
,c>&iJJ&k3,Y\4<Ee+^DJAC_SWNBdIl;1)lC-'LAWr`<T(Qr+Q1hkI[Or/9$P3HZX;e\/Ch7(TUh]bEY
KisGd83+pBrFI#a>"@<1eYD,"pI\iU\4A@cJr?5PBQTImh5BLa4;%ZqQ-RegDE^X0!)F5p*@HrAnd>jC
pnAIe=<^5>iMpU-KS0$!,;H;^ISp<$o*PA>4p86?3W*;,'K3eY>Os:>H2+E,CPTK6i`!8_Ls[\@dVi2h
:>6c;W=_;UIgJF]E=!I/?,snk81fIU@SB:`M2d^tj1;EU]>3o)%Ko&Z,=Et]am'&9b&U!ogY9M)U4r=7
)Yki0?A5WgAMnYL2fCg@XF<Q)I;CZ.Sfe^0feel'+d8<<*VYTXIZ"Dc=oKm[k.(;2pa"l_Uja^qlX22Y
Gem'&NZC@MjU$lt$[$B-,SW%Mg@(b0E<i,L*DpP;`q::Y`WpF<<,]foE$+J"U`NO%?LBZu[(oUZF4h-X
+.D5`6kU&RC9Y*r&&M;^OqN8?k*B,t_r8[&2-WY@hVpX-UKpg->*ur[cqGN=5?&^YZi+."`4<!+-Z=6.
V_]7>>2O+ba?T#ZKNhm1"<FDtpEVE$Dt@AJGpNkZYB721`ecO=*<_EKQ";t_f$a!L?]j_)rD<"@4ou/W
%MI7CM>X;)U9[?uo\JLSZ;_LLEdS4pPk/H]WNt,8EdYMH'U``p*F"FpUY?#RM:=SeC]+^FHV8H5*QQ)@
<E/R\@h@+PC`AlcA3&dDO1f0=k89TR-!e^*r/`HR)>%)m3dt(#^qi-n,sY!K7DTprENbgWXEA[kJ2HCf
R*G)8:6K(8.d`cgdj;,>k;TXaC&AW9#u+_!]+P%im1[!liQ+Rud'9eO0Pm/:%[rAIif[jU;r38]k8e(E
VT1j$1KYc?8_"-UR=VDg\J3cK_'dMCdXb)Zi8Ha?*^A/P2RTe@mI3YMda:/p$5PXu_L94LYB21qd3Ggs
QK]%l.%[b)4+RH\FSR&`L]lttr7$XX8GqKiEXL2IW*W#)K81]^d[7ZJa2nXpQIma+l.`]-hm+X8pJG*r
#D:kFR-$dQ8dPQ0%9/]5hFAt/"KuM"+mp!I5hbW&CP)!A.P;OZ/Soo=pj<\\VIsH7+!i*i2cgUR$E@sR
Y[(6.!*#\unR.*(*aoat^SW,3!KC`D9Ze+C=('bL+8MhMr0;eScmEb)U`^suh58E>/)&d9b?Z$rE(EK:
<A#5Zi&a6OO1d2^M1`@3`/T"=IQ]SNEG41f1d?RM&P5ES!??B(U?bsr2ZWtg!LU8&6l7#WI*oo50T]H@
o0;V6+9d1p1k7tQpPsl*;/%4Y&:o)+cd4ej,="*Wd2&1g=;s%;5^l*X6!P2;P"V$jg,'Fe:b@m(PiGI^
&!@)g%<+(E.65]bOWcs(rMdj^$1;1HSPIAZ?N1#$i]If=H[_*>iXga2h?]a`WJa%r7";U&_J&UR\olr,
@#\+kO)R-+]FIe+(UQ,-hC<AkJddl!mG)G=$E\Jh2**j^gN6)$_Epg8%GM7q,f\brA&2Oql?j=FPJ+5*
_.h<"*WB^^hoHbQdUioKJj>!VPP&bQA2:aTbmu0e-6qXdeVfA)gG-JF4+FY;Gp%r*>Y^9+F7Vf"gR)Jq
YPBg/cf@gp#kD9g$I`t;/6>b5njBe<,"ue/&93^gk5a\e0P!S!GXBQn^G5>.eV:?L@i;6Gpm2\_e!e=8
)l]2W%Qa=7&ik:Q`se!e]P@KK*9cdiK:;QsCiK17T[l9#2X#6;W)7mM&-I]+ooqpCeIo\^N#S#.Ch:Nt
_)pDm591P)e?Ug7.X"*nGAf&P+@uPNEB:/V><8i(I0!PWqu3"&QlJkkY$]]l>65dhq#"$[a$Rh`6)2h$
b'cO06lol7H1%fn1E.d((H9faS/Tc"mcWf$<EY6.iU3cKCHgm@@!C"(_SnM.\u_2Uej+H^?8_/DOW=ek
3EX.f)Z$KR>!R&s"2&BM$Ysb=*#dDS[.*>3G-e3.\Wsb#m>#].JnIDtU[M0][^Xs-o<GGQ\F:l1g9?>u
p)C"IJDXD+4,7bZ](mV+1%&Nk.Bj.PJ?aakD0N@S3pI>E[.%/Ilm7U(FNH]R/j"o6+qlnFG6>uqimJr_
H(QsB#oY"tiP<ZjRj17o=T+\/HRUm@ma]SO5tfhCi!Fq]al59K*h-pf)'nen!Nq5jh8TGK+Q4G0"=+`7
b8[*"+3fCp=Q2/Y`9@EFjFmfPGn?hn\_;'gf=W5($8QO9NQ(tF\i!<4f2d=rYjqiPLHAd,5ERaP5;\X?
V:=-97]p?lkX;0Zf^M_j:m+'Ea-c:bLGthNPZ7]$6+rRDLJgBVn_jAeP6YDmDA2"!8ST`\*^O;j%gS]I
T]GeULuaPC4H^1ln0_1J4)B@6QOT<_d)LVK4T%fU4#V6QPn@]V]?gA;og;:\cqc(n'PqhXb?smuJc;J_
QZ,_,S1Cgr0]B1pcDd9B"M!`DFpQeNX./rD[eA=`bTOFeT[=\p0t@:$@?\Ni#J)>XEVLpRKk#0l*tXPq
-k0/AlXPhp+i"0^=e/K;of=rQ&L'`&B3#E73(qPhEaFY+p6"E#e>BFCWuEf3>9*I#dJgdN7d$=mJH_k6
cajcq9kCK'5]b\U5VPAM7?8>:M;;<EJb%NJPo@$<4:qhQ-7-R=F\;S%N(raPlAjM=mM_ZY.t`2N/Iad2
Rck(ff^3_h4$T837!X&#!*j&0KihVU]U'P,2VBDrfR]rLlJ8R]'#s?Ym6BI3S's0/aPBu-Xc<RN36]4f
5s<f$O1"?@dL9kI1&MVE*=BRg]5*q3P3AUt4bSSgkm'uAK]:S872CL,NI<bO+D^@`qFVQ&9uWjR6^d@V
Dpf6UFHi_>g;])<*V>c%i+V8E%[3t:H`eBO[]IWQ[K(Fc]5pH)f^^_g+#Tn@AaVE=KT3o@&\p-<-1?)^
e7&%'TfZ_+f@o0j!J8l-[C`N"*9c6@M:tci.u'JqQJYV.>f,)!P4>K5Uj_>/]SD%"3,T1FCQ@i$`fhg*
MT[hdCF#GihK@CX-F&-b\TdKQ++dpu=9I(uC`\5!>"NBQ3:6,&O3"K_FSiAKR<pG9%K\S'4lp<7b\'iB
Z\RW&!^l4R"13OPC"p-$Ert]%?k9<#M-fBLmW0>[M>&dIr2GH>9-F0E)`;#"eht"*G12OJYGK0i*TS:G
RFH*GEhA=kG.cBRe<7U+&'ge`%f3<_Ni:?dE5p19YI'bAb;Se[QZ0V3WdS=@QfW-'2\/YN8TphWOS7m-
Ll3frA.8nTr/CNRhe<V"Qugt#cfU!CX"DS(0sC/G\(li+jLVfS3Td4WHZe%Jj/7$8&s5gM90dUg4+m&O
P<k.jGAL[;AMk-4Rp,;cZu`29)Q5d&f_V6/4eC-pTR1g5KmmYE")&SRcA6UEOSt4_L4Qn<)LFu--;iQl
K<h#qk5JtpfLLs`AQ7Lei]N>YT(glBn'3[M*INHTEC$gfM=elK_iYk8%0E#bAF*\7BI2SQI_%E^6B\A/
9K&#Nk0MN2!MXl0i?TpB5)RQW2$(U/)TdMWTfZr[pGqUn"&K4eJr]>F"T3c%Ub/g#GPfpN+r=8O6L.us
D5(E)?L@8:!7\%YaK_H>"fIH,qii-=m74C%\!2-XA8mcNJY;1o*bdN9H2dkBMtUfb_9o09pVKY!#i>Li
S9*L-+l*jJGLqk(IfrKddL9jE#$g3NVC84%Ce9d7Pm_=^)@Wum*M_VJK[K"liaal57g$;e2?:jb]?WM:
l%M/"H1C<u)B7F0b^ZlOaRj%u1"US:3XM-0G\O1=\`A`o%LMSG"XuKZN-Wb>8mVYheMb\+rX_LC/g\6j
a85KsF0to'b)#Lb80`&p%_tc"h*LG.HtR(m.:TDFZu*(lEK4\H..+;-+I?j&Gs^kABL)Rt@\$?t1tTL/
`B:DbdCB(h-4fi"fF,^`Ou+=Okk1U*-W&[WJgEUGbk2n12/*<#*43jIZDjC2MYnL?]I*9@o;dOh%l@*e
hd7Llf(a[X[Z/jO/HMVs'S14A]2S[MLlUaG&i;@k3;faZKsPWHQACa["E-PD%sQH^4"+.c49WlgA0Pq:
;pUg-;b9TQ^j_@V21u>@D0Mr:4eRm#3_lWMe#K+.DW:1"*l7F!Z3c>m[C;]d1UZ.U7Zr8$:oMV2D&$9`
?5p@kKG1.JG-\`<>12H,OV=O13[^u+1E+`(cVV="/KstA56sdlXg6#b_Ni@"aata9Vr^ih1[G3X@GE+@
:[jUgCl'9sU`B^Cntr[OE":;aI!%IadX*B4\uilU6ek%fp5K+%]I%b_5R'SFXTf'[a<tOoh(o2C8C2l7
`C6kT^t@XV=#Iqr!4<1`W.9T/1:#ol%fGA-*^9f)>$WD$\bpP<0>'kq&")&]q]RZ(KFq]Paj>T$le2t%
UM0Ab!->i/6U0J=$L:GK2ne.02/^)%Ld\8eD=AVoa>,ae@LT@+[qN5gf&>\qca1->l@U7_4%#H4+;?l8
b(H=/LDQpS,*tS;V.5rbjFZ?lI+MM^ool;g'sGfHJC^4VA<o'7iUPBN_7)#_EHRCSJCni-4<bq+^cmm/
/obBNSZMg$l++(BIj-->f,""LA*Ya)Q!'0/L0hn6>B29LK0Ml\[)1r//i3eK9;J,.3$/FeKkI@P(&DcX
='N-8>[0G0:4A=E,@?O2a/QW!L,aK<ZqXSm$lD)n7Y"7I>1iWDdN7F^BP8I(8-XRrNV8lTg;C:L5*ueA
,?(u[q`o4;Z/27kg@BWuM$Rp:UcFKlI[[`4hjS0@AY!+M4PNecgh1'BNp3bhm=r(_d.7]c-V2jr+C2ME
+@&%N\q$9A!H8$(llnVB<esJ3f26g5%(389iZoTA:C=MTUPdbkP"@\?4b2'(h5qo=XK]0!-UAgh?M?1_
\CQ)ALG:32+G,cBp6T[OrkB/09Bpta)9@s&Q_`FIdDhsAnQ-X_?<lWS96;HY*28<o/)9,)]>ISF'=aHT
9f_U[B!0r.rX'^.1)af@X18[L.Wa69Eos`P*VD\"rh(ASXcDH=P2]#hX$S:ZkU&tp*t:</F$7;J?-]$F
.o*(m[-/n#pa4_G(iVNL4AiN$7]A2Ad8OKC,!8`94l]#UpH=VnejM4W5LqY`dMZm_:6X\)bd<G$SePA[
[A<a3S;i!j37:*UGk44AjGhlaHR.c5[]1XM_:q_[8`<+>G`qH,;?"-PTN#F9+7%jPa,GBZ\W2_Z"K7VI
2/n54`6%@Urg'J&\bhRGWnSZ+KA&`6glkq*R0=rqn4>;rA!B9Ff!7UI?'q(5A2Xje>W_[SNlEs-D$7Dp
gu<S19b^<?)Y+B2K]17;9Eac14s&Fd+hc4ur/uS*S9P_Y:l^#?03Q(a6:fY3YXc<%HZi*m##';"!+[1,
qY?p>pMiD1P,S(jpEZ.SrQ0uO4T)`UFj`*_BUCo,I"mG*`:cafG-noA(^Yc=MM#X"h<o4l-.]jF42-cc
.k`Q#-,XM+NM#)8!NnO&JYXC\KF)1BH_:DafGqcM0MQ.Irb9u;A%C^:\`(mAkJ%ucbCS1/r1W0?KY9k]
qBXCARXN74+_**j27DnD)Y)T)3DuuGma^ZcIlXjT]qH7l-8b>CrN`<@(aP(DG^g89:$BR!Z6@sRfrqi.
#lE%&W[H9f_**kR6A;V+G-cf(*C&g[;5W>E@+;Puh_0VjPa:u8l'Joi=eOh<I$@oBN0aUm"<!?Vis<B7
_!=.f%%Tk?]&gM`GH>.iXrCRU[\D^>cqFos<"NRFe\,iq4k;\4NA!>N!s*DCSKt@Mr0r<r->WetHaKD%
7V&!jC[JDp*Q'eC`MAYlRsuoZ:,XurV:bUFHju.=i3]`7@B>GeK,HSqXgVF&f'6P<]P=loE>[JCf_7DO
omI'E:[$+&4!ETldnAZJirHX+gd\WMe"[qnR-q5_obh>CGQ^MT5l']6:<<J9DmP@a?26/QCqcp>.qfPY
KA%Mu*3!Dj,+3d.CksEGr'Wk7R/(UTC[?t$HQ"4hT8oJl6ebi3H^tWbR3tqc_1^J\YcsnHWl's)NNQO&
mrM^,PL"APi:`8uS%5:pp'*DAi@;f,[X.$2Y%;K)5h86r/!g.&a"W)01`rIZ:=;?`G!QU&g)4<<R15SX
knEUK;m\ACEsOi#mJ!_FnVlZ"AtRTp+1r@hSEV$em%+9G8Vp3nLZf-fd[OU$>"=09<9pu7TCsP*)Pi7_
?RE=/d";SF=2rGff,$Bu_AcS]%_\DPTVcjj@pAS`SDcL1#EOgnHD?:#O(5po8XD?e[o-b[>N;W=*'2Ot
b"HpUP0tBi>'@aO"R%r_9![4^aP44dA%(%WnL0fZa!5B*4cTu/9Zd1,PRId5?L+]FFba^[XrWrmEUuMV
Vr#jWe_T*/)EDd>Nt`s*VRe%>G9p7grrC?s2f0%Ege^2_cVQXbh@#bW+<<Y1E/,)&J,kp3eAe&U_FE57
5FoiHB=46&Z3IrO4?G*,jCJ8j1B.@%OQgTL,S4JL(t65RYMj#<J;YHE<kZ:*^cP&2&ri0=PY#`gA2KGf
%ikTLH69`&*O'E+G23])Y_RSZ>XmuI)gG$rpTtB79Fkh,6I0h"^`>s:*'eD$Bfa?KOa3=A6./5k"X:b5
`oA;\#PY7l%FA\%Nu\R.D-RZ9&sE']bpFfu2,3AN]K!ZX1sdZ%ek`kfM"`![,O2%>A06pXIP@(d,8f:)
;"83S+k-G)$HK'S*DE"KrT]cjDYi6`h@!W]IZQA<b1,24-=m*h4c^XUf:s%5Cst]C3NW]N4,nX#']2_#
WJ9XZ*@4:t,(83O)RqUA!-h2:=R05U"H)8.7Y)L))us_G'4#Hk*]jtLO,A^in"[AI%!d=:pNhKP3,\pe
>"A>^WjQ3u&S%9fg@TA)!(Z2ROHE>I.`5ij3N^jZJ(KAb5`eaiVh-4<=)1rK?8ac9>$qq,'LLP4OrHIH
W9s>SCFf9#XoXOl-=k/Jr),6)#,dFm0/%L7%5^.l!;QQo[0ZVM*XA"s'Ch<PC(iBArTOj<g&mpr.3;)U
"ueM/I#;R("iNYHS+e2<G>L>_g-/l$7-G#(oCMaS0\4%ehL'(8^^G[\&9[JqPRWoZSpIn]Gi;BAJ2@7s
F<.n_3,u.2gjJ3PY**!#j/\5L56sh^i/ZDVL^-7Sq%/<k>XWWqrrB#dI=ci2PMGk/BTql2b`Y')$.Kko
=5!f][FFBIe];f\M/0KFkqV,,/urrnNPXI&oS\X0gSlD_%*ID0.!3,enCs03/XrC+HR%4UEV?no+J-Y7
]dCIeNFB!Tm*)Ol`c!pY=?HSO6Y!/:M)mbEeG,eKL[WT?7^.9S.6`O8o3I>,Y\75!"F]R\*ZK,O$n#`L
T7V(9@,91>g)4!.#+LN<Sj<P)EK-`a's=6I2,\Fd&$;pblJ9J;N"/k-@q'kXW^a(lYgQ4b]).H\<O7Bt
Z-R5g^fj!MF9$/nRNoRq5uC2><thDjY.QfZA[XEQhU,B`8T,tBn`6RgZ[UVP#;]9`8/('Ep>`moe[+n5
^iNekIZ0A1h5MGG1@t3tGCg[L%:m[M6q`C,8g<q1`qSh5Ck@!LT&1hDZentSG9*>nNsY!A,usVmPHKPJ
i2@GK[qOC(.J0'7p:\a+_:4+R6M?9)i1rhuA>FrS11;tpee;rL!`FnVP`q[dZ0[WGI<X+Wp9[@B#EKJV
W4KQGDEuuKE@nT$ed361K.=lPPmi!0*(VZdVfPDXj2?Y0<b!)9>0g3Co&I>f8W`'MOEDZ2U0UYm7X[kQ
VpV5+YM8F<5Re=pe:F8cVE2lk/ubs:M$J"XLOO.*SpqIRSQF95R9-O2_TNj$G]1uQpsc5Yfj0TNo^$W<
>DiO;mD:&[;u&aaTP.ULWk,ZAk;X75"e]T=Eu]VN3LI_4XiuR53#2Q@DEki/lDD\q>@A`!C``>sdK%4Q
dK6>7D=08\cZPP9]P%MuoXeg"C5iZ(o.'u=U?mdp!PY(Z3(`gr0r4RpfSuTZ17>Y[N,W/+43)UD<,sY5
V]XBBmWjh%!WC]3amI/b=N<0lkNt0VDOO=mb!=<A742j[LJS4c)ZDdmH3&\TR*pF5SJekdmpB-O7(6JZ
4po?2\8DJi6&e+>!!-^+NG+DTURVOpnX*0![UFa*r>G"bU?B/qNnR;*Pn<>bP2bB?54h60e!<LE;@$rW
Sg;NohGB6q'+H#qgWr9If!H)0\Bspk,pR(*EIe4BGk9HHR*;[[@ci8JTdBkt&jY(>X"DF4#s)ofHmYtW
"M/^Ba,5'p(-.":OidV'C'nb3pIMQ>mMtQPUhmH3%imKZ+*'/O-ETf`mLY"^A2e"QK3#MUKX>#qMIU5D
'pl9n)N!u+'j8hijs?Zb7nAa`Hm;n9f[/3bekDIi$10<QJ2K%,lM`5/m!qX/I+mX>T[,u/g$EApp)guJ
SaR#gG4//,+T&gc.GDf?(C6Ga!TI%4f5$e8)k1?Fh5'Gh"AaV,8i*acP37qd$X2LC5MDB=g>H@[WB]cN
mk&<BaIPt8]'=E)EFV@YBdKF6H.=j1G7+d/Ba*C=-l'4D&nHO>Ho.C(7:jeR%PBFUUIamAJss>heo!#X
=FI@B+V7I9"WN*g^cJ(M^VN@Tc"YuG*\^Tp2p^_3m#RfdT%p#A"cW:)Z_W0?)Z3Ju]g-;$:MpK+3fR+-
0&%D*OF'Peq`R7bq<+;.q!bBF[^Kj[[uJ/j5`iU4>LQK]]g3s\XW3LR3;d2\0-AP\g*FHCDf\-hO&E/&
W[tF6U6ZnLP&q-QKo(HTXAShrL%aI-[]=5,@p4-fGb.!G-kLS.iZgi/r@QR]28)B-aCU@c7J)^PfKn:r
p3q*U#%pKKa/Ze2/&'\.CP2nXf\-+-c#d5YHB&28<nWH*(K>&)_$'c<,mtl]H?Bc<I`FFRdL8$",^Xdb
815,s%N_f/ghZbi;Pt<cc_9"@MXB7HnBG/>9m'M9bj8P,m/T&;)UhXim>0P022#%D1O#g(DJcOiCMeO(
/EMk2+H`D!Rul78XP2i@!.us9F"L%+i3_**hqKm<_"Q4=Y_$$tW-!G?54q@OcnZ'eWNc5:[ESa_a8@,S
@tdMQ6%JfY8?<]]blMeDLt,VH[Xj`Nk.#._H'/3eRS9>,RV;nBKsG"L@GL?>_q`X9J$n$iScBjXeRQ;d
<.-h1A\(AoHkt\J1t'iu13\(Ka),m$k51&oM*EkKFdnp3e:SB]r\B]FK,6Y<lp'+@0[ps:PM&m'f"+5;
iA04uHQG%A"3iu%CC2>^f8jd$E$!>I]DA6o".DLuLcu*DN2Hh'4;1MJ8mN_/H"\IJ&bh8_8Pc,Df'=c.
SuicFh,t@"DqhXOVpXHZnF;uhCLR3]NNHgU#40ffP7HVU>1Qa#6-K`N#BO-X&]pAT$SpN*S\D]==2All
7?)P9Z8XK%nOAbCCp!/S[(FemQPt8pm2d*8f6m.9W`5+);0D;Ef<jdCO"a>dcJ>OK&MnFmVUj2=2*7E@
D#Gr/BNccX'g-8k=f6Kga`-si"?6[.>\,h<KfX%TrgRiLH\6,\RnV&GS)QX8Z0Q&i?/*%N:tN:YcaI#&
nb\S@hdaj!kV^>J!_2*X?Z*XI<cVHl=Sl5YmNRcqLCH5kA'_tA<Ns)!1'P+n)XD`SZlL)0?i_iAnlD#U
Z?NRmK!rL-m9@?_oM"SNVe0N[Yff]5hsG3J)n''pdI,F?dmUcj?99bni8_5KA<1F-qqnoCH1)&g.1N^c
["E#TaE_QW&HUUp;'2&>(A;!=>_(sO)@W138^]]#[q4(5\(+uZDZ,a7h6,3oVNQXdju4\lfe$uEiYVtV
4*JW*-h0G9K@//P(;i_(`'Ng\6cQ51Pnr'<]T?OHXmRQ=F@mc\l59HU_*(g2MS28?clHA=^0QstEI2l"
boG%6<S,`("%Tt/A&Kc2^u?`['Wk?THhN'cD)'eX."_$SClaG"U4KmHe9pm^%mQ$KHr.Ki>2:EEYAhn-
7iMC-EfKIkbUk/P*=7QBUMg8No&843&%P$E[Bam;JVbh!:&$PK$R3\H_#R9U%]kFBc&r+Y:Hs`H!8Hr9
8%WS-pSsWl=O"ct#U'-IE%0b)Zb3WNGoM$ZFcOoO=N7MpZrk>9i+P)7'cIsKqV)KnB^b(I.`7c\Znr!o
!-`,CJaANT)m-BQ3POXAqjeX=3UB]KY8'(dO?46b"%=^B_ZZ!*"s*<+<&-%dd>(Kf,RH1DRI(P!FP2,@
=$*KI.,<P"cP#%>ESuhjCM+*:V\P2qI0Kn>k7Xc"p02AnXq!5YBlV[r0RImd`E_36cZZJC;o/C1)la:Q
-HY"2bLl;i\-RUMeOf-\!/CTbNC47<C9*)nqqG%-&Z(a%::t8/f*Akh>TPa*kqT.UV+"WV@%$,aZpTA'
H[%kq<,HE?mLJXqLQFfEA`OE^4h<[%PWP:rehC*3h'7:I%b%)<K*e/=k<KOkSb7Nl4L0p#3Nf[.!:]!p
8D6QRo/`m?e6LmS'l@B,(<4d,r20fjlLk+aO\(iu*R1hZ*o/&CnPq=+]R?+08V+,>3_Yt2eL;LB0[0C#
2TP1:%DC*-XDMS/f"LYL)FL449$J6JRibpZ(=r2Bi9$@[:Eg3e_!Zd`%<,fKBpj=B9Y[3?An29aIb(pg
P$68:#Ke2AH7ZeoR.:#>f*`L'%[$g+ehusU;!Lca*n+MAh!kkmGjR[7.sC!gdk%c,%PQFI%<%i5T8FF^
@k>'Whmoh.pV]Ub1TGP5=XnIY279itc[0e^Yf$Y6OGSmW.rOL?melA*-U;31b.mX2ESas;pML&E4[3q(
S_>DV3iouO/B,6MLGeQJ%#7@q7#6q[&<aM?4"ZbR(GM<r4#kW\:Mm[=goGbf/p6$'>gNKFG1&Hno0]<Q
phc'8L#23l:uC-\!l'YOMVOZR>D&OI!,Pga"/CLa"8@.`.Cr"CmXuIB2plCC,5/R?23$#%[Tt]Yd8>?M
p$LVgo`VX93d_\!U;5TO[EnLS$D6D*DR7BH"0HOE`TPc6#9HA&H0h(8U2>fDm@p:Q@PoO$fBuY/8L0iu
eM/>]?c>"m3DNKT.?pEm!C][PJk:55P+Q-DgD\6@AS--"Ur5OL4-bkE5Gn0Y.q>WG[>hB])T1=K`_+_F
'N(,sUuFq)]:)8OleC?sj8(W6C"cq,\]o2SK0RNMKWAC-MERD67[n=E@Bt%m8^J"W5V3q_*^;LaMf!_D
gBE)'"6Jd'-WufTP[!^:Xa(VO,C+>L\3%1/6`au7X0C\rZ.@b@Gic(2*?$m6?aTQ"L:tsS!t-W%[ZU`+
f2m<)"DR]m3Xo'XLYD:dD,u:O7?+RSh=Q@3d,!(ha2qQ'lI>9G'.W_uk+;SQGlZ&GmF1ZS&uOquOcnRp
9m,/ckfcfqOPagkWR)0h!F%1LTk"$;m]Dc,cjS\K!=gG&N^$'q%X\sEWr#7mg&j7[esa$4cu&KehsF==
gp<2mPh50IOg4R?_qi$8'A.\tS9nEpD@L8u^L($O+Lpa:pjPU8V&h%%`]n,p4m`ZtBm.>&%Qm5`NYFNe
VSd82EGM`[A8#3Y^3:6`nQ5;;Ls0Kpc6MPukVEH/)C+c>`5d)%lc>(D#)>V2i>dUt_lBoG>ZR%kZ-_**
&fWM]o837CR-.B-!&R&l4=EL_n(d[^;lM"[J$hA4i&,-/q`o6EnK'.`XZN!`%^7=d<dRD#OlD)[#XE-f
Bdqb0T%Za`J>+s-7lp3?98&GC:pS+39F6A;5q4dIP376,Ta/03*+Zb:]_rUh!2_(9P!Og.fDU&k<D,tX
Lss\p'tT\3Q8u8Bm@N#<:[*WO4gcEsq,OrumQ(g_IT-D=fJ1D!Di_]V<fdnKQAK<lmk_B*:7c2eLG?CG
[n2.kE1P8sD:G37DPKpK$>ac7IaEMl`(YUKR[t_TG!!TG#O#k*!o/-NA$j<<!^+MT]_7XQ>lji`BW57k
*Fj9(>#(m6"8Q7OXou*c16##9q,U.Wa&:o%7*HN_dpIu<1A@?Ym[(T_Fasl0c6d\!=0)2"a__Goo\LnP
Om\2RC&!)*qJ3A79%q'H(,aCgF=))2I$5gu@jb+@j?%$d@$^+$Nm/0qQ;+Nb[b_FI\7tn[14ttW[B=]$
*9dMe'UT!$fPH/j[)"d?qHWT_^=toaaDgj`^dimsWTCM#c6#C(`n(Omn_<UY54_<RA/>+VdDuH3r"aYJ
b\aEsYQd8/!ne4=4p:RR]b!s+D!Zp?mOiFW>JOjg-\9TR*bqh.c.dD$0`+M'h8bZ_S,eP6Q]0N43Q9pE
LAP8U-ZfXC<$PmZ$`biZQM3GcXplOD<j?db?t$!MAXYT%1Z)"$PtfT1\''3.4g-K/-h9m:>tn+97@PeZ
h<fh.,L$7t5/t">%G*O.JY[l`"$h!(!e;al=KTj#iZ34p0-&!%)'9A(Q^O2Nd*WUn9*"MO*2mK,[d,0l
AdAP)4p=i*M';Hqb=GDJ.Fk19<*<L9/0OeEE<3Lef5'b.pn_9J?]Z:P]'OXP/Z<E-$&8t;F<OWJf=A=L
^>DSCY<3%`8c."dd.TRBmV^Vm0X1<e(CoY$g?Ypl*5F^-\@)m:%"c`Hq5]gqn,mKR6g1fbUN*B$M"`k@
rhWUVD0a63H_7^kY#mlO:9u$g[!c^E?2@F/rpOPU-9%#)4?I5-gJo%OW82I.AZlVc1u&4][=q?$-VhK]
bek0^)Rha3j1'PVmfF4[+MmI'U_Q4\UqR`m%qO)HW[Uh`';'kiSPi@\<0AV^O]1N]4GFKqiWinkO5B5p
^#*NC*]CR@SQgXXi$MULX?)uQM#<'BZ&f>bckA.SD%t_(!*P9+@5YaF#9K977ctd4*u%;u70(B0f5#AA
]!f)uC%kC7IEjTXkkV;=S_/[jqFW>`WoDLpA'Be`+p=1Yju3Xf1EQD%[bt`@-<`p,Pu6@";-=o'db4]q
'+Y3PF4f`6n4c!-5,rYg@m8LPIR19N3$?%Y>8pfpcbnl-HHYV^a'iu\h$2Jnmf]$P3:$3]$C,l&IG\ht
Z)i"M"9H'OHOek-#D@Q">AC:LQOd&Z_at=O\9#:G`21r-%@XK7]Q$;lg2(OBAT1tq_"VOsXl3dIMi2HG
f[@qGYh/M:h'NW4+djmjCL6D2/H]ZID/S;#E7a=Fh-FVsY$i-VMRE)uCi*SRr=]G"U^_dk[I/=Ki;:Qn
g8o7':;52dg'H0dU;'K$F'A;)Bqi&C:e*DWq9W^TbdjI7<G;AHi]T![&gLMM&*64g'\Q;rD7b]tF1;mY
G(6GU8G,e3bB#*`gt;[uKH20;bUJ"fAi42i2mnf*mjE%&lS62aWYaC<>>.5d-YNTQga?G^2()j;AS.&g
URf*Wbp.$2*),pa&_/#8p>4O+*6imt,(!,%"i:b\q=Z3RGW+Sj:!Ngni,K`+]V>]dSn&@FmJ*FsP]tZA
hH:seHaRNM]ZL=BEBKj0'_(Eo`eGb19I%!Md3)!eaPY*c.$jpY)SfCmDYbJ@r0f%oNK#T7UknpF.5Ki8
pV0Tj'B#6L?2t7J[@ifp"*o*O_$I`i5TH@X4LJ"jnn3O"hsj+PXOuP'AY=,(;mm'*ZB;Osenu'"'-8dn
a5!^RlWiTONRP9&E#V'+i-"CIQS5K<-*N<?J:^-aD^A_J+o>U9AVI]S=d.0uhLO>10$LWiF/roG4i.GB
EUm+G\5?@TUqQ2NYT6N-nlbFn-(,jQ"GWJlK-t)hh$U@:00'N>\f*r-2JsFLf@k?)Bddub<neV:0=%j!
3lip-a%P,VkA>6WMW8jG1pf!fP&(7e,]Ub<jKCW[QF>Ko*,B>]G`BJ/\:!F&jJg(qdO)3M3_<hAU^^P2
SAK+W3f^R2[_*,JJ;kMLT9ORMen=hZm<(%(Ru;n*BQ.n5aTEV0,9!merepa*\ba=p!!rJPD<:LTpXfWp
D=r0+E'KfRpA(Lq[4X3@*I]'](V0"2cCKqZ63k,J'B:d;cMLp0*lbY#->NfZ:=//ikMc"%<H)t/]@C\R
3ugn0-XBK=it.2ENdYJugK7t'Ql,rj"l'UPbAGM4WnEMl_VM;=gN?H#*oCb@1CC`L?>?dWcIN405T<l5
gU5m&PoCn0.bo1T*9sW3HT*i@34Z3pE$chIq'sUp%_=90N@o:R51pAW4rVJd$L!er;8d'0D/E=/$]/qp
r]k.P&dJJf.]Z$S?LLS#='J$rmaPr3LejG10;XqIg3=$BO>\+>q"@iKKC!u@1JlsOhp'd4S_6<#6SE5P
fd97VI4[;I9,#_G[bn2t*Q13^riFDF(:qOJ;5^&`;#Z*V2#dQ\"0,RK;+$maWO[_6hkFrPAG;Z1qYF2m
7?/G)aI;`(rpee4+2>p-!XOlqp`BG8Ek-m8Jbr#nOicu/qdt<\aTG]\(@1g4BW_!Z8_>tS]0JIe8*:E@
RhHo%XN&@tM(dZ5"i8s27r?#0X]kXW3+:YIV!Y89k3du=P%Hr1<LK>>qT3M=/s_8pi*&LKp;:>rd5!gP
;<ua@1T9s4F+r/S+3e56d/7HPF%2s?&b7T(7b>:=&iY(0m[gLhl4'm=C[>csdAs&#'Tq-L[8N4A+#9;M
GkBc2dPZY2Ho+jaV[ZVL!ob+U-\:9HZE]1)@=;cSBItUL:R[!E(:h8r6u"%QP6kDhk`T0rMOrCWm=.p;
WkiJ"K6I#197T5r*BNpqg?`E,2F#XoN:cjq[Nfk%GP?ONZ`I`@Hg38,9jhZXakemjRPb:3+<Y)cNKi=.
DFJ`.O>PS.U4;([RpD/g/$cIZGcnPl>"c<2rc'[\M>U!$`Fl5MjjfZ"X7dF\noRu8j07B\"+g+jDKARp
qCpQi0FG'[?6QN=_\e_?XAnY;VakI1g><$Cih46(S)8Z\)_S5ZZH&LT)mn1/KcH''5)mjh(;)MYc-Sj?
gs+6U:Wf_<K5M>)/Rto+@,Fm"A;A4:AcU:KB'*0[M2dF!>72fq@o3+,F$(Q;.&j%9SGQJlk;B'$f8Rg(
Nr+`=YE,:_kR=?#>C2lFpD+d"_%.17c/kQ."UlA3l+YW0kJ#N%(,;JgeDK;ZqD6:@qaX6ZoN+nhp"J.X
JL>PWOnk[66:n?D^<SK^01iR;dMURCLG!b>U<TnIqLq/efjAPRf$RK:77#^j!9PNHN`F6nC:`^M!OgR-
U3dEsB^h92qqZLBGI<D^fcDJ4>W5:(U).q0D/7J-&dP1?#MMc*[#W=0['7Af8*Koq*YG-Ep1N+LAWLp7
2RLD:`2dBe#P6(67G827#Zg9,6Z)"@qj^>:GXll#WV`O?)s?&ikc*;q5]$BX*<qC!)XUkV?pgj_,CPeH
;l\]93f[c!0S%g\5J9MZYW+Rg*)<#a:R[K=@N$L&V%+D6_$_[=HQ:DP_(Ufe4Gp6+?"*JK4hi@e2sI38
OYV8@haD.Tf2Mb.J0Ic-U'O$jG*3u)&`:]7WlD<'CL_H[%hk`]>Ac58lSo=Vq.\!NM34!5QIm_Ef3I%^
i#i47L:t>9G=L=G*nHg/,2uipT+10/151cX-hQFpBF]-$QSqY6U:@bc\t`dP%acDJC9LS.pUep91![*q
(tWj>kU>[k/!66Fca(/5G__C:a-5[N#mEK&0;eHQZh/II=9l4Hi,I_L$\,,*O-XR)5\R*5hF"["Zo<%g
]N01I3u3`L?%0"tNR%A#la?4QPhOZ&HqS@\*S%Qe]o@oc"pjDI@s=Q4d7h7J;fARTJ8=khY%SCc&Zk]r
SJG^Qa_>WcM/tNJm#iaN-%q*b=.,ID]o?e:X>=@T92+P[G`Nrc)RU`q9sm$k2747.Y&*;H=P)d$&L]8N
Xd3JRk;^epM4G'8!kQUb#*W7[<P3AD\Y\#>$'J;8ZWM#[#B$Yo2:aS<Zj?_LG;A,!74o<,>OR"`ZK(Bd
f6]d<i:!T3gE(#]cE4qVf\P<:mU]3@V;ui]%8q@pZ'K_.qM]]cOeEG^DS'E#&#eEUa:o9]3IlEf!"_-`
cE;1;Ct"jLl#u2PXRs1u>h:h!F@4faFq_%eSB*XXpH4XA1=BZ<g.mdgXl8EIOtmm/SAqstXkqG<=;kK:
&l:@=fASX1ludr*BFclV!%&^M*$gi6D^#0-U`CK/9$57hGp47]k$d*R'T[_3%T9NmkQaE6kGfP#RXn&6
IS7km5n+_lJq#Z?IP=_SWg8uf[S'//f)cq=cZ/`YeD\7%Nl^UfLV148I4`+`qtpckmY8l!^lChX.la=,
2MnDp*@F^r]P(_8YZb`5>Bk>CC<d=<q8-,$fg5:$['d\'#L=_%di<V*:$dUX4!h<qPht^SCUUe@E/lr>
%970`dsGi;`785&VhbRbj`ae\R8#Pbm%?]hO/VOp8,AL;D8*-TZ+pG$,Rjsl!$hf'.CW>X<S+XCLGZ73
UJo:]b,pklCoXL&(rfQ;91QM<G<#/QLA(n_Q*mbQ%Bg<#K&Ia^JWsnlc?2k6_K9FD"@/e,<[t5ZZ*ur/
N-eh^ga!G=9`.*9>a1&8;(>6'\]=>9/r`F@a)lf:c_/cQ/<JlRJg&&td0ghX(-0Xp=<K^b\3'r"L@?&X
/"0Wm+>UX4'0j3Rn,Dt$)QbS[`-"MW$HP;eK0UQ3YOZs1DV^/-IS2FC`k4D6a.IHT)?ugU(bfMHGfJI;
h33D2SBS5r21sXb'$qlf82IHo7kLVX5ODHM/$oLuZ,Oc5&[g'C!'5r,8%-e<\_tGfF(Oai-UY=i)ttPG
$-(O*NGbHD6lGu)\k5gYq6$$D7Fp<6`p=C=:U[Rh,afqTV8Jiak>a<L2Ho7m9,u\G"?8sGQOV?g.PJo_
\@SRso3?&_-%nkG_22kjJr+nn'fD:7`I]*+k@l49-bOJ^.nOV@0soNsg=oo<c*k(u"*TuM0PBlHg"#%[
9j"N?D'$U[R/dcS/sG@kM<MA8[ek5dQGD5:R/0\Orr@)!Jr`_92b^X:83c?3>"j.&n:X(j3iQ5@be"oK
[D^^A$Q0o!%[OS,g^cRl7]3u3mst-J34,s;#a0V_G_hWs7RJ0HRmu!oG4IeIXrDK<4D2WEA_UFm\W=,2
U!5DKR_?-dSK6]Olh@,BrJB"7LijK`D(!rVYViUtd@^RfU!R7qXbq"mbqEIqVf'o(,@5h7Q)`T!?$LMC
k-Wk.D7-0rh=6kIZHI;<^G=1,$c*Q;C)l5Gg?/.t8*!<Oi/h[;f_GR%='n%],`k64)'q/.>/MW*]A3O<
Ze8r4bbsT&kIP182:^CepMp2oE4+$nQp8PO9b_.b>5,X,9=4*cfi@T\[C&FTh-iLoI(:9j;g"+7NMOAl
7rSU'R\Q:8f3%rO4P'4@?N_.[%Vp`RK>M>gKE[[la2tZ7/9?f%S"r14*M'Qg[Q&u;M4XFpa#T:Jqt@GR
^5Qj`<j__+)LI*\4n!2-Z2)\o>s)#blJC3@K:'I6fl/PQ3f2n3ABfh+B4C6(EM;knYea]c5k3qLdA>lG
Dq[2pqLRP8`r-BgC9,s2HX4-tK0DECP)aj`Wf!/Gg`@@QB&1aNk<E'D')Eu6\pgI<;h]#'(8%A0P9tD1
;s>)VL/opMlg?j)%)@VaJ\_+*2F_cT[aH)QNq"]7jr<s,$E!LuIAOPFK^)s)*Mb'&FA6RU=]n%lG#^(F
ad1$jS--I[`k,(DDJ\!Kes?/R%QgOkmMmU7<b8^cV6.2`AUa"mP93;_7-Q6=hfQ3QBkEA7e(L_SiXa%-
In=))fWMDU0<*0/A<!D#!k02c['Y5'9Wm-D_7lCkRVf(?#hXB@"r1X2CW4tR9oWk2X,Q2ahT&-t!C*)s
<cPFEZ-RDO"9"4#IZl\[TTR;jV'=%b)ZXqH[g'Y79;gt-790,-iQlYb)[LG\I@u[F\]m0#>/+^Gf=Lp`
[_N<&+iU])Gj)E=DJO85?;&5Hreq.+C>ePh)Z,!U!*<401KdI]Tu;]:-%L?`-g6'hl)Ge03l5^g!BXLq
@qY@(Boh2H/@run?nZ;rf5UqL"8@KDrrBGG,.jGhfjpD'Haj2@*Xkj,PZ62Yhc3[agIm*J#,JJk##+de
UPt7*m*E*=S),L=mDYkA=iC;]),[^MM004ZF*G0TF0pNgRsEWFV#HX-\D(g]K52G,kD);ddX*t;JWLh8
JELDMD=muK+)*$u[`a1C8@f;EQ&jVLS5Rr;Oj40N!o9"a`:ni!KIg`i<M"mIgLC5'C_jWW>U2?@qSLjd
[Q`maGdHW>9EO]-2V:$(5#N%?,C0n6k>d$q+`"-F!Ng@ES]&PheT]qSO`27)@:1Z0qmMVB61`K1bG[Z,
mObE0dR<M[4lrg?Ir_TLe1PUh)0:keo\^O(Dk"+qJ0aCoe$gFP)f&sn`3>Xm\3If&&rQ%T_=qdE^`utB
IQB!S/rZhMO+'2L8Hlk$%jdnGI/M?jX7`AjNZl[Af.mYJ5<!<=Gt-%Zb%g#R<;jG`Eu>of"E*cd_&^As
io9]f#+',7JHt,@F0V;"Zr:175qZqW)g3;80MB&Z7?"X827u;D80I^Q'4FRFOid2g+Eit2L]b=BRq9P+
CV.CD02;<IOUQ4]#"Kp:l,m?Kf%"B<2ZV[YjD#,!r"O!$+9s_60HcuN'8AZ*5m2'.NHjOscDJaT^Y<7%
2TE@b3m@CGeI>uc9+/k$8Gq?Z]eUE7dO%L4Jd.YgA(Jt$f9^j:fkY4u:BY[X-k`EV'g$BkkBd4?H^ZoG
DSZgC%]1O'N3c`X?7FSZK"q?r!SW,#a3Tu>23lhF[(=`NIZ^K6F'pr!11_3fY008ZV3RA6Hd&jhBHAlO
1Q,P@%6EA7Z\Nk0D4@-c=iJ1p7b51SSl/bj2>nmXN009?D7H[Qm!@Ai[ET0W#MUN@8Q!0b9ul@!`ca3r
Rk,hE!!i*eeOJ`,e?^B8>3Cm(pMH5+q\u`%NRb>Xk-fm5A3?!bUMnUC#2\5TKbr-@**h(`BJ"9uT=N6d
e<nXVJ$,:d[<f;eFm.Fr`NL&POMOl22@$q%\^M"U+$r)RoafJ529on]brZf<=o`f-1uk3k)9fP$>j'cb
EHuQRDEG:ejQLkZY/Xg?HN=mE''!e1i_12O49Y((2YsPQTJQm8EJIaEbRt5D9/b(d^0boC_qIOsXIF#F
^pX7u)NoZ0>MF:bgTL:4d:6^BO)Q2_goeC1Rk+.aMq]fl(2>b"GIWW.`'P4g<T;cR\\f<Xhmg:Ai*jZI
K1R*c-iJi9^#pg)\^%=14*Yh>nb__aM4aGheE&F/'JOAH4*Wk)r76KBS&V'3O+Balf6p\!_T)JKM.pc&
lNHJ*)q8Y<YGs)pCGL<1_]%`HFnYP0&[Q/5mH.<M(fud3c`i1qK5#j-QZ$Pg[-lIIUDq[mp0-jWiZD)B
gkcXSa0O.dl62EQXs8,1%7t7US[d!VXH8P`EdD=E?6*php:)%I)bb!<cj3fn+dP!H-G(fS!.7:$-!.$J
;6d!mpGJ6IIcc/*R$'Z]A2iU3-H\WV_TH%u,\dk5a5bu++Za?sB9Yc)*8aY!ci]&28DsDLTk3n`&AeY6
m?^KZ#]A,"Ie?L9FZ).hh.+-!gu'+.U@tk-DBs8_r3"0nB2<++aJ>8pB!YXG>$].SXJYcf9<cOh[`;Qi
2E%2%CH;IHl1BYmWq?DW^0=q!Fr&9e0k\-pItu-M%q]VE`rHPNFmLCP3$gp>Vq0F%I=p(sb8b+6rB7nc
`Y#RkLCV4^"bGDF6qMRR(tF_a_*nR0MS4AuQH17mLt$=!d/pn-Fr":Z#/e!ZSp'Z"V&pMM50F2bLhdq'
(=[UTD;+/f-Yso%T,>90oc<Z*E00Kt:X8Q4gr=XBoPPq$Rb3h"a:a/.a"Yf?53gupET$9_E3%TPb\$]h
Z5c.KR0Bk5^1jX$ND_.O3DB'IehPDlQ^7e%<p?^%n5f'R%`s+NiWh&TBH*H5N+oHU)SirrjDEB_%?B!e
PM>Rn3?Gj7Zo_s"J8DHB@?\lDA(m`7.o*4jiFUZNL4\3?#-Q]BO1;cJKqF!T)b#4TI92EE_8Fn1)EY^M
?"R*]]qDd[=gb@U=Qqj`'068DRk'Au[iMY0JEFRW_5C#UHoTa"3D.>lX""ibdc(6XpIfZIjCir?.:qMI
f2q5o$`Wm)D:#e-->2>=jCH!:FaIi!T17*75@2.Hml[A(S*;S9Lb.;]_!Z?;507_8EiZ1+3l^6J[]n3<
^f]1VqG9![>UMk(9dS>FeDSA$Z5k2NZ`b^"IT:.L4"n#.hWjBNCWdZiDR0%WSn<44a(t#W@bMaor=\'6
COh$Hn/afGBd]h/+VgBo[dVU(^6t=FbW9rr/^WObl_*`9@&aBk/nLq^3"c7+LI;[IWf<b,1S%a)k-,KL
\-O]3EH@Ma5MP+uA(P!F[[Q9g`s4K":`[lh$%a*Yp/,?A2O:4WNMduDW<&=.88sb7RdJQC^'\!@;5P8o
mrSXmK-3[o8Cu-ep:6JC3q,VZ3MF7Y!(?8CZa-j@m^1`_[_<6ufD^&5ma9A"#a*Vb:tYY?*L&bA95&Pr
cLBWKiU./CkH_&+;YhHt>1Ws]\El9qhqm>,PNIR*1S'WUk(^;a=;YFa)O@b>]W.B&*gd#,^jAiM[)aB`
4@52cf7'`/D%3l.>E"R_qm(]1P]N%8/8`oR=Or>aq11b$3dKnF<$/CmAE[N`Ie8!tVX-#!ljmmee#>O`
d)8DQa))!Vf?.YP*jGBB/[W4AqL.`>CpgUqhQ\&-COdUF![6@?qj$T?Q"F<^`@l26CS+mNE@igU)inBO
Pt*15fjM5I/@"[;*F9]o3Nm@1KLKTi7-;,n>\8GA#Q'a]#DY1`8DTrt_cYGLDYH+qrr>gFbdHF7RVhUD
7ALB;.EH=*Qa4(VDn5;ll5iEWg,r3%n2A+E"F,"?TnD"_Mb'qaCZ+UldUiOC=@k#1ltclW+%KH)mYct[
:@MPseU]V;`ILaIHa1J)I:-o59E7UGG4s/X<HITW^Dcg!]Fa>=b[P3+=mNJsg-@5!)AnWBeO51JORWjQ
qIi&A#G4[HZi\RJp4t)!pNWS]P"V>kq#0GH1p*1OdO$4P#h.*fPX.%cif\>RLHd\_Dr15?#1cnun+='4
l1l#IEh)n?9Jj7?Fa+/"V4]'"$H8Yr9PeCj7%_``3'Y5>`,3dBmJqg[BnoHd'.<8=K`E?tl9.ts?9V9u
Z+/"c)g=YC*q(:sGfGRs9oOKdenpb(!"_q7[NHDfnZbHYb`X.:JM#>XhL]7lieNic0_[W6gDo_H[]ogM
dplQdkrsT;IG22F$-0'7Rugrm%kKeGfmb`d\>QAU23)6AD,a/$g?h0XGOLW9NlmA7;7!3%?+K<1-K&D9
dXHi[]b_s-L"+i4NF<lnX<ifJ$/OLp[.d&)[;B[7!J;Z.Y*t4(,fGQ"?$qp=9U<FF]</4%F!AEOP1Pe?
'DHt[Oc?[)>t]A%L7cj2!43d$ZmSb0;6m*"G""!b[B_:l)U-L35FQj_:t!eXfooFe>AF>q?uP6KdHr4S
Ohq@*]$N)U3"Y75cHnNWr7Q"GY3bM09gB(1>"C@j%E#QbPn-q9#;l<N"LJ.oGCONebj(>)JSJq6^Eo13
!k-!Y9Y)T:FE_j79uemDDl2hf>1!9LB_Hj+\t-md%gHj!juR7![GL+tG]&X.'mAotMfVYL_Udr2[Np>Q
[cA.Mb3A(?Q<SF!lON%Y!<M)Jh7sQfWT)kT.XPF?O^KbVFnWb;/g#@;^FGQ(]-Y`[fJb[J"gE@VS$`V7
WA_Q_9NLY+HTsK>K@)9"MUa+e4"bt_fWj=)2!B#`]R@a8+#2*FG#Ko.DJAgjEd%0J<:9#EbPO-+(:50&
-aqFEF*T7S\/p>FMaNJDr7B@EGLCBDH<h8kmCp%0)dBD9?t0>TBoUlZ!3Xu.Uf\Q:VFb]Nd$H`9T?=ID
pGVms]qi9oc0PR+#J:8&%/_8^fm_-!>Fi$e%Gi'm6[jUB4i`?TdK<80..4@sTmVVtG^0O.R+8PB^B?W=
X+1Qq$jV1*KH7o1r_IFt6Je8%oj$))l<-\ehDVqm^:l`-cu8/n30\u)P"U!V`^qd("sj19[cif8>g.hI
9:Xouc_rF.,a(?JfC;eWWUuP7;b1bZhW=fA>Vn-N=*eaR*`c2on#CI<,_k_=51&I++%OM.HLm*92\q\]
?"\L$5B-AGGC=a)'5OYtDDjrCVcY$>SS!kP\qZbL81ah%hC@A7EFp^C4,@u<3(/45k(c>8Ns-=HX08U(
_%&(/,jkT4Q(O*7X@N5U.j+E!^aE1MJ%oK`B1ECYqie*t[#G]1jM,*E^b;tcJC@i]a1Hm%!*spp@qFiY
`Z$B/a+lQVh5%E+"$NA%>&2k[?'@X8PT'M'"'loWgdGlsIG/t?eSY"AH`c'U/p1QmHp3J#NY0eBMlc1S
YVXe^OoQ5Lft%uKoVBX8D[1]qF\d(I_Vicf@U`uj7:!B5A5iq(K:LOb'C@#N%%Vb\$Z\")d,=<B&:I0?
+R;/.BqgVkT,lNE$oXPiU?_\B&*UG.h&:0\dF27\<JLbkqjfM0eIZ8AGkX$SHUuM&H`Tn)VJ7\@3ZD1F
Y_a`O0g%$BIU/3Hfk78HL-O,>"qK%kSu/$udEiT],GcQiN6:#.Yd8ejXDH4ZZ(qUY\dr;s]=3>j19dpd
_;X@m_6p\WA39U5JYq:)K<D-0ARn$Tgg.GWHWXMETC?f\_#a#FD03%CAQA.[#-f>U6V0$qB9*bjM]kh:
DH6,!V].U8/ZlU=G5=OT/rMQtA=ZMRd^L;G)QWD1"kC,/Pe!H(GIfk3'<(7u>c3Q<8u/L)3;)?7lKiuG
CPt8I^GhQGCE2Tm$%XE+^`E&JRt5)>X1k;[ggS_kGI34fG\P;'oX[qJJ$NNoL=YPK?R;L&Z!!^CfA,g)
b4W;40@C^q#$G6$InJ9n?h-M;/j@Yri&Oabl0P7=C<Ugc<nB9<@#$pg/SR<Zh#@?h>:TNUYOu-ij.ff)
)B(Ve&Z3>"QOSU/=]gpG7CI&EG?(^L8ML4S[)Tl;ZJS^+*EA]_28u_idAL\^GZKHUk?D*B5WKRl)("YC
CHJt[9J"BSor^2i%;`gqFFZU-PTgD(97Nj]EII_$HVFL+)_5u96\m%c"R2Y8G=]1NAWF$mX'N,n51AOR
FjnS;#Z8;/f^Rcj*nEDYgAIbLK-.(aV28]#U?gUP/q!_d#6F48S"N94*)%_)X3Td+CFh#`4Z>46"&I,7
TXDbA0Oq@n'qI-&W%lo_AG_1L$YqVT:97mY,B/ZiX9.$"4et%S+Sd2oa9*Bknkoo:ntI*_#iSIaJYmu4
.-ojufAr*C2Pc5%QSRlEWk-jXHXkWJ5V74AJf[.!*ULf=>RS5.5]r'8cp@BCM2p<h19rY2NOE0E!Oek@
-,'J:D4]lP9%/69W5`M^Z`jY"YdR*hI82ZUi2[DS!3acn^68'0c`/r'PAdf5%7/M.0aKd![$'`lFHAEd
DCoO^,`OhNLJE1IYWA5rT=D89gHdFSDUT3<goOW6ose8h31!1;0r;J,f]-<QCldM-'m`ZsY*VH0)D$"c
[^%am8WN_:9lEg;lOCGrqO/S^N(>_d[r/nS.c)aZfWTWbNbtQI[C\e3i#FT6j5uc4(/qfV5fOcWoZXq(
1&3doP?MY%&@W":HYU,d:1+O[<Ybcur?umOn3o9Fa_UPP\2YPjH^`k3\p-p,b;%+L$CRSu5ReXBc&_ON
$oYE8d)NL2k)qqcQkBB[o&2g"7,\fUl?XSDff4<4W\+=\\djMeFmp$E$6NKRF.*4L)do3HOX0^I,#sZn
G2.mjV60FrCWt(f##jSdp:M/&F'/\+,Eqc68D+q6D,SC,=nJ3gOOs(KJF12uP\asbASu(E*PaLnirB\K
=n#=eBVC]t@;b#d45<48e#Qaq3[-_Pj-H.Z_0_Ve+AS]da(0$]>-UOa?VX;)bCP):BToK+HZkY+R+RY3
_ruZZ^`+8(l1B*dbfTMW!)+L"<+W[4!:D0qo<k8JD0;rR=2*ZA@5-;,#AnI@geU*_]&&8JQaQ]C'US56
N@b6&E^]4#TJk8G=Ro_AhkGkG]>a1Mp\.#!):_p<7d#bkr?)*Nc$$A%G8qi-D08][1*.M&!S[&d[H'tn
GK8Wt*\)&rKA8DrNRg[@!.Z;R4F<dbo]rU"W%uI(?jqBo)F5YK!7=0<NU3X*(-.?_A'Y>WM:?6#Ih^/m
6Dh@3eD9I$F$27WSjAqXn$ro@$:A^Ues<kJr?*?7ESr[&G1/O7EpCfYZWeIYmrLd6r]o<MnN=3TVcRkR
c&<bM&FI5$c$$5Ppa]q,=^1W&$UfR`,>nB@I*s?-0dE`[B1oP3IoHW\b]aXR*i,F&`h1GKd)>2`4tHIe
f$GDS=EHA1DWoe9n?$&aIT=+OgI:o!KA7EF%5Fgd5LrhXFRtK/R0A2b.fnLr:>r_NC\KR=^k:c95b>Qj
1"s!N=(N+W[(,P+gbA:?2$6t-O7#Z?ZPP'nb%s2i*7iWe[-QD\o.[L64Jual=>dIi[(4`aR0VO)UVmI.
c-4#%2R@Ml">SLbr>Q#d`5Ea4G4^,5)\Jj7PF_C`5LXF0k(d/;T2!4aTQiYH.l=u,fj.Sj/:Q4I;]=s`
M31#`AFHP!a0&_f\ZW&h3GEQBJq"M@N1m),IBF'Zc"gNnVt6ES\42sCFT*`t9N#C^_Wi[i[X_(HgEj$A
+,`Zmfpt9ebL+6:PPR%#-*hXdf-#i-M2cda2qfB.\@/,:k.HNRa0Z=ugYDqBk[S>]?oq/^/Hc-q!qtna
+?E1enkjm>?;<Hsom.%gXl9_Z-3iUrmGF\0pFW/(Nne]gQ2sg$@/=8m1t4hk!)oU-DB&.0/;dO_fA=EP
[rCJ5!%U0/RbWg*G\q@.qCZkF,D!5f.09rqU8bh-;f*hh[Gu$Q27B.\')qqpIe,VkMjp&dEPjOd%Cl.Z
h!0`t[a<Ii_K=Vom0\k"Cs0)7iMP1h>Rl=e%?M_4!3E)@LM:g^Y%-6GK=]'g!!!QX:WL^B"/R.YF%-n2
@_CAapf_NPb9=_]LK8T5j5dI9N`Pj>c*"<f[bBLGDli7V)G\\hC&\0?&>`7EaiM&O.VPd+dTu9&#]J.8
-9gLLM!1BL]M!&T>/3L0hEglLfTsPu^?'^>AK'4f>8l'.3ZE(e+k#<3GRe.RNPrbDVT0WjA(jI^ea>&U
1j9-K?S@R*%Dl\C1>H9lQjGX_^a,6^nJ_+Sa\`t:W'f*KD6u*/]e`(QN&n0JC[H)rA!*th/@XYEf.j-,
nj"=WId((nXff]`'irK2_mBWW<k6InV!3l?P<'R^C$F1&9X:s>X6K"b,T"b6cgICFZ6E6uEgI:6DaPSd
@tH5GCCe%#XZO^;\piq?ENNpaGml;.NS8BT^)dZXq_]#[P?DU`A";qhF$7*%rOs2iP-MTTa(l,XId:0@
#]J,;&FRGr!\ofuG!f#nNR-8)X@s+Q!dh*)lLAdfTs_D$gP&+oSK29n>\n3og=Yl:_rr+%V`"9_e1PXm
fsD2>GgOR(n31W3Uh86C*,>XG5m>\=G6ba(16e-D3tueRk:hWG^t/h[Be>_?H[M&=O4?FXT%;OD%*1(R
F4bn"&l7Zr/Tc@OZ2158Z"sjZA2lH>T,f:sZE2[.CY6N$U$q^#KR7rcLs\%$2>fAlk'r;9K+%O)>AS7>
1=kf[r_VFN_Tq?cA#IfAk$o=p#ALCRk(Dj*@XQe&e(-7s>!5.=8L/05_IA"PSmPF\DT4Qfd;s0u3k#D"
Fbe87hOGif@FCbrCB8-4^e&a`6`5$aETm9`)agX>Vn%aoBb]tVVW%@!c<<h3r*liuT%pI0H?E!U+-?@?
<ESBef?WOm/XI%hbT3Y6gO`tg&*ZCPfd)1g]A'D-F<$*5%-hBR82UoRE@ij]dQW\NQjunl2Vd>)=Pd6K
L7eZ0J\RZr6YYu=!S$!CfV/_#$?f.oL=Y0>#D`e)C,MDCHkZ5uAWU66k=*A]U".EI48(mZ0s'd7g<gY+
)U[nfm;WatCS^9rW;NntBl5pa\5)kLmGN3Upn@rYKAqa@G*-)hk-2sC5lo7A#MM#*J(I(CIdAD9P22on
[Jfu<a,eX,%Cae]91DaE<8VTBW@(WSGj(UnE6W$2?IlgH_n/k%K>@'J:9)YDC=mu6+&AuZCTACt!?b.,
[>@1m@'7PZT2"(mp?LYX:?Lf]c]/PeWl?lG$X<tD@3Q.u5+f<PpF7f:aK"4(`IL$s61b#J5.0aT>-,`S
bk5F1E.*N5>PjRF+^^f]CKesbh]Bo5cE[A[T[e,S*p[.cGmA,S-,Mb03dG]Pju6)N-J%'[O^5r[D;2#9
97=l"h+ikGl*6tl7>qj-CRYhVS"Yj@^!E.::c>`5!:\?DJGgj=qE=^(4/VC]Q\LY+^*XA2,>_C!C2Lt%
J[ROm3KWL\iOJ\R-fgYPfb[J%rr?JHV8;S0>?U%"PO1J)cc!ff-*F)m".C4Fi#Z9nn%2l#^5Hm\^(7+!
hbhe.Eu]?:.]oQBof>":+>JDj31_-%6lgWNl5BfhR]o462a!Eh%s=apFMjgqVS8QZ=B]3WJ^<B1j6Zm%
\bKolO%jmPhiUJ>[B45ipDN^Sj1p1p+r5&Bp=d]BNIH^,1_T$*i6e7FIsQ(\qN[c_.!>0JRblZb+g5U8
![(7coQ<V"+hnYI7H@Z`R\c[pg3DBY4hoj5Kj=h>pP2`AbANJP5)t4!f(%Y6??JrK$%0>%\WR0L)ZFQn
hNru.Ub.*eg2(Y:Lb8P_ID4Ua*;H-:K!Ug;8rH&m'bD=gSTK[3D??S=<;N`-Z*j!&^-m<,3d!%Qi&kMT
=+-t#_q]#Q=V+di!"!kZ6jBJL2;k-@*?,L2kq'+n@r$&7VNucFTInlSOc`;o:>O09p@#/+CO$kUM//hJ
<G0jDd4K`/]:'l1p:KP"I&0oMm$qgZgK<34itaZT!1HPRrR%e$r%q+MCXI-nT?>S;g5\E-UbUC)LG>5&
(67HFT,!]\P4hVaPAILtYjiZ+o%4Q5k-&FZ>uS14ehPJr'/3V<2k=K8dn^S/@cZ6LdM`@`fQdJ4C^m61
HqF+2!(%"F/U^d'ogQJc*o2bU]-9_Y54A.OKf<9&(r5'?(;oni%E/]'1pO2n_%@RfVi8hK@,$7BrN)<u
YZOAROk@Hn56U#PXk^@R12r]+QF3l@R[h8L>0h-k^>Rgi!d-bP9<kp+_0N8UN,`?8aV*%TT55%$X44_p
n[=V3Q>JH=XDZr%LU=ZqNdTC$*31[,hi^X)A=D<P]3<dOm5q[;PPH@k7&X2>Mb@?DXKmiKENhfCSY3>M
VE$4kb-@J\S*T_#mnUIqDFMief^A,"M3-siqd&o5UfFc5>fa+4%3)i3h?!5tKb47a7YgiaHer!XHW_sH
mFX?1>N=bB9c=U3+!8`n_oStPqGe2=mU7YVg>)j83]8@/]'5qYqf,p^Bl3PU[JR"G$"4g?![RTD2Ioa-
hc;P)k:h;kh6LJ:$p/_/]=s1N2VaLZC:Kd\n^"VV^Qdo&fR.+#'.]j*7B:S!D8l;#],o"@2M^`+=V2d$
-G%BiBRcqhgt+Hn3#Fm1&>`m;229lPHaV\=NH]R#Tq=1uNK2_]pm24[Y7^hN\D%[sE>PXFpD7_&BRKaN
=)]\$rU$c9b?k:He#XYJ'*VY<2@[1TY1hW6^fgbj5sLgu!d<l8R.rjqF.&.#!N^8g:t^F+)h_"JgmKT?
2'"EG[_BrY^9)3e]uC.Lp?g>f#J(C?9cgneNq8<h_6ob+#'Y9M\]tjP.JfmE_8U":Cu"?:lQ=mdl7-i`
`k%74;_tLlNcW9g?6S5:ABprA88VjWLM*UZ$ZY]N^9JOn!afGjP/I1&IC%u;XL_PI<9fEX=YIn$HO"0R
G`U*<lAfIO4aAnFTsM/N%K\PCZeEmrqm98bpqSk$4$cfYY2-Mo2'eDPZ$gdd%mc7^=M*h'^Jc'pN?t\Q
Ks,:;bt!!sIT.j7ArO3&lCDTuF_cEnZ(PrRBBKp4Fk(-drEuhVoU66?[/4\e)]\S5C].#np:hsO1YoXJ
f!_+mU$_Sh7_Q/oK3GJ-@-htd#LcDuA@/`#rA!+</-6=57-a4Nb?DPaQ*IDA$jK'>b9NB/#Nhe*Vid0C
_J=F7nnTDb^lN=3!4c3UWE(Eoft<IMCMDQtl/1Ol6Bc*=O,WR&Q%8@PqZ)ci_DG77de4H234Yj^S0R7h
mV.2PK:KsK!#?@I@-J?Y8p8kL[V^d2A)#ddOJ&263Q%Rpa6p,"juCVK#]L$_];54@P18>U2NbFm",#GC
98"fscY^dF@CsItl$'e+SMtd!q")@V3>hHY6g<6ONAC(_5pc[l5h!d7X5@'&f"0\_`qK\J`9h)Kj8#ub
n4(?6%@4Ej@<Ik&@qXLPO<u.S#s\cgPVKaYkIV]gXa:u&\/,2I3hLX"]B$6&mCt:&;glWVf"CGD%":r[
([^pBrgRdaM[\8#6R3ZT36%N>pV)LjF).)omnreF`C"EODMe9)KM@V(hLSC0d[1m(X6GB9h[V#P/WmV,
r)LA6BWMZm2RdRFRaOGD4&*teNYDZmQFKjtRpL[52#EafaCC)+7rK)GlFbg8Z,5*QOBP1p0Ds4qZtV`]
j/&<s9n0J#D6:LTg=^Z'gB3c2*T2(rig'H`Mqm*WgEa7BBd?"Bh6G!?T'55$eC6"Vc)'>i!T)5Z`-+<d
OUhcMA9uoB]oRn&Y^MTYoDGc5Vi!ujrJI7+@tiC3AlE_"Gl8M3__<@SH'P=39,t`*bFubdHI%'("fu@L
(P_l2e#3qXbXurA[`6hZ5U6g;N:G&?8l?1,*uI'\fd=$JI40"g,L%obAV&*NHZs@94SZs8U6FrJqMclV
$\MnGN?J+@o(YhRAH@@Jln>"kJi@FgId[T9;-N5_U;oBbU!.nMNWCIag^l6F%@JO#Z)k/=1ssQ0JUs_@
Y_u_F2)r%K@>)2>AB/rF)^X$3?'SZ+Y:ORNh%"YbgnIS::5d]TA%-;%)UT)MVP@4+53*)lX=eAIB(o9\
mQ\kR4)d&U]#PUAZlQa_inFS:,IotE9hiJ$2`e80_(B/(51/KLPR0]PSD*PeAQCb?@uPrrCFj]d[#l9H
UNbRsjk7*aR`ilVk3h(k#(,b?6f><LC?`=iAK[Jc6_KdS)?=lg6dD.H`F!d/<`7(-[oHAfS^*W#fHbrW
r0"h"9hSa]6gJ5dA<rifK8FBQ]3'YI_RGG/\"?[gY.Et@)B3:NY^;nl2L^l_X[DHY.b_!6FY8$A!O3,h
bB,nS)YR(AH?X^[m&?X7QH4+g#/W<4$'Nc[>*2EgRsS?!?)#,*DkM5!c-os@eFk<1iYYo?>>]"je*_+F
hZ!SFj4t'R*Hf>o3Zsbk>$Ek8&4tBB^jM5^@HmG^[ETo4*PD9kEBCZo7m[hL'c*rY9pl(?6%t?)_7I'i
Fo]n<4ihi!b56UP\]q7,Z[]NhD"("0kGl.\O^09MK%eE2e8TDVmfB>B5;*b7kJ$-$e=Qd?ah^979A>P6
G-0PKO'nu*Ofppj3FeT:9nXA[6\G1)JEVtfTbOR<Rcm6Kc9G4LW7;@][-GXj96A]b"&MU]2Dpm5fhdh7
\=EWpP6`)lVlD\ab#rTL%B5:>hSM[!BUP5K9F0h@XHs1kL=!rNTKt2UH)kiJhmg_<&()V];dn/[/\$P!
HPf$)eo!Q:RWn-TVW%GQC[>X.c`HCQh:CJq<X,,!f[7%/)Q3Yn:%mqVX's3CY%_gMpGpecYSpd6N@3t0
H'#(=i+/>Da_bJ*c>a(j80#jn^([6Tg?Yd97<]PQl#<nX(75@!DOgp;G\W(tFY0TN\]q"k1m$+[k=>]a
`+V@<i'<XeIpsCke)+->3j8eTG1Xas&kD@!g5d*4;9h!r.qUl5*o/A")^LK=G(O4"2/=rAp5s,`Wd@!L
VU>#9#>Z))ltc!_bF78[eJk&AG2W0FG_KqER#J)*XFB/%%e=7<4MoRhaD&\AaF.rK9o"e&8_W2:)ZE0]
!J9Hc!9Q7AYNddTVH%Tj.q)p2_uW(j_!q7uOKo3j?L!>\BeQaJlQ1D:gKtI*$2`/C1tn\$9e+Du<ZHGU
`!VkZB^SX-S?">5]I06^;W,a2QJYE]3:sF4d+15.3O1ns7!iH`AR[Gn!jc+6ZY`DZ#(NU5TLGXpI1PWB
AijpXj6Z6XEusI'mV^%Q"'S=\Y-uoI[\dq],Bt<AFQC7500SR59!!qdAabCX2'eQ!Rbr2A1m#<*PF8u+
_qhu2Yjtt/V4p/4bk\,of%3aS^Phg5@tnB(VEb1,&MBV=33+^3Xnk8+a0MlEX=W1hd/O)bEu`l!_9hEg
H<&bp(CeaR\;/D=!7QSC7oGJD=1VQ9Bn77bp#.2@%YncS'@6O?OpSVB0MRj9p3&R-,3(;U`jc$_]A;l(
q=:Xld4j9ISC\#[lu2sFG<!fcZRm&^\TX9A\="D3)ikXaeGPFaZQE*d95/;2X_Z]&&j<(t&b&DH?WK6k
rgf>*rE/b0#=iCs+J*sl=MhfkM[[(;"gV>BIe(Pu]2/^FJd*Hkp:&Of)Tge)!k3"kCq+5)j6f@0XLfd\
ULX$\33hk*R/H+F*Bt`JTc0W:MdtQ":7\.o!5K3X3rg@kI!_UBP=TgdHYgC@/S;o-#=QS:56WTc-;s>;
>8S@D"f"uEnc&Sp&b9r3m\n^i/U;pKj2[/l#$\"#:@'<2lItF7X`/[%1aU'V41;jQD0u,)D'AeUES\6j
]]o&VBTJ43m!9Yl>3DMjVWVqC6Ect0G.,*/[#qS.*o>WF7Q&PUNtfg^A*1)\Z6s]]a;Xc;)tK]WL<B[&
kI8ncSg"P7V3@0E<?$X!V@<YA+op)9["aY$W%u\%bdEHXo)A\gB_l<up:ES>X8,]f6b>fn2iZ>SD[d4r
M4Yu\j("!^ZiJ8g#A[nF5EsgO8tboBdKMM8<5:sl3ge]Fj,ro[>0"me[0J\[WRB-Yf5Vco,!H8DPVqIT
>O8:J4H4bJ9V%`m`&lnZi/;EM[HoMU9KRF()Z:f`I#q*01E=W%fPkc5:>uT?5oaknnuT/ALU*3dJ;YK=
Uq`6$7!kUaa&EiE+dKU>f]q6u#We%UC?H(S1fSL8NEnlPMCW`Wm<E]fm/ao_9`?P+NjY1nf[eX)<pt$9
lm-He_U>KaiEXA0jBX#hUSPN1eene$7]Jt:6YXGTca/%MDf("]\ZOuiOu25dY>0)B_545U7Eu(NhuIgi
LJ"gP9mJ@<R*gt-d;Ul.8%W'UVo8lo1:j("Sh"o7?!(bqi7:8;BHU'_nY.74"=^qICOKg\_apoFlP_To
/V"f47ig*3I7EVZ?Y?B3>kupI$&t)"Hkpi8/odiF/f0'(4bUMQ2g`:t!:I4-bGQi%9fi,imq?J_OYC$i
f0hSh3[87N#H*9^emk99&hK6Z[DR&]0r,lU^K#.RX1jnSC[RnF<Mrk%5Nsp`4*X3Z2&igp1#AZk!4V2p
@*"/mk-4FIDgkomfsHJ<&[iolfeDYd!*6_-1s9_:XdEUWc]?t`Qt<DUBP7FX^sm/h:.=S\8-UXe'>a5*
OCtiWZ:QX"%[!rH8o*,IE,_,QCSD3n?K1,cER^TpC[E:7@S+q1cA4@,D2g/UON?4),o!]+U<JN7<H0WG
-U9jN[<c*r3*+;,CM@bnCOlZW1UguYo;qj)%\;p3mq#q(`Jt1K0K"^9P.E171GEfUAN$sJqeUb\,RVSt
CBesKbj3o%Qu&5>[o7(?#1Ue0FeE8-Dn"4[UeeM1Jjc6HHsp*rl</T&Mg['pJ_nD$m/VL-VRSGle)Tuh
<Usm:2bS+:4Wr@;;7ec9NUDr4&J@>J\19?sWf2q^@3BJM>Y-/S1T3&&nq;,cD@X*P]5cMIqSsc;;"n-P
m[0./\*`t\nQ2r@NZFK&^AY\*_9XBgd!"g0\p9@MF*[R6[it2UQa+KL0rNg7qB)Hu+]_`afroai`bHO+
qW$Lg8:W9c0#rD>Sk[#\d<kPn[QuPB/J/J[f2QqRS9DDLLb6PbT37cZ3J6#g[r.k,eeWa6ZQd!F@4cmZ
gM8^6S[6-+qk?3%9'%5g\*Zt8[C%anA^9-S,AEA0J)gm(WgD/K"Z[HfGN(`mhp&[SG.8*1NXNHKV/:Wg
[]<V;;J<=rF()jWRgk?ImdUZ!VoQb"ADg5i[8UahHr3f#ZN=Q'R+(S$4f'm`,r2Yk4Ed!*%d-c#XDcPA
&9p:DK/0J`N[MC_>T/%8gaE'36:u@r5!,i!YSP033N)*IpGq9T"k<1GLL]8Nb/CkSpCk_DSL9Pt*_VF2
aKD%R*7A0Z>3<J<)W.IeY+qilR\*K]CX%oOFYejVH_oMELCrU7G@!0<AVnnknefrka4+eMhnL'MYcSq#
`k@KsCX:.)1".eLQT"0`>$B>mfTq>[3R4"D-]ZBIUt'!Zh7JRIJ=.R`i2!0g?qCLHKd77He6T6837IiJ
+IsT.c,]K0#C.n?Q5aDI!;tbCDG82ionGVmk-s13Y\odl8_:k6Vg]qY4g/pM"pT]Nr?0iMj8%&Of0qUW
1=-C2L@_gg!8%EkpMKC>+pD\o1$Wmp2I0C\Bq0@YRbK![H/5/4kjOIU.Fjt`p\g]m"(M>#Ch,EJ)G:ol
+RhIe]*MJs8Trm42bKZ7>3EDWfpIlK-Uf"Kg)Af+XdK&=TLSJT0U&;Ihn_C0q%UDLMKZD2F0'QBH_%up
8($[NP'_$S/nb`'!4WLV\+b`>Gu;Se]0L<83W5MD?+)\/JjB+0heR'\XLQj@GI4^g$lIHb;b5MiYu\R3
HB/eurLukER"$/amSRI7O:*.G6^Z:haOGY8LFT]*@E1Hfh2c'SYT?I[E,0g=Kk'AsqH<m#S\T\rSMrTV
V-O\meTN6Mp//)GXT=dTG1,RSmUM;!-jQMVmhX@7[B4E%+#3MMh^(M@<n&'jYI(_@%rpWCjV?T<p9CcA
aRqHC)K]fmHSk?RSQcIfn8$bElKk.L=>ee`@#+"!F7&t9,Ja\;p"O%\%GSP`gsNE;k\ctUJ)6#^m0kgK
A#aMA[`ZfO`#W%<,N>`QHC[eUH(fk3Mf!in%]1Rc6u>YrA%%KG6WiWpEV`qJhHU0'`FrZ@ZH)S(XE#=(
2<V^oNb)%eb+BFS3#ae2j:YQci^&A`r#mK1Xc6m[qLJ"jl''3?pHiR5dT(3\ICD&EQ[PEYc?j)8:5;a8
r:h[OiaSD372E3Ni8\T<%XAIE::rMP[46P%*30N[bo:g;@$!eF&2f<o/pf5`Q0iuXDS!<([mpO$2@hns
JU@#V[IuZH23p5YlKd,=)@RC!E-0C1Wd:[_<RuJIUeK5-@K8.T7br0I1t4_$RR:mDZjh2F)"g&;h%LcB
Y)3/Y79pY]N8W8eqCq&t\@KXS97)[t9[81B/^HB19+*JZboWkVrLWmE))$3s7if2lrAjP0ImV$(=@?C!
mXq2qBtu4)19.5sf[HdS[^dMMh\bOlW:\g`DWVKKrU,"bB`;l&[AEBnC@?nV`p7(a[u-Npl#3\if2K`'
bS"#[cYq24+ebnOo]#/(:%Xl(Ql")qOpPoSnPZ\Sk"td(!L"hW+??%LY*QOu8+8"9=a!isfkZS:&#f>W
\Sm$?3d_UK*EB-8\CP-LRVEd/Li@^:36109M>mQgMQQS[2RS8eg?1cV0gA=M?+lNc$6;cEf*4:iK7VRK
`'g$f/6cr4(V/%N1Jtb_Ta+>&\j63VdLp*_kHVY.[EU;Y!7Zi["]i[N@rIHQ]A'h:,O'U':.AN%oS+>U
_!A/j&0+haRK@,'GbQcHS#=a#>]1lFR.4\.F:\Y^!9QKqZ^]O*e2!P?c#%MpD\)U1N>_.Fqcfd&1X.cQ
-CV#ORMnQIAcXLt&N]3UQPeF@"?8\*6Cf#UaJu+<CS+CGVq_T*>gp6]T;BE$F/cafqH<'<!)7lmn$gCG
%is5d<&5SJD7+hTm/7^u6#kA)p\[q;.V^aM,0d3+DVY6lTctgQmd\sBfQdq&Nb_`_BsVkdY0j,>_U?E<
/t/7+:T2mUdoE/@o:U9ugUD+34*)og=+8/nqb+gSgS#0KOo1#T&p15fBe&AM3/qF,j1I8;F.K(4#Ig81
n.Xl6ML>i$l!#LZ4Z7h$%sI,3KQ7i`W6CH*XEOH/7?k3qLBdpf@@q8c_)7:ZVqlbqD3(>H[p^4`QF!s6
Dh;B15oqu4*SeB=E8>SBO0R-QQWV:A@U&JIliP:_F/_A5f+Eti4jG^#&Ng>4%X+9U8lUrK8*sOt"'"?Y
#K\*YV&pD7"\Ge:K_@tgl]DI3!UaNHDK$4f"(P6,9AA_jES:Hi?64D<L?83[)heb")qeQ\!Q1L)Ztg^:
T'i;77WhJ3?L2.Lk#qSsH^]F.I's]N?)?!JbV%Wi*No]DMQ<4bWRPdqYi,COg0LX"\og7`kk-c=gkIQU
h"mQ'\\qSjVZ-W$$(WoEl[G1Y.1U3DV>(/ADR$\O2RcFJj7+nj`[7.M'CH9S&6e)O)B[aM.oQH/k?QF"
1tt3YN^OCnoRM$X+a?(Qf,h$2:?ICXK<sYeNl`hE__6B5I=]ogCF5]X6f,_SYB9``^nd=E?4T'n60@W*
M]HS>mqE[P,=]6(B]l\N_K0!eNK)],#r/K:p5bq9kS@1%ieC=9b*q!+a_;gYqmbZ^i/,n<@uH&'UDb9E
`j+?jV!IiTfG:]-Rj;KSjY/mfh1tVki5+?_!Rp1.Xf!&e!;]9hY%Xb7@F$1&D.NB'WkW*E!%A^e2:GcR
^%+!q:Up4<G*'-_I6O\tL3d?V6U<bX2Bl&cD*V<01[PuT)ikb\OOh!d#T>eW#LWPOH=:\D4)8]YD79b3
h4`R*Ne+;Z-6R&(UTsAo:j`/1J9+m;YWOetWlD^'D;LYXm4YQ59S-YiqF%j6qpTcDlDg_)AD<@3eVrXR
)B7rWaU\/B!]rp3W/PAppUJIk"540mo5&)Yk,f9^=\EPM%B,HAK&C4An8!f-'jKKgQgB(T?2jmi3P%][
!8Rss9<Q>ah0'b*%=Ma:A$gJ#&7k;ZPhV)Y][:'_/9',1*]d((VH,@\ee,=/bne-Y+T3n-^]a@40tMN+
5A"+-5U%_[8Uf7sSUWXO&BF/IW(-5J]$(@Zcj5iTZCu^@2R:A%l8de1N-$sj\VYm@"-n'<V=e%#Y@S5c
M4[M38Sk#qW]d5ZIZP"`0O3SETT8SilBS?f`n<dlm:0jJrJm\58NLQsP;2X[9i^I-`c:[SYa]KF5\Ml+
-=Fi^lAM0ID+E'\UN$IU['U%EC'!5La=J!eD:Ung^;e4,cI@m2.'=UE99"f2>3b7pJ\ZeD3-*ClTC5n<
:BK\>;dDTHkm_8J5V@%uO2YDhrFM!N>1YSi9h+S(d$m*SekJ*8d17f]h5`m_iUjjNLC'X(TRu061tRZi
7Ga4c^#B$3*SV-$4J5.<osKg'gHkK?*+V"GR1aXH[cHFHAQ1F_j9Egkcl-E#G`hbNpN2imQG1CrpH/#[
4DJN^5!OWVi.04(7JBX-<AcMi_g,b,8E/V#T_A/)8%1\0=JO<sm"#-r7/gi2`6';cJ(eNj%B^2n)d)ah
806@a6XU1Z;0lNBLUahq!%^!0G_<bL\/f_fV*Jk#,XWLu.\ULXbC,?c='"R(VsO6k2+=DPQu'(;li9.c
,Ymh;p6[NG0[6[0[KTd!S].=I[C`(6)YQPD+kPF+!+(*I[W_';;gTD0%F#oY?.-uh^"<*tXgS43k88FD
n(QIL$C5j82#;pU!rE(h\7u/4lT[SSL&!9-(CsD#fMApdI=DA-nk$'T"_9SPf&q4I4l::&0'LcdPiP!9
?:/J+7aIh"5('#,0H.tq\%H6BgJ@ubMiR8aMiqDu45:f,BEeT_o9Dj$a&Ce:V-@MlCKg2Oj5u)<4t)L1
mc<kk4t*+!e\DVipTB8ZVW9V4*mM.Cn\2-m-)'[gFTh)Lcunnaqf[`(o<q-U]Z58^\EooIL?e/SU"0GW
GI>5r%Xm'qnP,;4U?L`=gR.ndC40ilDm-jm6iI#((_cGe<mBmZLc0.JX@BVP5i+DkV<gAnc^c3])^c'd
qC0"n=UfG]K;dEtk5/V3bQ*)B-Hs*gCRXE,YBKXA:8J6]HVuB`G29JP**83t%!X<HY\\AbWSC]6iaN/3
;]3#ck"oeSRc_<-dMcZ_fBH)Y<*PoVb/5.t!,Fk0-g<H.#\i\K$f:I*[$"VK)ES8p7^iM6RUA`tigr"V
TfGcR1.+Hm9%'iIMjmXO>!j>oXs6^W/sF`PlC$2]dA*>7S9Sg=Y&T/leM(n*p,a#_M]#[ZVb$jjToU$_
`R5a[W3Yg,U'5DjoAIuif!`1ZG660k-fQ9jWI6]hZ<H`T"1njXBSDXgWEirP9n(LP%^W0,>+;*9WQ!5"
NMjPo0UhMj40^D]l0YJ!8O<Yb;D0YJ4l1E)Bd$fiLiJV$KAXLfD7[ArRTWGN.Q#ZL5I#KUDJO_->a]9u
6X?S'mj5/d;sD4^rU#-XS9,ltDSLEjOLe[,mne)MGpUuW]$$Pn3m^6MCJ1,ViX?\rB3NIs`]D9]0AHY)
rrC@i:NLnT8Mr[[_ja5-T)*HZi&9(Jmb?^.]8!8/YK!BqI<Rm,+/IIg2#QfX:Hu[*iJVWrC!jO4*^TMD
&Z12G)pR%22UL2AXg2BHM&^c_H/U[sQLm/M<ufjCIZ/6,:<&CR>K6CSh>XXi)JO(XFkSah*p80aBCg85
?@S#Ip0;4M#r:u[U`Oee2BQ5!S(h((Hf;@dL61(N\=d;4K+`<QI(Li1]*7A5)UZ.N"H@nRUIeQiGaZ)n
IJ$K242'fjn"a[hKd5)'1GS4g)VQn_mI)]fpE/5CJ`NrAr4fWIES2\YL9tp?#4\o8i1XC?AuIHt4/]:I
f;\kd/bM*6UMCuGr+)a;rC4la@E6N3fE7Z\#+a64g9tkqAUQ7::u.=Ch.83hrMT7pKj,&bemphSb?5?n
g)3g/pQulrO0g87M?``pqBnY1R`k9Yf0/+!)RKOu^8EJuPi>a7k5lM%Trese7t!Zl[//AZ3i?m$D.Jq6
f#Q*4MJok6@_(oM0VXHEY'#8Xi&#4:>3YgY?:iO[?Y+*3>d_>9^OZH7haLuH4Iin=mHQut(7gG5%QY4M
k`@t9=oRQ0Y,hXX!Ik#nj74\MimC1)Xi"O_Z(]+I)`ta)#[Xp4<EON_>T.JgVVAT6a#hc[dr^%IES>Q,
9$?K:=VWs:ju4?=gd;Ipj#k6hd^n5h$k/JORIAqOa`*(^%cg%#bHhqjj1cJNR<tH08TSK0f4abD)aP4d
`l.hHDUqJGY_P?p*O2IEQ8O2,nWd@%(L:V)3\lYGcq4(1hkMh[@X25o>sG7F3"'R",HMh*`m3bnk;fG^
2r^Xe0PE(f4\To::=d-i&Z\GL8.P2E&gRsCf68Rs2ATe-"dQiD?o[DS[NkkYaK%fY)OYAnDJPk$JD!#,
)Xd(<KkQ7Pc.F&AdU!p@[R'lZGUNZl(Zb_l'/8R]n/qf"'P,l)DcEico6iRXYiF`r\Y@-+_WY^il1;'6
9u6)h/@+Q@G$o<^H.TQs_Ds!T0<]F-U=(Tr)fo3=OEWhVf+-P**^$OJr(OGD/[b1UVf/S==N6`e^rIKZ
dtK->-hV;%n+9mmkh\Jn6cPu\M>)7rm$juq]K:"]T2X4cO:SjT8YYM<oPB!)cpmLD"h]m+qWbJ&BEQXn
AV'63>$\'jB7rhBMK&.W._d.0CWcm26/%\GL9!;+B!S;BlFg8bSaN*1k]MI4?FQh2^$L(a*_t-QXtXHU
G=/P8`]9cF2\RicTtkj0c]8BP,Sl,(*Hp6'Z'\ko7'nYl[!gEoPoEqN&Si<+A&*.Ya3rGl243K/cE7%!
Z*eHA/3BCIhU4SD+!j911%nqs/h_X4&9j[5%j)*G/tgV*V=lm!)m!ir]-7#H-5ng6SIoMaIeSp1dNSqS
Xn98U;_=6I_QtV*[L3*`k_DiGU*s\5P3.ohE'/Ir17+R8T+AbVA9<PhO3#?\!-*-C2\!Qi,AE^]'iQY%
$_/\)#O'n`!+Bctp?hb(Zs-/(QIEDqBd@PZW=e'X1:l.S2JiK]CPZM_$aoon!d0aqXmKn1k)e3:@6>A\
A*0%&L;,"PlD,^aKR';gJCi%!b)k!pP*hJuUjNkI8P`F\>6<^8fB;/'S>&_g#65[gDprE]MU;4kKDN!$
ot`C&GK&K.*slj+Q>b:^QFW'qDO4,W*UA>&:>sp/Y,KOGkh#Ir6_A#&YRLAg&Fm6U72aN=Z:@bf"P:;(
/L3l=#B@nWpNk/$TJVCXO>nuN5_r7#Wf`9GC8>r'SO)aDU7l)7*pp;opE]LAbA;Mn2tKP+A<`foFeH7h
LZojD.b!g4kcDGcoc+*K_[,Tgn5Q?5"nfI[23KocjpmhP/"Pm9\;tgb'&O.Fl@N6"c503@9\8]D?q-pi
g8'DE7;T9Fn7m**!5Y5%R<56fSbmlZp+&'lT`Sh9eD9P`^AZIM;s<-19C-hMVf194rg2=t7t%YKg:.iY
*I$cD/=0GKcMJCNrlk#KaVE+Rhu'V2p"eZ^&c."ThYj8KdkghPhnQ]"*PU4d(S@Locu,QLlMF%`m*A3m
VtPW0PN)^VFkmD=5GRpXB91GWT;+U;OlsmWoTLTt?:2t)IZLqqc_<X<DOLH1eX6!eEOWEr?G#S(!,QQ/
^8B;aG3Ft@IlHBq_%KQ-2u9h&IYI_9d6C5dZ1q,a;*Sdn-LL=.DYW71D81\unKcuUIJ1A2S%!l+*`Ld?
en.\5Y4VI7;Z5&V[pFN20,7%]+04]"Dr#=!2HLj4HX2itNm6:(F$"K9oU="kfDVbk;FDr$+%^\/rH%2i
p%LL1:"uGWc2FQX\!g[$g\Li%O/)?B[.fFHr/8g_9p\;>rrA10/FAuUbBE.;as6ZWDP("\g$ID98btM5
4-0+h0M+6?\ih-9]6#."mI^@h2pUlantVf*`ep'Xg:&kMrL8kKlbl2YO-e2_?>Pcj8#t<M\(>QPpID4O
R>u^-IU(%B`V'5JVsc^roQKWVVpb6&K(IKT>'><BIBmY\[S/GcB6N;tqmOQB'f5+N,LkED6e1pIh<ILK
9Ck(@.tL7q7HqCmgH@#Me\?2:6@X/PmdI\u^Zg*BHdDRi>"S\E(U*\=rr=uAhTspTUi,npgZV.G;DnF]
d=99QAnLM<rm'6S4[$D%o=m1D?5A]4htZWK^Xm\^o=nf4I`36b^NZIFBCk;1\"=/rPg/iLaN`RrrAO)"
qG."HD"t.R,eA]4V7q_fm??dP4EDQJ^P\0HI`fpakjN_l4DrVkh_$;$A>Gg3Z_Hnadr*k3,jt/]2St?E
P"KVZP_u9"8oCNmWMG]KTB_a"gD*KJLMbd18j&G1e0F<[HCMX8kbIBgT:$X@h(-`J;9S,!)'SRCjjDM*
krYY`]=pGX&(8p\5p[_q:7:uRER++KcA8pLgT:8tCu+LJT$cX^/9I!=VX^$.jo1rFrr>KWq10Uu24fs\
H5p5*ZerBc[R^.rr+.2#,anL#J,e1/~>
%%EndBinary
grestore
np
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
